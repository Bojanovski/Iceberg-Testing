//
// FX Version: fx_5_0
//
// 4 local buffer(s)
//
cbuffer cbPerFrameSSAO
{
    float4x4 gViewToTexSpace;           // Offset:    0, size:   64
    float4  gOffsetVectors[14];         // Offset:   64, size:  224
    float4  gFrustumCorners[4];         // Offset:  288, size:   64
    float   gOcclusionRadius = 0.100000001;// Offset:  352, size:    4
    float   gOcclusionFadeStart = 0.200000003;// Offset:  356, size:    4
    float   gOcclusionFadeEnd = 2;      // Offset:  360, size:    4
    float   gSurfaceEpsilon = 0.0500000007;// Offset:  364, size:    4
}

cbuffer cbPerFrameCamPropSSAO
{
    float   gZNear;                     // Offset:    0, size:    4
    float   gZFar;                      // Offset:    4, size:    4
}

cbuffer cbPerFrameBlurSSAO
{
    float   gTexelWidth;                // Offset:    0, size:    4
    float   gTexelHeight;               // Offset:    4, size:    4
}

cbuffer cbSettingsSSAO
{
    float   gWeights[11] = { 0.0500000007, 0.0500000007, 0.100000001, 0.100000001, 0.100000001, 0.200000003, 0.100000001, 0.100000001, 0.100000001, 0.0500000007, 0.0500000007 };// Offset:    0, size:  164
}

//
// 8 local object(s)
//
Texture2D gNormalDepthMap;
Texture2D gInputImage;
Texture2D gRandomVecMap;
SamplerState samNormalDepthBlur
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState samNormalDepth16Bit
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 100000);
};
SamplerState samNormalDepth8Bit
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 100000, 100000);
};
SamplerState samInputImage
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState samRandomVec
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 6 technique(s)
    //
    technique11 Ssao16BitTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrameSSAO
                // {
                //
                //   float4x4 gViewToTexSpace;          // Offset:    0 Size:    64 [unused]
                //   float4 gOffsetVectors[14];         // Offset:   64 Size:   224 [unused]
                //   float4 gFrustumCorners[4];         // Offset:  288 Size:    64
                //   float gOcclusionRadius;            // Offset:  352 Size:     4 [unused]
                //      = 0x3dcccccd 
                //   float gOcclusionFadeStart;         // Offset:  356 Size:     4 [unused]
                //      = 0x3e4ccccd 
                //   float gOcclusionFadeEnd;           // Offset:  360 Size:     4 [unused]
                //      = 0x40000000 
                //   float gSurfaceEpsilon;             // Offset:  364 Size:     4 [unused]
                //      = 0x3d4ccccd 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrameSSAO                    cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   x   
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[22], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.x
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_temps 3
                
                #line 31 "SSAO-RayCastingTech.fx"
                mov r0.xyz, v0.xyzx  // vout<0,1,2>
                mov r0.w, l(1.000000)  // vout<3: 1f>
                
                #line 34
                ftou r1.x, v1.x
                mov r1.xyz, cb0[r1.x + 18].xyzx  // vout<4,5,6>
                
                #line 37
                mov r2.xy, v2.xyxx  // vout<7,8>
                mov o0.xyzw, r0.xyzw  // VSRayCastingTech<0,1,2,3: 1f>
                mov o1.xyz, r1.xyzx  // VSRayCastingTech<4,5,6>
                mov o2.xy, r2.xyxx  // VSRayCastingTech<7,8>
                ret 
                // Approximately 9 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrameSSAO
                // {
                //
                //   float4x4 gViewToTexSpace;          // Offset:    0 Size:    64
                //   float4 gOffsetVectors[14];         // Offset:   64 Size:   224
                //   float4 gFrustumCorners[4];         // Offset:  288 Size:    64 [unused]
                //   float gOcclusionRadius;            // Offset:  352 Size:     4
                //      = 0x3dcccccd 
                //   float gOcclusionFadeStart;         // Offset:  356 Size:     4
                //      = 0x3e4ccccd 
                //   float gOcclusionFadeEnd;           // Offset:  360 Size:     4
                //      = 0x40000000 
                //   float gSurfaceEpsilon;             // Offset:  364 Size:     4
                //      = 0x3d4ccccd 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samNormalDepth16Bit               sampler      NA          NA    0        1
                // samRandomVec                      sampler      NA          NA    1        1
                // gNormalDepthMap                   texture  float4          2d    0        1
                // gRandomVecMap                     texture  float4          2d    1        1
                // cbPerFrameSSAO                    cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 7
                
                #line 87 "SSAO-RayCastingTech.fx"
                sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0, l(0.000000)  // normalDepth<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r0.xyz, r0.xyzx  // n<0:Inf,1:Inf,2:Inf>
                mov r0.w, r0.w  // pz<0:Inf>
                
                #line 98
                div r0.w, r0.w, v1.z
                mul r1.xyz, r0.wwww, v1.xyzx  // p<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 101
                mul r2.xy, v2.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t1.xyzw, s1, l(0.000000)
                mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // randVec<0:Inf,1:Inf,2:Inf>
                
                #line 112
                dp3 r0.w, cb0[4].xyzx, r2.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r3.xyz, r0.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[4].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 115
                dp3 r0.w, r3.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                lt r0.w, r0.w, l(0.000000)
                iadd r0.w, r0.w, -r1.w
                itof r0.w, r0.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 118
                mul r0.w, r0.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r0.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mov r3.w, l(1.000000)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r0.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r5.xyxx, r0.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 128
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r0.w, r0.w  // rz<0:Inf>
                
                #line 134
                div r0.w, r0.w, r4.z
                mul r3.xyz, r4.xyzx, r0.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 148
                mov r0.w, -r3.z
                add r0.w, r0.w, r1.z  // distZ<0:NaN:Inf>
                mov r4.xyz, -r1.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx
                dp3 r1.w, r0.xyzx, r3.xyzx
                max r1.w, r1.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r0.w, r0.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r2.w, cb0[22].w, r0.w
                if_nz r2.w
                  mov r2.w, -cb0[22].y
                  add r2.w, r2.w, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r0.w, -r0.w
                  add r0.w, r0.w, cb0[22].z
                  div r0.w, r0.w, r2.w
                  max r0.w, r0.w, l(0.000000)
                  min r0.w, r0.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r0.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r0.w, r0.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 150
                mul r0.w, r0.w, r1.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, l(0.000000)  // occlusionSum<0:NaN:Inf>
                
                #line 112
                dp3 r1.w, cb0[5].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[5].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 115
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 118
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 128
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 134
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 148
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 150
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 112
                dp3 r1.w, cb0[6].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[6].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 115
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 118
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 128
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 134
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 148
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 150
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 112
                dp3 r1.w, cb0[7].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[7].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 115
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 118
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 128
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 134
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 148
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 150
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 112
                dp3 r1.w, cb0[8].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[8].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 115
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 118
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 128
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 134
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 148
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 150
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 112
                dp3 r1.w, cb0[9].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[9].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 115
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 118
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 128
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 134
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 148
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 150
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 112
                dp3 r1.w, cb0[10].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[10].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 115
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 118
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 128
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 134
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 148
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 150
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 112
                dp3 r1.w, cb0[11].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[11].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 115
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 118
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 128
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 134
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 148
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 150
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 112
                dp3 r1.w, cb0[12].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 115
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 118
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 128
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 134
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 148
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 150
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 112
                dp3 r1.w, cb0[13].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[13].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 115
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 118
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 128
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 134
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 148
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 150
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 112
                dp3 r1.w, cb0[14].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[14].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 115
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 118
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 128
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 134
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 148
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 150
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 112
                dp3 r1.w, cb0[15].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[15].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 115
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 118
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 128
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 134
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 148
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 150
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 112
                dp3 r1.w, cb0[16].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[16].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 115
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 118
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 128
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 134
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 148
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 150
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 112
                dp3 r1.w, cb0[17].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r2.xyz, r1.wwww, r2.xyzx
                add r2.xyz, r2.xyzx, cb0[17].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 115
                dp3 r1.w, r2.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 118
                mul r1.w, r1.w, cb0[22].x
                mul r2.xyz, r2.xyzx, r1.wwww
                add r2.xyz, r1.xyzx, r2.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyw, r2.xyxz  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                mov r2.w, l(1.000000)
                dp4 r3.x, r2.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r3.y, r2.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r2.x, r2.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r2.xy, r3.xyxx, r2.xxxx  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 128
                sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t0.wxyz, s0, l(0.000000)
                mov r2.x, r2.x  // rz<0:Inf>
                
                #line 134
                div r2.x, r2.x, r1.w
                mul r1.xyw, r1.xyxw, r2.xxxx  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 148
                mov r2.x, -r1.w
                add r1.z, r1.z, r2.x  // distZ<0:NaN:Inf>
                add r1.xyw, r4.xyxz, r1.xyxw
                dp3 r2.x, r1.xywx, r1.xywx
                rsq r2.x, r2.x
                mul r1.xyw, r1.xyxw, r2.xxxx
                dp3 r0.x, r0.xyzx, r1.xywx
                max r0.x, r0.x, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.z, r1.z  // distZ<0:NaN:Inf>
                
                #line 66
                lt r0.y, cb0[22].w, r1.z
                if_nz r0.y
                  mov r0.y, -cb0[22].y
                  add r0.y, r0.y, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r0.z, -r1.z
                  add r0.z, r0.z, cb0[22].z
                  div r0.y, r0.z, r0.y
                  max r0.y, r0.y, l(0.000000)
                  min r0.y, r0.y, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r0.y, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r0.y, r0.y  // OcclusionFunction<0:[-0f,1f]>
                
                #line 150
                mul r0.x, r0.y, r0.x  // occlusion<0:NaN:Inf>
                add r0.x, r0.x, r0.w  // occlusionSum<0:NaN:Inf>
                
                #line 155
                div r0.x, r0.x, l(14.000000)  // occlusionSum<0:NaN:Inf>
                mov r0.x, -r0.x
                add r0.x, r0.x, l(1.000000)  // access<0:NaN:Inf>
                
                #line 160
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, l(1.000000)
                max r0.x, r0.x, l(0.000000)
                min o0.xyzw, r0.xxxx, l(1.000000, 1.000000, 1.000000, 1.000000)  // PSRayCasting16BitTech<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>
                ret 
                // Approximately 691 instruction slots used
                            
            };
        }

    }

    technique11 Ssao8BitTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrameSSAO
                // {
                //
                //   float4x4 gViewToTexSpace;          // Offset:    0 Size:    64 [unused]
                //   float4 gOffsetVectors[14];         // Offset:   64 Size:   224 [unused]
                //   float4 gFrustumCorners[4];         // Offset:  288 Size:    64
                //   float gOcclusionRadius;            // Offset:  352 Size:     4 [unused]
                //      = 0x3dcccccd 
                //   float gOcclusionFadeStart;         // Offset:  356 Size:     4 [unused]
                //      = 0x3e4ccccd 
                //   float gOcclusionFadeEnd;           // Offset:  360 Size:     4 [unused]
                //      = 0x40000000 
                //   float gSurfaceEpsilon;             // Offset:  364 Size:     4 [unused]
                //      = 0x3d4ccccd 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrameSSAO                    cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   x   
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[22], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.x
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_temps 3
                
                #line 31 "SSAO-RayCastingTech.fx"
                mov r0.xyz, v0.xyzx  // vout<0,1,2>
                mov r0.w, l(1.000000)  // vout<3: 1f>
                
                #line 34
                ftou r1.x, v1.x
                mov r1.xyz, cb0[r1.x + 18].xyzx  // vout<4,5,6>
                
                #line 37
                mov r2.xy, v2.xyxx  // vout<7,8>
                mov o0.xyzw, r0.xyzw  // VSRayCastingTech<0,1,2,3: 1f>
                mov o1.xyz, r1.xyzx  // VSRayCastingTech<4,5,6>
                mov o2.xy, r2.xyxx  // VSRayCastingTech<7,8>
                ret 
                // Approximately 9 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrameSSAO
                // {
                //
                //   float4x4 gViewToTexSpace;          // Offset:    0 Size:    64
                //   float4 gOffsetVectors[14];         // Offset:   64 Size:   224
                //   float4 gFrustumCorners[4];         // Offset:  288 Size:    64 [unused]
                //   float gOcclusionRadius;            // Offset:  352 Size:     4
                //      = 0x3dcccccd 
                //   float gOcclusionFadeStart;         // Offset:  356 Size:     4
                //      = 0x3e4ccccd 
                //   float gOcclusionFadeEnd;           // Offset:  360 Size:     4
                //      = 0x40000000 
                //   float gSurfaceEpsilon;             // Offset:  364 Size:     4
                //      = 0x3d4ccccd 
                //
                // }
                //
                // cbuffer cbPerFrameCamPropSSAO
                // {
                //
                //   float gZNear;                      // Offset:    0 Size:     4
                //   float gZFar;                       // Offset:    4 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samNormalDepth8Bit                sampler      NA          NA    0        1
                // samRandomVec                      sampler      NA          NA    1        1
                // gNormalDepthMap                   texture  float4          2d    0        1
                // gRandomVecMap                     texture  float4          2d    1        1
                // cbPerFrameSSAO                    cbuffer      NA          NA    0        1
                // cbPerFrameCamPropSSAO             cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[23], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 7
                
                #line 175 "SSAO-RayCastingTech.fx"
                nop 
                sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0, l(0.000000)  // input<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 96 "SSAO-Utilities.fx"
                mul r0.x, r0.x, l(2.000000)
                add r1.x, r0.x, l(-1.000000)  // normal<0:Inf>
                mul r0.x, r0.y, l(2.000000)
                add r1.y, r0.x, l(-1.000000)  // normal<1:Inf>
                
                #line 100
                mul r0.x, r1.x, r1.x
                mov r0.x, -r0.x
                add r0.x, r0.x, l(1.000000)
                mul r0.y, r1.y, r1.y
                mov r0.y, -r0.y
                add r0.x, r0.y, r0.x
                mov r0.y, -r0.x
                max r0.x, r0.y, r0.x
                sqrt r0.x, r0.x
                mov r1.z, -r0.x  // normal<2:NaN:Inf>
                
                #line 106
                div r0.x, r0.w, l(255.000000)
                add r0.x, r0.x, r0.z  // depth<0:NaN:Inf>
                
                #line 109
                mov r0.y, -cb1[0].x
                add r0.y, r0.y, cb1[0].y
                mul r0.x, r0.y, r0.x
                add r0.x, r0.x, cb1[0].x  // depth<0:NaN:Inf>
                
                #line 175 "SSAO-RayCastingTech.fx"
                mov r1.x, r1.x  // n<0:Inf>
                mov r1.y, r1.y  // n<1:Inf>
                mov r1.z, r1.z  // n<2:NaN:Inf>
                mov r0.x, r0.x  // pz<0:NaN:Inf>
                
                #line 183
                div r0.x, r0.x, v1.z
                mul r0.xzw, r0.xxxx, v1.xxyz  // p<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 186
                mul r2.xy, v2.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t1.xyzw, s1, l(0.000000)
                mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // randVec<0:Inf,1:Inf,2:Inf>
                
                #line 197
                dp3 r1.w, cb0[4].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[4].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 200
                dp3 r1.w, r3.xyzx, r1.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 203
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r0.xzwx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r3.w, l(1.000000)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r5.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 213
                sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t0.zwxy, s0, l(0.000000)
                mov r3.xy, r3.xyxx  // normalDepthRZ<2:Inf,3:Inf>
                nop 
                mov r3.xy, r3.xyxx  // input<2:Inf,3:Inf>
                
                #line 119 "SSAO-Utilities.fx"
                div r1.w, r3.y, l(255.000000)
                add r1.w, r1.w, r3.x  // depth<0:NaN:Inf>
                
                #line 122
                mul r1.w, r0.y, r1.w
                add r1.w, r1.w, cb1[0].x  // depth<0:NaN:Inf>
                
                #line 215 "SSAO-RayCastingTech.fx"
                mov r1.w, r1.w  // rz<0:NaN:Inf>
                
                #line 221
                div r1.w, r1.w, r4.z
                mul r3.xyz, r4.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                mov r1.w, -r3.z
                add r1.w, r0.w, r1.w  // distZ<0:NaN:Inf>
                mov r4.xyz, -r0.xzwx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r1.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 237
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r1.w, r1.w, l(0.000000)  // occlusionSum<0:NaN:Inf>
                
                #line 197
                dp3 r2.w, cb0[5].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[5].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 200
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                iadd r2.w, r2.w, -r3.w
                itof r2.w, r2.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 203
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.xzwx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r2.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 213
                sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t0.zwxy, s0, l(0.000000)
                mov r3.xy, r3.xyxx  // normalDepthRZ<2:Inf,3:Inf>
                nop 
                mov r3.xy, r3.xyxx  // input<2:Inf,3:Inf>
                
                #line 119 "SSAO-Utilities.fx"
                div r2.w, r3.y, l(255.000000)
                add r2.w, r2.w, r3.x  // depth<0:NaN:Inf>
                
                #line 122
                mul r2.w, r0.y, r2.w
                add r2.w, r2.w, cb1[0].x  // depth<0:NaN:Inf>
                
                #line 215 "SSAO-RayCastingTech.fx"
                mov r2.w, r2.w  // rz<0:NaN:Inf>
                
                #line 221
                div r2.w, r2.w, r5.z
                mul r3.xyz, r5.xyzx, r2.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r2.w, r2.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.y, cb0[22].w, r2.w
                if_nz r3.y
                  mov r3.y, -cb0[22].y
                  add r3.y, r3.y, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.y
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r2.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r2.w, r2.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 237
                mul r2.w, r2.w, r3.x  // occlusion<0:NaN:Inf>
                add r1.w, r1.w, r2.w  // occlusionSum<0:NaN:Inf>
                
                #line 197
                dp3 r2.w, cb0[6].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[6].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 200
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                iadd r2.w, r2.w, -r3.w
                itof r2.w, r2.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 203
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.xzwx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r2.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 213
                sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t0.zwxy, s0, l(0.000000)
                mov r3.xy, r3.xyxx  // normalDepthRZ<2:Inf,3:Inf>
                nop 
                mov r3.xy, r3.xyxx  // input<2:Inf,3:Inf>
                
                #line 119 "SSAO-Utilities.fx"
                div r2.w, r3.y, l(255.000000)
                add r2.w, r2.w, r3.x  // depth<0:NaN:Inf>
                
                #line 122
                mul r2.w, r0.y, r2.w
                add r2.w, r2.w, cb1[0].x  // depth<0:NaN:Inf>
                
                #line 215 "SSAO-RayCastingTech.fx"
                mov r2.w, r2.w  // rz<0:NaN:Inf>
                
                #line 221
                div r2.w, r2.w, r5.z
                mul r3.xyz, r5.xyzx, r2.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r2.w, r2.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.y, cb0[22].w, r2.w
                if_nz r3.y
                  mov r3.y, -cb0[22].y
                  add r3.y, r3.y, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.y
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r2.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r2.w, r2.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 237
                mul r2.w, r2.w, r3.x  // occlusion<0:NaN:Inf>
                add r1.w, r1.w, r2.w  // occlusionSum<0:NaN:Inf>
                
                #line 197
                dp3 r2.w, cb0[7].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[7].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 200
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                iadd r2.w, r2.w, -r3.w
                itof r2.w, r2.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 203
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.xzwx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r2.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 213
                sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t0.zwxy, s0, l(0.000000)
                mov r3.xy, r3.xyxx  // normalDepthRZ<2:Inf,3:Inf>
                nop 
                mov r3.xy, r3.xyxx  // input<2:Inf,3:Inf>
                
                #line 119 "SSAO-Utilities.fx"
                div r2.w, r3.y, l(255.000000)
                add r2.w, r2.w, r3.x  // depth<0:NaN:Inf>
                
                #line 122
                mul r2.w, r0.y, r2.w
                add r2.w, r2.w, cb1[0].x  // depth<0:NaN:Inf>
                
                #line 215 "SSAO-RayCastingTech.fx"
                mov r2.w, r2.w  // rz<0:NaN:Inf>
                
                #line 221
                div r2.w, r2.w, r5.z
                mul r3.xyz, r5.xyzx, r2.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r2.w, r2.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.y, cb0[22].w, r2.w
                if_nz r3.y
                  mov r3.y, -cb0[22].y
                  add r3.y, r3.y, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.y
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r2.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r2.w, r2.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 237
                mul r2.w, r2.w, r3.x  // occlusion<0:NaN:Inf>
                add r1.w, r1.w, r2.w  // occlusionSum<0:NaN:Inf>
                
                #line 197
                dp3 r2.w, cb0[8].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[8].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 200
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                iadd r2.w, r2.w, -r3.w
                itof r2.w, r2.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 203
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.xzwx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r2.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 213
                sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t0.zwxy, s0, l(0.000000)
                mov r3.xy, r3.xyxx  // normalDepthRZ<2:Inf,3:Inf>
                nop 
                mov r3.xy, r3.xyxx  // input<2:Inf,3:Inf>
                
                #line 119 "SSAO-Utilities.fx"
                div r2.w, r3.y, l(255.000000)
                add r2.w, r2.w, r3.x  // depth<0:NaN:Inf>
                
                #line 122
                mul r2.w, r0.y, r2.w
                add r2.w, r2.w, cb1[0].x  // depth<0:NaN:Inf>
                
                #line 215 "SSAO-RayCastingTech.fx"
                mov r2.w, r2.w  // rz<0:NaN:Inf>
                
                #line 221
                div r2.w, r2.w, r5.z
                mul r3.xyz, r5.xyzx, r2.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r2.w, r2.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.y, cb0[22].w, r2.w
                if_nz r3.y
                  mov r3.y, -cb0[22].y
                  add r3.y, r3.y, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.y
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r2.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r2.w, r2.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 237
                mul r2.w, r2.w, r3.x  // occlusion<0:NaN:Inf>
                add r1.w, r1.w, r2.w  // occlusionSum<0:NaN:Inf>
                
                #line 197
                dp3 r2.w, cb0[9].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[9].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 200
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                iadd r2.w, r2.w, -r3.w
                itof r2.w, r2.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 203
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.xzwx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r2.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 213
                sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t0.zwxy, s0, l(0.000000)
                mov r3.xy, r3.xyxx  // normalDepthRZ<2:Inf,3:Inf>
                nop 
                mov r3.xy, r3.xyxx  // input<2:Inf,3:Inf>
                
                #line 119 "SSAO-Utilities.fx"
                div r2.w, r3.y, l(255.000000)
                add r2.w, r2.w, r3.x  // depth<0:NaN:Inf>
                
                #line 122
                mul r2.w, r0.y, r2.w
                add r2.w, r2.w, cb1[0].x  // depth<0:NaN:Inf>
                
                #line 215 "SSAO-RayCastingTech.fx"
                mov r2.w, r2.w  // rz<0:NaN:Inf>
                
                #line 221
                div r2.w, r2.w, r5.z
                mul r3.xyz, r5.xyzx, r2.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r2.w, r2.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.y, cb0[22].w, r2.w
                if_nz r3.y
                  mov r3.y, -cb0[22].y
                  add r3.y, r3.y, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.y
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r2.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r2.w, r2.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 237
                mul r2.w, r2.w, r3.x  // occlusion<0:NaN:Inf>
                add r1.w, r1.w, r2.w  // occlusionSum<0:NaN:Inf>
                
                #line 197
                dp3 r2.w, cb0[10].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[10].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 200
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                iadd r2.w, r2.w, -r3.w
                itof r2.w, r2.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 203
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.xzwx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r2.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 213
                sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t0.zwxy, s0, l(0.000000)
                mov r3.xy, r3.xyxx  // normalDepthRZ<2:Inf,3:Inf>
                nop 
                mov r3.xy, r3.xyxx  // input<2:Inf,3:Inf>
                
                #line 119 "SSAO-Utilities.fx"
                div r2.w, r3.y, l(255.000000)
                add r2.w, r2.w, r3.x  // depth<0:NaN:Inf>
                
                #line 122
                mul r2.w, r0.y, r2.w
                add r2.w, r2.w, cb1[0].x  // depth<0:NaN:Inf>
                
                #line 215 "SSAO-RayCastingTech.fx"
                mov r2.w, r2.w  // rz<0:NaN:Inf>
                
                #line 221
                div r2.w, r2.w, r5.z
                mul r3.xyz, r5.xyzx, r2.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r2.w, r2.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.y, cb0[22].w, r2.w
                if_nz r3.y
                  mov r3.y, -cb0[22].y
                  add r3.y, r3.y, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.y
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r2.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r2.w, r2.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 237
                mul r2.w, r2.w, r3.x  // occlusion<0:NaN:Inf>
                add r1.w, r1.w, r2.w  // occlusionSum<0:NaN:Inf>
                
                #line 197
                dp3 r2.w, cb0[11].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[11].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 200
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                iadd r2.w, r2.w, -r3.w
                itof r2.w, r2.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 203
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.xzwx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r2.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 213
                sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t0.zwxy, s0, l(0.000000)
                mov r3.xy, r3.xyxx  // normalDepthRZ<2:Inf,3:Inf>
                nop 
                mov r3.xy, r3.xyxx  // input<2:Inf,3:Inf>
                
                #line 119 "SSAO-Utilities.fx"
                div r2.w, r3.y, l(255.000000)
                add r2.w, r2.w, r3.x  // depth<0:NaN:Inf>
                
                #line 122
                mul r2.w, r0.y, r2.w
                add r2.w, r2.w, cb1[0].x  // depth<0:NaN:Inf>
                
                #line 215 "SSAO-RayCastingTech.fx"
                mov r2.w, r2.w  // rz<0:NaN:Inf>
                
                #line 221
                div r2.w, r2.w, r5.z
                mul r3.xyz, r5.xyzx, r2.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r2.w, r2.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.y, cb0[22].w, r2.w
                if_nz r3.y
                  mov r3.y, -cb0[22].y
                  add r3.y, r3.y, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.y
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r2.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r2.w, r2.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 237
                mul r2.w, r2.w, r3.x  // occlusion<0:NaN:Inf>
                add r1.w, r1.w, r2.w  // occlusionSum<0:NaN:Inf>
                
                #line 197
                dp3 r2.w, cb0[12].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 200
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                iadd r2.w, r2.w, -r3.w
                itof r2.w, r2.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 203
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.xzwx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r2.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 213
                sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t0.zwxy, s0, l(0.000000)
                mov r3.xy, r3.xyxx  // normalDepthRZ<2:Inf,3:Inf>
                nop 
                mov r3.xy, r3.xyxx  // input<2:Inf,3:Inf>
                
                #line 119 "SSAO-Utilities.fx"
                div r2.w, r3.y, l(255.000000)
                add r2.w, r2.w, r3.x  // depth<0:NaN:Inf>
                
                #line 122
                mul r2.w, r0.y, r2.w
                add r2.w, r2.w, cb1[0].x  // depth<0:NaN:Inf>
                
                #line 215 "SSAO-RayCastingTech.fx"
                mov r2.w, r2.w  // rz<0:NaN:Inf>
                
                #line 221
                div r2.w, r2.w, r5.z
                mul r3.xyz, r5.xyzx, r2.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r2.w, r2.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.y, cb0[22].w, r2.w
                if_nz r3.y
                  mov r3.y, -cb0[22].y
                  add r3.y, r3.y, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.y
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r2.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r2.w, r2.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 237
                mul r2.w, r2.w, r3.x  // occlusion<0:NaN:Inf>
                add r1.w, r1.w, r2.w  // occlusionSum<0:NaN:Inf>
                
                #line 197
                dp3 r2.w, cb0[13].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[13].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 200
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                iadd r2.w, r2.w, -r3.w
                itof r2.w, r2.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 203
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.xzwx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r2.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 213
                sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t0.zwxy, s0, l(0.000000)
                mov r3.xy, r3.xyxx  // normalDepthRZ<2:Inf,3:Inf>
                nop 
                mov r3.xy, r3.xyxx  // input<2:Inf,3:Inf>
                
                #line 119 "SSAO-Utilities.fx"
                div r2.w, r3.y, l(255.000000)
                add r2.w, r2.w, r3.x  // depth<0:NaN:Inf>
                
                #line 122
                mul r2.w, r0.y, r2.w
                add r2.w, r2.w, cb1[0].x  // depth<0:NaN:Inf>
                
                #line 215 "SSAO-RayCastingTech.fx"
                mov r2.w, r2.w  // rz<0:NaN:Inf>
                
                #line 221
                div r2.w, r2.w, r5.z
                mul r3.xyz, r5.xyzx, r2.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r2.w, r2.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.y, cb0[22].w, r2.w
                if_nz r3.y
                  mov r3.y, -cb0[22].y
                  add r3.y, r3.y, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.y
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r2.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r2.w, r2.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 237
                mul r2.w, r2.w, r3.x  // occlusion<0:NaN:Inf>
                add r1.w, r1.w, r2.w  // occlusionSum<0:NaN:Inf>
                
                #line 197
                dp3 r2.w, cb0[14].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[14].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 200
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                iadd r2.w, r2.w, -r3.w
                itof r2.w, r2.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 203
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.xzwx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r2.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 213
                sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t0.zwxy, s0, l(0.000000)
                mov r3.xy, r3.xyxx  // normalDepthRZ<2:Inf,3:Inf>
                nop 
                mov r3.xy, r3.xyxx  // input<2:Inf,3:Inf>
                
                #line 119 "SSAO-Utilities.fx"
                div r2.w, r3.y, l(255.000000)
                add r2.w, r2.w, r3.x  // depth<0:NaN:Inf>
                
                #line 122
                mul r2.w, r0.y, r2.w
                add r2.w, r2.w, cb1[0].x  // depth<0:NaN:Inf>
                
                #line 215 "SSAO-RayCastingTech.fx"
                mov r2.w, r2.w  // rz<0:NaN:Inf>
                
                #line 221
                div r2.w, r2.w, r5.z
                mul r3.xyz, r5.xyzx, r2.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r2.w, r2.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.y, cb0[22].w, r2.w
                if_nz r3.y
                  mov r3.y, -cb0[22].y
                  add r3.y, r3.y, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.y
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r2.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r2.w, r2.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 237
                mul r2.w, r2.w, r3.x  // occlusion<0:NaN:Inf>
                add r1.w, r1.w, r2.w  // occlusionSum<0:NaN:Inf>
                
                #line 197
                dp3 r2.w, cb0[15].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[15].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 200
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                iadd r2.w, r2.w, -r3.w
                itof r2.w, r2.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 203
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.xzwx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r2.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 213
                sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t0.zwxy, s0, l(0.000000)
                mov r3.xy, r3.xyxx  // normalDepthRZ<2:Inf,3:Inf>
                nop 
                mov r3.xy, r3.xyxx  // input<2:Inf,3:Inf>
                
                #line 119 "SSAO-Utilities.fx"
                div r2.w, r3.y, l(255.000000)
                add r2.w, r2.w, r3.x  // depth<0:NaN:Inf>
                
                #line 122
                mul r2.w, r0.y, r2.w
                add r2.w, r2.w, cb1[0].x  // depth<0:NaN:Inf>
                
                #line 215 "SSAO-RayCastingTech.fx"
                mov r2.w, r2.w  // rz<0:NaN:Inf>
                
                #line 221
                div r2.w, r2.w, r5.z
                mul r3.xyz, r5.xyzx, r2.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r2.w, r2.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.y, cb0[22].w, r2.w
                if_nz r3.y
                  mov r3.y, -cb0[22].y
                  add r3.y, r3.y, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.y
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r2.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r2.w, r2.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 237
                mul r2.w, r2.w, r3.x  // occlusion<0:NaN:Inf>
                add r1.w, r1.w, r2.w  // occlusionSum<0:NaN:Inf>
                
                #line 197
                dp3 r2.w, cb0[16].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[16].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 200
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                iadd r2.w, r2.w, -r3.w
                itof r2.w, r2.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 203
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.xzwx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r2.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 213
                sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t0.zwxy, s0, l(0.000000)
                mov r3.xy, r3.xyxx  // normalDepthRZ<2:Inf,3:Inf>
                nop 
                mov r3.xy, r3.xyxx  // input<2:Inf,3:Inf>
                
                #line 119 "SSAO-Utilities.fx"
                div r2.w, r3.y, l(255.000000)
                add r2.w, r2.w, r3.x  // depth<0:NaN:Inf>
                
                #line 122
                mul r2.w, r0.y, r2.w
                add r2.w, r2.w, cb1[0].x  // depth<0:NaN:Inf>
                
                #line 215 "SSAO-RayCastingTech.fx"
                mov r2.w, r2.w  // rz<0:NaN:Inf>
                
                #line 221
                div r2.w, r2.w, r5.z
                mul r3.xyz, r5.xyzx, r2.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r2.w, r2.w  // distZ<0:NaN:Inf>
                
                #line 66
                lt r3.y, cb0[22].w, r2.w
                if_nz r3.y
                  mov r3.y, -cb0[22].y
                  add r3.y, r3.y, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.y
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r2.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r2.w, r2.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 237
                mul r2.w, r2.w, r3.x  // occlusion<0:NaN:Inf>
                add r1.w, r1.w, r2.w  // occlusionSum<0:NaN:Inf>
                
                #line 197
                dp3 r2.w, cb0[17].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r2.xyz, r2.wwww, r2.xyzx
                add r2.xyz, r2.xyzx, cb0[17].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 200
                dp3 r2.w, r2.xyzx, r1.xyzx
                lt r3.x, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                iadd r2.w, r2.w, -r3.x
                itof r2.w, r2.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 203
                mul r2.w, r2.w, cb0[22].x
                mul r2.xyz, r2.xyzx, r2.wwww
                add r2.xyz, r0.xzwx, r2.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, r2.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r2.w, l(1.000000)
                dp4 r5.x, r2.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r5.y, r2.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r0.x, r2.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r0.xz, r5.xxyx, r0.xxxx  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 213
                sample_l_indexable(texture2d)(float,float,float,float) r0.xz, r0.xzxx, t0.zxwy, s0, l(0.000000)
                mov r0.xz, r0.xxzx  // normalDepthRZ<2:Inf,3:Inf>
                nop 
                mov r0.xz, r0.xxzx  // input<2:Inf,3:Inf>
                
                #line 119 "SSAO-Utilities.fx"
                div r0.z, r0.z, l(255.000000)
                add r0.x, r0.z, r0.x  // depth<0:NaN:Inf>
                
                #line 122
                mul r0.x, r0.y, r0.x
                add r0.x, r0.x, cb1[0].x  // depth<0:NaN:Inf>
                
                #line 215 "SSAO-RayCastingTech.fx"
                mov r0.x, r0.x  // rz<0:NaN:Inf>
                
                #line 221
                div r0.x, r0.x, r3.z
                mul r0.xyz, r3.xyzx, r0.xxxx  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 235
                mov r2.x, -r0.z
                add r2.x, r0.w, r2.x  // distZ<0:NaN:Inf>
                add r0.xyz, r4.xyzx, r0.xyzx
                dp3 r2.y, r0.xyzx, r0.xyzx
                rsq r2.y, r2.y
                mul r0.xyz, r0.xyzx, r2.yyyy
                dp3 r0.x, r1.xyzx, r0.xyzx
                max r0.x, r0.x, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r2.x, r2.x  // distZ<0:NaN:Inf>
                
                #line 66
                lt r0.y, cb0[22].w, r2.x
                if_nz r0.y
                  mov r0.y, -cb0[22].y
                  add r0.y, r0.y, cb0[22].z  // fadeLength<0:Inf>
                
                #line 72
                  mov r0.z, -r2.x
                  add r0.z, r0.z, cb0[22].z
                  div r0.y, r0.z, r0.y
                  max r0.y, r0.y, l(0.000000)
                  min r0.y, r0.y, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 66
                else 
                  mov r0.y, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 75
                mov r0.y, r0.y  // OcclusionFunction<0:[-0f,1f]>
                
                #line 237
                mul r0.x, r0.y, r0.x  // occlusion<0:NaN:Inf>
                add r0.x, r0.x, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 242
                div r0.x, r0.x, l(14.000000)  // occlusionSum<0:NaN:Inf>
                mov r0.x, -r0.x
                add r0.x, r0.x, l(1.000000)  // access<0:NaN:Inf>
                mul r0.x, r0.x, l(1.000000)
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // access<0:[0f,1f]>
                
                #line 248
                add r0.y, cb1[0].y, cb1[0].x
                div r0.y, r0.y, l(2.000000)  // fadeStart<0>
                mov r0.y, -r0.y
                add r0.y, r0.y, cb1[0].y  // fadeLength<0:Inf>
                mov r0.z, -r0.w
                add r0.z, r0.z, cb1[0].y
                div r0.y, r0.z, r0.y
                max r0.y, r0.y, l(0.000000)
                min r0.y, r0.y, l(1.000000)  // depthScaled<0:[0f,1f]>
                add r0.x, r0.x, l(-1.000000)
                mul r0.x, r0.x, r0.y
                add r0.xyzw, r0.xxxx, l(1.000000, 1.000000, 1.000000, 1.000000)  // access<0:[0f,1f],0:[0f,1f],0:[0f,1f],0:[0f,1f]>
                mov o0.xyzw, r0.xyzw  // PSRayCasting8BitTech<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>
                ret 
                // Approximately 823 instruction slots used
                            
            };
        }

    }

    technique11 HorzBlur16Bit
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float       
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                
                #line 35 "SSAO-BlurTech.fx"
                mov r0.xyz, v0.xyzx  // vout<0,1,2>
                mov r0.w, l(1.000000)  // vout<3: 1f>
                
                #line 38
                mov r1.xy, v2.xyxx  // vout<4,5>
                mov o0.xyzw, r0.xyzw  // VSBlurTech<0,1,2,3: 1f>
                mov o1.xy, r1.xyxx  // VSBlurTech<4,5>
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrameBlurSSAO
                // {
                //
                //   float gTexelWidth;                 // Offset:    0 Size:     4
                //   float gTexelHeight;                // Offset:    4 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSettingsSSAO
                // {
                //
                //   float gWeights[11];                // Offset:    0 Size:   164
                //      = 0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3e4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samNormalDepthBlur                sampler      NA          NA    0        1
                // samInputImage                     sampler      NA          NA    1        1
                // gNormalDepthMap                   texture  float4          2d    0        1
                // gInputImage                       texture  float4          2d    1        1
                // cbPerFrameBlurSSAO                cbuffer      NA          NA    0        1
                // cbSettingsSSAO                    cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_constantbuffer cb1[11], dynamicIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 7
                
                #line 48 "SSAO-BlurTech.fx"
                mov r0.x, cb0[0].x  // texOffset<0>
                mov r0.y, l(0)  // texOffset<1: 0f>
                
                #line 56
                sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t1.xyzw, s1, l(0.000000)
                mul r1.xyzw, r1.xyzw, cb1[5].xxxx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r0.z, cb1[5].x  // totalWeight<0>
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)  // centerNormalDepth<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r0.w, l(-5.000000)  // i<0:[-5f,-5f]>
                mov r3.xyzw, r1.xyzw  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r4.x, r0.z  // totalWeight<0:Inf>
                mov r4.y, r0.w  // i<0:Inf>
                loop 
                  ge r4.z, l(5.000000), r4.y
                  breakc_z r4.z
                
                #line 64
                  eq r4.z, r4.y, l(0.000000)
                  if_nz r4.z
                    mov r4.y, l(1.000000)  // i<0: 1f>
                    continue 
                  endif 
                
                #line 68
                  mul r4.zw, r0.xxxy, r4.yyyy
                  add r4.zw, r4.zzzw, v1.xxxy  // tex<0:NaN:Inf,1:NaN>
                  sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r4.zwzz, t0.xyzw, s0, l(0.000000)  // neighborNormalDepth<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 78
                  dp3 r5.x, r5.xyzx, r2.xyzx
                  ge r5.x, r5.x, l(0.800000)
                  mov r5.y, -r2.w
                  add r5.y, r5.y, r5.w
                  mov r5.z, -r5.y
                  max r5.y, r5.z, r5.y
                  ge r5.y, l(0.200000), r5.y
                  and r5.x, r5.y, r5.x
                  mov r5.y, -r4.y
                  max r5.y, r4.y, r5.y
                  ge r5.y, l(1.000000), r5.y
                  or r5.x, r5.y, r5.x
                  if_nz r5.x
                
                #line 81
                    add r5.x, r4.y, l(5.000000)
                    ftou r5.x, r5.x
                    mov r5.x, cb1[r5.x + 0].x  // weight<0>
                
                #line 84
                    sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r4.zwzz, t1.xyzw, s1, l(0.000000)
                    mul r6.xyzw, r5.xxxx, r6.xyzw
                    add r3.xyzw, r3.xyzw, r6.xyzw  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r4.x, r4.x, r5.x  // totalWeight<0:Inf>
                
                #line 78
                  endif 
                
                #line 61
                  add r4.y, r4.y, l(1.000000)  // i<0:Inf>
                endloop 
                
                #line 91
                div o0.xyzw, r3.xyzw, r4.xxxx  // PSBlur16BitTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 46 instruction slots used
                            
            };
        }

    }

    technique11 VertBlur16Bit
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float       
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                
                #line 35 "SSAO-BlurTech.fx"
                mov r0.xyz, v0.xyzx  // vout<0,1,2>
                mov r0.w, l(1.000000)  // vout<3: 1f>
                
                #line 38
                mov r1.xy, v2.xyxx  // vout<4,5>
                mov o0.xyzw, r0.xyzw  // VSBlurTech<0,1,2,3: 1f>
                mov o1.xy, r1.xyxx  // VSBlurTech<4,5>
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrameBlurSSAO
                // {
                //
                //   float gTexelWidth;                 // Offset:    0 Size:     4 [unused]
                //   float gTexelHeight;                // Offset:    4 Size:     4
                //
                // }
                //
                // cbuffer cbSettingsSSAO
                // {
                //
                //   float gWeights[11];                // Offset:    0 Size:   164
                //      = 0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3e4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samNormalDepthBlur                sampler      NA          NA    0        1
                // samInputImage                     sampler      NA          NA    1        1
                // gNormalDepthMap                   texture  float4          2d    0        1
                // gInputImage                       texture  float4          2d    1        1
                // cbPerFrameBlurSSAO                cbuffer      NA          NA    0        1
                // cbSettingsSSAO                    cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_constantbuffer cb1[11], dynamicIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 7
                
                #line 52 "SSAO-BlurTech.fx"
                mov r0.x, l(0)  // texOffset<0: 0f>
                mov r0.y, cb0[0].y  // texOffset<1>
                
                #line 56
                sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t1.xyzw, s1, l(0.000000)
                mul r1.xyzw, r1.xyzw, cb1[5].xxxx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r0.z, cb1[5].x  // totalWeight<0>
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)  // centerNormalDepth<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r0.w, l(-5.000000)  // i<0:[-5f,-5f]>
                mov r3.xyzw, r1.xyzw  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r4.x, r0.z  // totalWeight<0:Inf>
                mov r4.y, r0.w  // i<0:Inf>
                loop 
                  ge r4.z, l(5.000000), r4.y
                  breakc_z r4.z
                
                #line 64
                  eq r4.z, r4.y, l(0.000000)
                  if_nz r4.z
                    mov r4.y, l(1.000000)  // i<0: 1f>
                    continue 
                  endif 
                
                #line 68
                  mul r4.zw, r0.xxxy, r4.yyyy
                  add r4.zw, r4.zzzw, v1.xxxy  // tex<0:NaN,1:NaN:Inf>
                  sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r4.zwzz, t0.xyzw, s0, l(0.000000)  // neighborNormalDepth<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 78
                  dp3 r5.x, r5.xyzx, r2.xyzx
                  ge r5.x, r5.x, l(0.800000)
                  mov r5.y, -r2.w
                  add r5.y, r5.y, r5.w
                  mov r5.z, -r5.y
                  max r5.y, r5.z, r5.y
                  ge r5.y, l(0.200000), r5.y
                  and r5.x, r5.y, r5.x
                  mov r5.y, -r4.y
                  max r5.y, r4.y, r5.y
                  ge r5.y, l(1.000000), r5.y
                  or r5.x, r5.y, r5.x
                  if_nz r5.x
                
                #line 81
                    add r5.x, r4.y, l(5.000000)
                    ftou r5.x, r5.x
                    mov r5.x, cb1[r5.x + 0].x  // weight<0>
                
                #line 84
                    sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r4.zwzz, t1.xyzw, s1, l(0.000000)
                    mul r6.xyzw, r5.xxxx, r6.xyzw
                    add r3.xyzw, r3.xyzw, r6.xyzw  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r4.x, r4.x, r5.x  // totalWeight<0:Inf>
                
                #line 78
                  endif 
                
                #line 61
                  add r4.y, r4.y, l(1.000000)  // i<0:Inf>
                endloop 
                
                #line 91
                div o0.xyzw, r3.xyzw, r4.xxxx  // PSBlur16BitTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 46 instruction slots used
                            
            };
        }

    }

    technique11 HorzBlur8Bit
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float       
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                
                #line 35 "SSAO-BlurTech.fx"
                mov r0.xyz, v0.xyzx  // vout<0,1,2>
                mov r0.w, l(1.000000)  // vout<3: 1f>
                
                #line 38
                mov r1.xy, v2.xyxx  // vout<4,5>
                mov o0.xyzw, r0.xyzw  // VSBlurTech<0,1,2,3: 1f>
                mov o1.xy, r1.xyxx  // VSBlurTech<4,5>
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrameCamPropSSAO
                // {
                //
                //   float gZNear;                      // Offset:    0 Size:     4
                //   float gZFar;                       // Offset:    4 Size:     4
                //
                // }
                //
                // cbuffer cbPerFrameBlurSSAO
                // {
                //
                //   float gTexelWidth;                 // Offset:    0 Size:     4
                //   float gTexelHeight;                // Offset:    4 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSettingsSSAO
                // {
                //
                //   float gWeights[11];                // Offset:    0 Size:   164
                //      = 0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3e4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samNormalDepthBlur                sampler      NA          NA    0        1
                // samInputImage                     sampler      NA          NA    1        1
                // gNormalDepthMap                   texture  float4          2d    0        1
                // gInputImage                       texture  float4          2d    1        1
                // cbPerFrameCamPropSSAO             cbuffer      NA          NA    0        1
                // cbPerFrameBlurSSAO                cbuffer      NA          NA    1        1
                // cbSettingsSSAO                    cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_constantbuffer cb2[11], dynamicIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 8
                
                #line 99 "SSAO-BlurTech.fx"
                mov r0.x, cb1[0].x  // texOffset<0>
                mov r0.y, l(0)  // texOffset<1: 0f>
                
                #line 107
                sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t1.xyzw, s1, l(0.000000)
                mul r1.xyzw, r1.xyzw, cb2[5].xxxx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r0.z, cb2[5].x  // totalWeight<0>
                
                #line 111
                nop 
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)  // input<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 114 "SSAO-Utilities.fx"
                nop 
                mov r2.xyzw, r2.xyzw  // input<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 96
                mul r0.w, r2.x, l(2.000000)
                add r3.x, r0.w, l(-1.000000)  // normal<0:Inf>
                mul r0.w, r2.y, l(2.000000)
                add r3.y, r0.w, l(-1.000000)  // normal<1:Inf>
                
                #line 100
                mul r0.w, r3.x, r3.x
                mov r0.w, -r0.w
                add r0.w, r0.w, l(1.000000)
                mul r2.x, r3.y, r3.y
                mov r2.x, -r2.x
                add r0.w, r0.w, r2.x
                mov r2.x, -r0.w
                max r0.w, r0.w, r2.x
                sqrt r0.w, r0.w
                mov r3.z, -r0.w  // normal<2:NaN:Inf>
                
                #line 106
                div r0.w, r2.w, l(255.000000)
                add r0.w, r0.w, r2.z  // depth<0:NaN:Inf>
                
                #line 109
                mov r2.x, -cb0[0].x
                add r2.x, r2.x, cb0[0].y
                mul r0.w, r0.w, r2.x
                add r0.w, r0.w, cb0[0].x  // depth<0:NaN:Inf>
                
                #line 114
                mov r3.x, r3.x  // output<0:Inf>
                mov r3.y, r3.y  // output<1:Inf>
                mov r3.z, r3.z  // output<2:NaN:Inf>
                mov r0.w, r0.w  // output<3:NaN:Inf>
                
                #line 111 "SSAO-BlurTech.fx"
                mov r3.xyz, r3.xyzx  // centerNormalDepth<0:Inf,1:Inf,2:NaN:Inf>
                mov r0.w, r0.w  // centerNormalDepth<3:NaN:Inf>
                mov r2.y, l(-5.000000)  // i<0:[-5f,-5f]>
                mov r4.xyzw, r1.xyzw  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r2.z, r0.z  // totalWeight<0:Inf>
                mov r2.w, r2.y  // i<0:Inf>
                loop 
                  ge r3.w, l(5.000000), r2.w
                  breakc_z r3.w
                
                #line 116
                  eq r3.w, r2.w, l(0.000000)
                  if_nz r3.w
                    mov r2.w, l(1.000000)  // i<0: 1f>
                    continue 
                  endif 
                
                #line 120
                  mul r5.xy, r0.xyxx, r2.wwww
                  add r5.xy, r5.xyxx, v1.xyxx  // tex<0:NaN:Inf,1:NaN>
                
                #line 124
                  nop 
                  sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.xyxx, t0.xyzw, s0, l(0.000000)  // input<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 114 "SSAO-Utilities.fx"
                  nop 
                  mov r6.xyzw, r6.xyzw  // input<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 96
                  mul r3.w, r6.x, l(2.000000)
                  add r7.x, r3.w, l(-1.000000)  // normal<0:Inf>
                  mul r3.w, r6.y, l(2.000000)
                  add r7.y, r3.w, l(-1.000000)  // normal<1:Inf>
                
                #line 100
                  mul r3.w, r7.x, r7.x
                  mov r3.w, -r3.w
                  add r3.w, r3.w, l(1.000000)
                  mul r5.z, r7.y, r7.y
                  mov r5.z, -r5.z
                  add r3.w, r3.w, r5.z
                  mov r5.z, -r3.w
                  max r3.w, r3.w, r5.z
                  sqrt r3.w, r3.w
                  mov r7.z, -r3.w  // normal<2:NaN:Inf>
                
                #line 106
                  div r3.w, r6.w, l(255.000000)
                  add r3.w, r3.w, r6.z  // depth<0:NaN:Inf>
                
                #line 109
                  mul r3.w, r2.x, r3.w
                  add r3.w, r3.w, cb0[0].x  // depth<0:NaN:Inf>
                
                #line 114
                  mov r7.x, r7.x  // output<0:Inf>
                  mov r7.y, r7.y  // output<1:Inf>
                  mov r7.z, r7.z  // output<2:NaN:Inf>
                  mov r3.w, r3.w  // output<3:NaN:Inf>
                
                #line 124 "SSAO-BlurTech.fx"
                  mov r7.xyz, r7.xyzx  // neighborNormalDepth<0:Inf,1:Inf,2:NaN:Inf>
                  mov r3.w, r3.w  // neighborNormalDepth<3:NaN:Inf>
                
                #line 132
                  dp3 r5.z, r7.xyzx, r3.xyzx
                  ge r5.z, r5.z, l(0.800000)
                  mov r5.w, -r0.w
                  add r3.w, r3.w, r5.w
                  mov r5.w, -r3.w
                  max r3.w, r3.w, r5.w
                  ge r3.w, l(0.200000), r3.w
                  and r3.w, r3.w, r5.z
                  mov r5.z, -r2.w
                  max r5.z, r2.w, r5.z
                  ge r5.z, l(1.000000), r5.z
                  or r3.w, r3.w, r5.z
                  if_nz r3.w
                
                #line 135
                    add r3.w, r2.w, l(5.000000)
                    ftou r3.w, r3.w
                    mov r3.w, cb2[r3.w + 0].x  // weight<0>
                
                #line 138
                    sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r5.xyxx, t1.xyzw, s1, l(0.000000)
                    mul r5.xyzw, r3.wwww, r5.xyzw
                    add r4.xyzw, r4.xyzw, r5.xyzw  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r2.z, r2.z, r3.w  // totalWeight<0:Inf>
                
                #line 132
                  endif 
                
                #line 113
                  add r2.w, r2.w, l(1.000000)  // i<0:Inf>
                endloop 
                
                #line 145
                div o0.xyzw, r4.xyzw, r2.zzzz  // PSBlur8BitTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 102 instruction slots used
                            
            };
        }

    }

    technique11 VertBlur8Bit
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float       
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                
                #line 35 "SSAO-BlurTech.fx"
                mov r0.xyz, v0.xyzx  // vout<0,1,2>
                mov r0.w, l(1.000000)  // vout<3: 1f>
                
                #line 38
                mov r1.xy, v2.xyxx  // vout<4,5>
                mov o0.xyzw, r0.xyzw  // VSBlurTech<0,1,2,3: 1f>
                mov o1.xy, r1.xyxx  // VSBlurTech<4,5>
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrameCamPropSSAO
                // {
                //
                //   float gZNear;                      // Offset:    0 Size:     4
                //   float gZFar;                       // Offset:    4 Size:     4
                //
                // }
                //
                // cbuffer cbPerFrameBlurSSAO
                // {
                //
                //   float gTexelWidth;                 // Offset:    0 Size:     4 [unused]
                //   float gTexelHeight;                // Offset:    4 Size:     4
                //
                // }
                //
                // cbuffer cbSettingsSSAO
                // {
                //
                //   float gWeights[11];                // Offset:    0 Size:   164
                //      = 0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3e4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samNormalDepthBlur                sampler      NA          NA    0        1
                // samInputImage                     sampler      NA          NA    1        1
                // gNormalDepthMap                   texture  float4          2d    0        1
                // gInputImage                       texture  float4          2d    1        1
                // cbPerFrameCamPropSSAO             cbuffer      NA          NA    0        1
                // cbPerFrameBlurSSAO                cbuffer      NA          NA    1        1
                // cbSettingsSSAO                    cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_constantbuffer cb2[11], dynamicIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 8
                
                #line 103 "SSAO-BlurTech.fx"
                mov r0.x, l(0)  // texOffset<0: 0f>
                mov r0.y, cb1[0].y  // texOffset<1>
                
                #line 107
                sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t1.xyzw, s1, l(0.000000)
                mul r1.xyzw, r1.xyzw, cb2[5].xxxx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r0.z, cb2[5].x  // totalWeight<0>
                
                #line 111
                nop 
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)  // input<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 114 "SSAO-Utilities.fx"
                nop 
                mov r2.xyzw, r2.xyzw  // input<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 96
                mul r0.w, r2.x, l(2.000000)
                add r3.x, r0.w, l(-1.000000)  // normal<0:Inf>
                mul r0.w, r2.y, l(2.000000)
                add r3.y, r0.w, l(-1.000000)  // normal<1:Inf>
                
                #line 100
                mul r0.w, r3.x, r3.x
                mov r0.w, -r0.w
                add r0.w, r0.w, l(1.000000)
                mul r2.x, r3.y, r3.y
                mov r2.x, -r2.x
                add r0.w, r0.w, r2.x
                mov r2.x, -r0.w
                max r0.w, r0.w, r2.x
                sqrt r0.w, r0.w
                mov r3.z, -r0.w  // normal<2:NaN:Inf>
                
                #line 106
                div r0.w, r2.w, l(255.000000)
                add r0.w, r0.w, r2.z  // depth<0:NaN:Inf>
                
                #line 109
                mov r2.x, -cb0[0].x
                add r2.x, r2.x, cb0[0].y
                mul r0.w, r0.w, r2.x
                add r0.w, r0.w, cb0[0].x  // depth<0:NaN:Inf>
                
                #line 114
                mov r3.x, r3.x  // output<0:Inf>
                mov r3.y, r3.y  // output<1:Inf>
                mov r3.z, r3.z  // output<2:NaN:Inf>
                mov r0.w, r0.w  // output<3:NaN:Inf>
                
                #line 111 "SSAO-BlurTech.fx"
                mov r3.xyz, r3.xyzx  // centerNormalDepth<0:Inf,1:Inf,2:NaN:Inf>
                mov r0.w, r0.w  // centerNormalDepth<3:NaN:Inf>
                mov r2.y, l(-5.000000)  // i<0:[-5f,-5f]>
                mov r4.xyzw, r1.xyzw  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r2.z, r0.z  // totalWeight<0:Inf>
                mov r2.w, r2.y  // i<0:Inf>
                loop 
                  ge r3.w, l(5.000000), r2.w
                  breakc_z r3.w
                
                #line 116
                  eq r3.w, r2.w, l(0.000000)
                  if_nz r3.w
                    mov r2.w, l(1.000000)  // i<0: 1f>
                    continue 
                  endif 
                
                #line 120
                  mul r5.xy, r0.xyxx, r2.wwww
                  add r5.xy, r5.xyxx, v1.xyxx  // tex<0:NaN,1:NaN:Inf>
                
                #line 124
                  nop 
                  sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.xyxx, t0.xyzw, s0, l(0.000000)  // input<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 114 "SSAO-Utilities.fx"
                  nop 
                  mov r6.xyzw, r6.xyzw  // input<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 96
                  mul r3.w, r6.x, l(2.000000)
                  add r7.x, r3.w, l(-1.000000)  // normal<0:Inf>
                  mul r3.w, r6.y, l(2.000000)
                  add r7.y, r3.w, l(-1.000000)  // normal<1:Inf>
                
                #line 100
                  mul r3.w, r7.x, r7.x
                  mov r3.w, -r3.w
                  add r3.w, r3.w, l(1.000000)
                  mul r5.z, r7.y, r7.y
                  mov r5.z, -r5.z
                  add r3.w, r3.w, r5.z
                  mov r5.z, -r3.w
                  max r3.w, r3.w, r5.z
                  sqrt r3.w, r3.w
                  mov r7.z, -r3.w  // normal<2:NaN:Inf>
                
                #line 106
                  div r3.w, r6.w, l(255.000000)
                  add r3.w, r3.w, r6.z  // depth<0:NaN:Inf>
                
                #line 109
                  mul r3.w, r2.x, r3.w
                  add r3.w, r3.w, cb0[0].x  // depth<0:NaN:Inf>
                
                #line 114
                  mov r7.x, r7.x  // output<0:Inf>
                  mov r7.y, r7.y  // output<1:Inf>
                  mov r7.z, r7.z  // output<2:NaN:Inf>
                  mov r3.w, r3.w  // output<3:NaN:Inf>
                
                #line 124 "SSAO-BlurTech.fx"
                  mov r7.xyz, r7.xyzx  // neighborNormalDepth<0:Inf,1:Inf,2:NaN:Inf>
                  mov r3.w, r3.w  // neighborNormalDepth<3:NaN:Inf>
                
                #line 132
                  dp3 r5.z, r7.xyzx, r3.xyzx
                  ge r5.z, r5.z, l(0.800000)
                  mov r5.w, -r0.w
                  add r3.w, r3.w, r5.w
                  mov r5.w, -r3.w
                  max r3.w, r3.w, r5.w
                  ge r3.w, l(0.200000), r3.w
                  and r3.w, r3.w, r5.z
                  mov r5.z, -r2.w
                  max r5.z, r2.w, r5.z
                  ge r5.z, l(1.000000), r5.z
                  or r3.w, r3.w, r5.z
                  if_nz r3.w
                
                #line 135
                    add r3.w, r2.w, l(5.000000)
                    ftou r3.w, r3.w
                    mov r3.w, cb2[r3.w + 0].x  // weight<0>
                
                #line 138
                    sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r5.xyxx, t1.xyzw, s1, l(0.000000)
                    mul r5.xyzw, r3.wwww, r5.xyzw
                    add r4.xyzw, r4.xyzw, r5.xyzw  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r2.z, r2.z, r3.w  // totalWeight<0:Inf>
                
                #line 132
                  endif 
                
                #line 113
                  add r2.w, r2.w, l(1.000000)  // i<0:Inf>
                endloop 
                
                #line 145
                div o0.xyzw, r4.xyzw, r2.zzzz  // PSBlur8BitTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 102 instruction slots used
                            
            };
        }

    }

}

