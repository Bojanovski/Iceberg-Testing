//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerOperationTexGenerator
{
    float   gTexDimensions[3];          // Offset:    0, size:   36
    uint    gSeed;                      // Offset:   36, size:    4
    float   gLacunarity;                // Offset:   40, size:    4
    uint    gOctaves;                   // Offset:   44, size:    4
    uint    gGradientsToUse[2];         // Offset:   48, size:   20
    float   gGradients[162];            // Offset:   80, size: 2580
    uint    g3DGradientsToUse[3];       // Offset: 2672, size:   36
    float   g3DGradients[375];          // Offset: 2720, size: 5988
}

cbuffer cbVoronoi
{
    int     gVoronoiPointsNum;          // Offset:    0, size:    4
}

//
// 3 local object(s)
//
RWTexture2D gOutput;
RWTexture3D gOutput3D;
StructuredBuffer gVoronoi2DPoints;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 9 technique(s)
    //
    technique11 Voronoi2D
    {
        pass P0
        {
            VertexShader = NULL;
            PixelShader = NULL;
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbVoronoi
                // {
                //
                //   int gVoronoiPointsNum;             // Offset:    0 Size:     4
                //
                // }
                //
                // Resource bind info for gVoronoi2DPoints
                // {
                //
                //   struct Voronoi2DPoint
                //   {
                //       
                //       float3 gColor;                 // Offset:    0
                //       float2 gPos;                   // Offset:   12
                //
                //   } $Element;                        // Offset:    0 Size:    20
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gVoronoi2DPoints                  texture  struct         r/o    0        1
                // gOutput                               UAV  float4          2d    0        1
                // cbVoronoi                         cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_resource_structured t0, 20 
                dcl_uav_typed_texture2d (float,float,float,float) u0
                dcl_input vThreadID.xy
                dcl_temps 5
                dcl_thread_group 256, 1, 1
                
                #line 23 "TextureGenerator-2DVoronoi.fx"
                itof r0.xy, vThreadID.xyxx
                ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r1.x, l(0), l(12), t0.xxxx  // gVoronoi2DPoints<0>
                ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r1.y, l(0), l(16), t0.xxxx  // gVoronoi2DPoints<0>
                mov r0.zw, -r1.xxxy
                add r0.zw, r0.zzzw, r0.xxxy  // offset<0,1>
                dp2 r0.z, r0.zwzz, r0.zwzz  // lSq<0:NaN:Inf>
                mov r0.z, r0.z  // closestSoFarSq<0:NaN:Inf>
                ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r1.x, l(0), l(0), t0.xxxx  // gVoronoi2DPoints<0>
                ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r1.y, l(0), l(4), t0.xxxx  // gVoronoi2DPoints<0>
                ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r1.z, l(0), l(8), t0.xxxx  // gVoronoi2DPoints<0>
                mov r1.w, l(1.000000)  // tex<3: 1f>
                mov r1.xyz, r1.xyzx  // tex<0,1,2>
                mov r0.w, l(1)  // i<0: 1>
                mov r2.xyzw, r1.xyzw  // tex<0,1,2,3: 1f>
                mov r3.x, r0.z  // closestSoFarSq<0:NaN:Inf>
                mov r3.y, r0.w  // i<0>
                loop 
                  ilt r3.z, r3.y, cb0[0].x
                  breakc_z r3.z
                  mov r3.z, r3.y
                  ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r4.x, r3.z, l(12), t0.xxxx  // gVoronoi2DPoints<0>
                  ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r4.y, r3.z, l(16), t0.xxxx  // gVoronoi2DPoints<0>
                  mov r4.xy, -r4.xyxx
                  add r4.xy, r0.xyxx, r4.xyxx  // offset<0,1>
                  dp2 r3.w, r4.xyxx, r4.xyxx  // lSq<0:NaN:Inf>
                  lt r4.x, r3.w, r3.x
                  if_nz r4.x
                
                #line 34
                    mov r3.x, r3.w  // closestSoFarSq<0:NaN:Inf>
                    ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r2.x, r3.z, l(0), t0.xxxx  // gVoronoi2DPoints<0>
                    ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r2.y, r3.z, l(4), t0.xxxx  // gVoronoi2DPoints<0>
                    ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r2.z, r3.z, l(8), t0.xxxx  // gVoronoi2DPoints<0>
                    mov r2.w, l(1.000000)  // tex<3: 1f>
                    mov r2.xyz, r2.xyzx  // tex<0,1,2>
                
                #line 32
                  endif 
                
                #line 28
                  iadd r3.y, r3.y, l(1)  // i<0>
                endloop 
                
                #line 38
                mov r0.xyzw, vThreadID.xyyy
                store_uav_typed u0.xyzw, r0.xyzw, r2.xyzw  // gOutput<0>
                
                #line 21
                ret 
                // Approximately 39 instruction slots used
                            
            };
        }

    }

    technique11 PerlinTech
    {
        pass P0
        {
            VertexShader = NULL;
            PixelShader = NULL;
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerOperationTexGenerator
                // {
                //
                //   float gTexDimensions[3];           // Offset:    0 Size:    36
                //   uint gSeed;                        // Offset:   36 Size:     4 [unused]
                //   float gLacunarity;                 // Offset:   40 Size:     4
                //   uint gOctaves;                     // Offset:   44 Size:     4
                //   uint gGradientsToUse[2];           // Offset:   48 Size:    20
                //   float gGradients[162];             // Offset:   80 Size:  2580
                //   uint g3DGradientsToUse[3];         // Offset: 2672 Size:    36 [unused]
                //   float g3DGradients[375];           // Offset: 2720 Size:  5988 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gOutput                               UAV  float4          2d    0        1
                // cbPerOperationTexGenerator        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[167], dynamicIndexed
                dcl_uav_typed_texture2d (float,float,float,float) u0
                dcl_input vThreadID.xy
                dcl_temps 6
                dcl_thread_group 256, 1, 1
                
                #line 10 "TextureGenerator-PerlinNoise.fx"
                mov r0.x, l(0)  // tex<0: -0f>
                mov r0.y, r0.x  // tex<0:NaN:Inf>
                mov r0.z, r0.x  // i<0>
                loop 
                  ult r0.w, r0.z, cb0[2].w
                  breakc_z r0.w
                  nop 
                  itof r1.xy, vThreadID.xyxx
                  mov r0.w, -cb0[2].z
                  max r0.w, r0.w, cb0[2].z
                  utof r1.z, r0.z
                  log r0.w, r0.w
                  mul r0.w, r0.w, r1.z
                  exp r0.w, r0.w
                  mul r1.xy, r0.wwww, r1.xyxx  // coords<0:NaN:Inf,1:NaN:Inf>
                
                #line 95 "TextureGenerator-Utilities.fx"
                  mul r0.w, r1.x, cb0[0].x
                  mov r1.w, -r0.w
                  ge r0.w, r0.w, r1.w
                  mov r1.w, -cb0[0].x
                  movc r0.w, r0.w, cb0[0].x, r1.w
                  div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
                  mul r1.x, r1.w, r1.x
                  frc r1.x, r1.x
                  mul r2.x, r0.w, r1.x  // coords<0:NaN>
                  mul r0.w, r1.y, cb0[1].x
                  mov r1.x, -r0.w
                  ge r0.w, r0.w, r1.x
                  mov r1.x, -cb0[1].x
                  movc r0.w, r0.w, cb0[1].x, r1.x
                  div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
                  mul r1.x, r1.x, r1.y
                  frc r1.x, r1.x
                  mul r2.y, r0.w, r1.x  // coords<1:NaN>
                  iadd r0.w, cb0[3].x, l(-1)
                  iadd r1.x, cb0[4].x, l(-1)
                  utof r3.x, r0.w  // grid<0:[0f,4.29497e+009f]>
                  utof r3.y, r1.x  // grid<1:[0f,4.29497e+009f]>
                  mov r1.x, cb0[0].x
                  mov r1.y, cb0[1].x
                  div r1.xy, r1.xyxx, r3.xyxx  // textelsPerCell<0:NaN:Inf,1:NaN:Inf>
                  div r1.xy, r2.xyxx, r1.xyxx  // gridCoords<0:NaN:Inf,1:NaN:Inf>
                
                #line 102
                  ftoi r2.zw, r1.xxxy  // upperLeft<0,1>
                
                #line 105
                  itof r0.w, r2.z
                  eq r0.w, r1.x, r0.w
                  ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), r2.x
                  and r0.w, r0.w, r1.w
                  if_nz r0.w
                    iadd r2.z, r2.z, l(-1)  // upperLeft<0>
                  endif 
                  itof r0.w, r2.w
                  eq r0.w, r1.y, r0.w
                  ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), r2.y
                  and r0.w, r0.w, r1.w
                  if_nz r0.w
                    iadd r2.w, r2.w, l(-1)  // upperLeft<1>
                  endif 
                  itof r2.x, r2.z
                  itof r2.y, r2.w
                  mov r2.xy, -r2.xyxx
                  add r1.xy, r1.xyxx, r2.xyxx  // frac<0:NaN:Inf,1:NaN:Inf>
                
                #line 125
                  imul null, r0.w, r2.w, l(2)
                  imad r1.w, r2.w, l(2), l(2)
                  imad r2.x, r2.z, l(18), r1.w
                  mov r3.x, cb0[r2.x + 5].x  // G11<0>
                  mov r3.y, cb0[r2.x + 6].x  // G11<1>
                  imad r2.x, r2.z, l(18), l(18)
                  iadd r1.w, r2.x, r1.w
                  mov r4.x, cb0[r1.w + 5].x  // G12<0>
                  mov r4.y, cb0[r1.w + 6].x  // G12<1>
                  imad r0.w, r2.z, l(18), r0.w
                  mov r5.x, cb0[r0.w + 5].x  // G21<0>
                  mov r5.y, cb0[r0.w + 6].x  // G21<1>
                  imad r0.w, r2.w, l(2), r2.x
                  mov r2.x, cb0[r0.w + 5].x  // G22<0>
                  mov r2.y, cb0[r0.w + 6].x  // G22<1>
                  mov r2.zw, -r1.xxxy
                  add r3.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 1.000000)  // S11<0:NaN:Inf,1:NaN:Inf>
                  add r4.zw, r2.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)  // S12<0:NaN:Inf,1:NaN:Inf>
                  add r5.zw, r2.zzzw, l(0.000000, 0.000000, 1.000000, 0.000000)  // S22<0:NaN:Inf,1:NaN:Inf>
                  dp2 r0.w, r3.xyxx, r3.zwzz  // Q11<0:NaN:Inf>
                
                #line 136
                  dp2 r1.w, r4.xyxx, r4.zwzz  // Q12<0:NaN:Inf>
                  dp2 r2.z, r5.xyxx, r2.zwzz  // Q21<0:NaN:Inf>
                  dp2 r2.x, r2.xyxx, r5.zwzz  // Q22<0:NaN:Inf>
                  nop 
                  mov r1.x, r1.x  // x<0:NaN:Inf>
                  mov r1.y, r1.y  // y<0:NaN:Inf>
                
                #line 86
                  mov r2.y, -r1.x
                  add r2.y, r2.y, l(1.000000)
                  mul r2.w, r2.y, r2.y
                  mul r3.x, r2.w, l(1.000000)
                  mul r3.x, r3.x, l(3.000000)
                  mul r2.y, r2.y, l(1.000000)
                  mul r2.y, r2.w, r2.y
                  mul r2.y, r2.y, l(2.000000)
                  mov r2.y, -r2.y
                  add r2.y, r2.y, r3.x
                  mul r2.w, r1.y, r1.y
                  mul r3.x, r2.w, l(1.000000)
                  mul r3.x, r3.x, l(3.000000)
                  mul r3.y, r1.y, l(1.000000)
                  mul r2.w, r2.w, r3.y
                  mul r2.w, r2.w, l(2.000000)
                  mov r2.w, -r2.w
                  add r2.w, r2.w, r3.x
                  mul r3.x, r2.w, r2.y  // SCurve11<0:NaN:Inf>
                
                #line 140
                  mul r0.w, r0.w, r3.x
                  nop 
                
                #line 84
                  mul r3.x, r1.x, r1.x
                  mul r3.y, r3.x, l(1.000000)
                  mul r3.y, r3.y, l(3.000000)
                  mul r1.x, r1.x, l(1.000000)
                  mul r1.x, r3.x, r1.x
                  mul r1.x, r1.x, l(2.000000)
                  mov r1.x, -r1.x
                  add r1.x, r1.x, r3.y
                  mul r2.w, r2.w, r1.x  // SCurve12<0:NaN:Inf>
                
                #line 140
                  mul r1.w, r1.w, r2.w
                  add r0.w, r0.w, r1.w
                  nop 
                
                #line 88
                  mov r1.y, -r1.y
                  add r1.y, r1.y, l(1.000000)
                  mul r1.w, r1.y, r1.y
                  mul r2.w, r1.w, l(1.000000)
                  mul r2.w, r2.w, l(3.000000)
                  mul r1.y, r1.y, l(1.000000)
                  mul r1.y, r1.w, r1.y
                  mul r1.y, r1.y, l(2.000000)
                  mov r1.y, -r1.y
                  add r1.y, r1.y, r2.w
                  mul r1.w, r1.y, r2.y  // SCurve21<0:NaN:Inf>
                
                #line 140
                  mul r1.w, r1.w, r2.z
                  add r0.w, r0.w, r1.w
                  nop 
                
                #line 90
                  mul r1.x, r1.y, r1.x  // SCurve22<0:NaN:Inf>
                
                #line 140
                  mul r1.x, r1.x, r2.x
                  add r0.w, r0.w, r1.x  // Q<0:NaN:Inf>
                  mov r0.w, r0.w  // SampleGradient<0:NaN:Inf>
                
                #line 14 "TextureGenerator-PerlinNoise.fx"
                  mov r0.w, r0.w  // sampledColor<0:NaN:Inf>
                  div r1.x, l(1.000000), cb0[2].z
                  mov r1.y, -r1.x
                  max r1.x, r1.y, r1.x
                  log r1.x, r1.x
                  mul r1.x, r1.x, r1.z
                  exp r1.x, r1.x
                  mul r0.w, r0.w, r1.x
                  add r0.y, r0.w, r0.y  // tex<0:NaN:Inf>
                
                #line 12
                  iadd r0.z, r0.z, l(1)  // i<0>
                endloop 
                
                #line 18
                nop 
                mov r0.y, r0.y  // tex<0:NaN:Inf>
                
                #line 54 "TextureGenerator-Utilities.fx"
                add r0.x, r0.y, l(0.500000)  // tex<0:NaN:Inf>
                
                #line 58
                mul r0.x, r0.x, l(1.000000)
                add r0.xyz, r0.xxxx, l(0.000000, 0.000000, 0.000000, 0.000000)  // tex<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                mov r0.xyz, r0.xyzx  // ScalePerlin<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 18 "TextureGenerator-PerlinNoise.fx"
                mov r0.xyz, r0.xyzx  // tex<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                mov r1.xyzw, vThreadID.xyyy
                mov r0.w, l(1.000000)
                store_uav_typed u0.xyzw, r1.xyzw, r0.xyzw  // gOutput<0>
                
                #line 8
                ret 
                // Approximately 159 instruction slots used
                            
            };
        }

    }

    technique11 RidgedTech
    {
        pass P0
        {
            VertexShader = NULL;
            PixelShader = NULL;
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerOperationTexGenerator
                // {
                //
                //   float gTexDimensions[3];           // Offset:    0 Size:    36
                //   uint gSeed;                        // Offset:   36 Size:     4 [unused]
                //   float gLacunarity;                 // Offset:   40 Size:     4
                //   uint gOctaves;                     // Offset:   44 Size:     4
                //   uint gGradientsToUse[2];           // Offset:   48 Size:    20
                //   float gGradients[162];             // Offset:   80 Size:  2580
                //   uint g3DGradientsToUse[3];         // Offset: 2672 Size:    36 [unused]
                //   float g3DGradients[375];           // Offset: 2720 Size:  5988 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gOutput                               UAV  float4          2d    0        1
                // cbPerOperationTexGenerator        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[167], dynamicIndexed
                dcl_uav_typed_texture2d (float,float,float,float) u0
                dcl_input vThreadID.xy
                dcl_temps 6
                dcl_thread_group 256, 1, 1
                
                #line 10 "TextureGenerator-RidgedMultifractal.fx"
                mov r0.x, l(0)  // tex<0: -0f>
                mov r0.y, r0.x  // tex<0:NaN:Inf>
                mov r0.z, r0.x  // i<0>
                loop 
                  ult r0.w, r0.z, cb0[2].w
                  breakc_z r0.w
                  nop 
                  itof r1.xy, vThreadID.xyxx
                  mov r0.w, -cb0[2].z
                  max r0.w, r0.w, cb0[2].z
                  utof r1.z, r0.z
                  log r0.w, r0.w
                  mul r0.w, r0.w, r1.z
                  exp r0.w, r0.w
                  mul r1.xy, r0.wwww, r1.xyxx  // coords<0:NaN:Inf,1:NaN:Inf>
                
                #line 95 "TextureGenerator-Utilities.fx"
                  mul r0.w, r1.x, cb0[0].x
                  mov r1.w, -r0.w
                  ge r0.w, r0.w, r1.w
                  mov r1.w, -cb0[0].x
                  movc r0.w, r0.w, cb0[0].x, r1.w
                  div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
                  mul r1.x, r1.w, r1.x
                  frc r1.x, r1.x
                  mul r2.x, r0.w, r1.x  // coords<0:NaN>
                  mul r0.w, r1.y, cb0[1].x
                  mov r1.x, -r0.w
                  ge r0.w, r0.w, r1.x
                  mov r1.x, -cb0[1].x
                  movc r0.w, r0.w, cb0[1].x, r1.x
                  div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
                  mul r1.x, r1.x, r1.y
                  frc r1.x, r1.x
                  mul r2.y, r0.w, r1.x  // coords<1:NaN>
                  iadd r0.w, cb0[3].x, l(-1)
                  iadd r1.x, cb0[4].x, l(-1)
                  utof r3.x, r0.w  // grid<0:[0f,4.29497e+009f]>
                  utof r3.y, r1.x  // grid<1:[0f,4.29497e+009f]>
                  mov r1.x, cb0[0].x
                  mov r1.y, cb0[1].x
                  div r1.xy, r1.xyxx, r3.xyxx  // textelsPerCell<0:NaN:Inf,1:NaN:Inf>
                  div r1.xy, r2.xyxx, r1.xyxx  // gridCoords<0:NaN:Inf,1:NaN:Inf>
                
                #line 102
                  ftoi r2.zw, r1.xxxy  // upperLeft<0,1>
                
                #line 105
                  itof r0.w, r2.z
                  eq r0.w, r1.x, r0.w
                  ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), r2.x
                  and r0.w, r0.w, r1.w
                  if_nz r0.w
                    iadd r2.z, r2.z, l(-1)  // upperLeft<0>
                  endif 
                  itof r0.w, r2.w
                  eq r0.w, r1.y, r0.w
                  ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), r2.y
                  and r0.w, r0.w, r1.w
                  if_nz r0.w
                    iadd r2.w, r2.w, l(-1)  // upperLeft<1>
                  endif 
                  itof r2.x, r2.z
                  itof r2.y, r2.w
                  mov r2.xy, -r2.xyxx
                  add r1.xy, r1.xyxx, r2.xyxx  // frac<0:NaN:Inf,1:NaN:Inf>
                
                #line 125
                  imul null, r0.w, r2.w, l(2)
                  imad r1.w, r2.w, l(2), l(2)
                  imad r2.x, r2.z, l(18), r1.w
                  mov r3.x, cb0[r2.x + 5].x  // G11<0>
                  mov r3.y, cb0[r2.x + 6].x  // G11<1>
                  imad r2.x, r2.z, l(18), l(18)
                  iadd r1.w, r2.x, r1.w
                  mov r4.x, cb0[r1.w + 5].x  // G12<0>
                  mov r4.y, cb0[r1.w + 6].x  // G12<1>
                  imad r0.w, r2.z, l(18), r0.w
                  mov r5.x, cb0[r0.w + 5].x  // G21<0>
                  mov r5.y, cb0[r0.w + 6].x  // G21<1>
                  imad r0.w, r2.w, l(2), r2.x
                  mov r2.x, cb0[r0.w + 5].x  // G22<0>
                  mov r2.y, cb0[r0.w + 6].x  // G22<1>
                  mov r2.zw, -r1.xxxy
                  add r3.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 1.000000)  // S11<0:NaN:Inf,1:NaN:Inf>
                  add r4.zw, r2.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)  // S12<0:NaN:Inf,1:NaN:Inf>
                  add r5.zw, r2.zzzw, l(0.000000, 0.000000, 1.000000, 0.000000)  // S22<0:NaN:Inf,1:NaN:Inf>
                  dp2 r0.w, r3.xyxx, r3.zwzz  // Q11<0:NaN:Inf>
                
                #line 136
                  dp2 r1.w, r4.xyxx, r4.zwzz  // Q12<0:NaN:Inf>
                  dp2 r2.z, r5.xyxx, r2.zwzz  // Q21<0:NaN:Inf>
                  dp2 r2.x, r2.xyxx, r5.zwzz  // Q22<0:NaN:Inf>
                  nop 
                  mov r1.x, r1.x  // x<0:NaN:Inf>
                  mov r1.y, r1.y  // y<0:NaN:Inf>
                
                #line 86
                  mov r2.y, -r1.x
                  add r2.y, r2.y, l(1.000000)
                  mul r2.w, r2.y, r2.y
                  mul r3.x, r2.w, l(1.000000)
                  mul r3.x, r3.x, l(3.000000)
                  mul r2.y, r2.y, l(1.000000)
                  mul r2.y, r2.w, r2.y
                  mul r2.y, r2.y, l(2.000000)
                  mov r2.y, -r2.y
                  add r2.y, r2.y, r3.x
                  mul r2.w, r1.y, r1.y
                  mul r3.x, r2.w, l(1.000000)
                  mul r3.x, r3.x, l(3.000000)
                  mul r3.y, r1.y, l(1.000000)
                  mul r2.w, r2.w, r3.y
                  mul r2.w, r2.w, l(2.000000)
                  mov r2.w, -r2.w
                  add r2.w, r2.w, r3.x
                  mul r3.x, r2.w, r2.y  // SCurve11<0:NaN:Inf>
                
                #line 140
                  mul r0.w, r0.w, r3.x
                  nop 
                
                #line 84
                  mul r3.x, r1.x, r1.x
                  mul r3.y, r3.x, l(1.000000)
                  mul r3.y, r3.y, l(3.000000)
                  mul r1.x, r1.x, l(1.000000)
                  mul r1.x, r3.x, r1.x
                  mul r1.x, r1.x, l(2.000000)
                  mov r1.x, -r1.x
                  add r1.x, r1.x, r3.y
                  mul r2.w, r2.w, r1.x  // SCurve12<0:NaN:Inf>
                
                #line 140
                  mul r1.w, r1.w, r2.w
                  add r0.w, r0.w, r1.w
                  nop 
                
                #line 88
                  mov r1.y, -r1.y
                  add r1.y, r1.y, l(1.000000)
                  mul r1.w, r1.y, r1.y
                  mul r2.w, r1.w, l(1.000000)
                  mul r2.w, r2.w, l(3.000000)
                  mul r1.y, r1.y, l(1.000000)
                  mul r1.y, r1.w, r1.y
                  mul r1.y, r1.y, l(2.000000)
                  mov r1.y, -r1.y
                  add r1.y, r1.y, r2.w
                  mul r1.w, r1.y, r2.y  // SCurve21<0:NaN:Inf>
                
                #line 140
                  mul r1.w, r1.w, r2.z
                  add r0.w, r0.w, r1.w
                  nop 
                
                #line 90
                  mul r1.x, r1.y, r1.x  // SCurve22<0:NaN:Inf>
                
                #line 140
                  mul r1.x, r1.x, r2.x
                  add r0.w, r0.w, r1.x  // Q<0:NaN:Inf>
                  mov r0.w, r0.w  // SampleGradient<0:NaN:Inf>
                
                #line 14 "TextureGenerator-RidgedMultifractal.fx"
                  mov r0.w, r0.w  // sampledColor<0:NaN:Inf>
                  div r1.x, l(1.000000), cb0[2].z
                  mov r1.y, -r1.x
                  max r1.x, r1.y, r1.x
                  log r1.x, r1.x
                  mul r1.x, r1.x, r1.z
                  exp r1.x, r1.x
                  nop 
                  mov r0.w, r0.w  // tex<0:NaN:Inf>
                
                #line 65 "TextureGenerator-Utilities.fx"
                  lt r1.y, l(0.000000), r0.w
                  if_nz r1.y
                    mov r0.w, -r0.w  // tex<0:NaN:Inf>
                  endif 
                  mov r0.w, r0.w  // FilterRidged<0:NaN:Inf>
                
                #line 15 "TextureGenerator-RidgedMultifractal.fx"
                  mul r0.w, r0.w, r1.x
                  add r0.y, r0.w, r0.y  // tex<0:NaN:Inf>
                
                #line 12
                  iadd r0.z, r0.z, l(1)  // i<0>
                endloop 
                
                #line 18
                nop 
                mov r0.y, r0.y  // tex<0:NaN:Inf>
                
                #line 73 "TextureGenerator-Utilities.fx"
                add r0.x, r0.y, l(0.500000)
                mul r0.x, r0.x, l(2.000000)  // tex<0:NaN:Inf>
                
                #line 77
                mul r0.x, r0.x, l(1.000000)
                add r0.x, r0.x, l(0.000000)  // tex<0:NaN:Inf>
                mov r0.x, r0.x  // ScaleRidged<0:NaN:Inf>
                
                #line 18 "TextureGenerator-RidgedMultifractal.fx"
                mov r0.x, r0.x  // tex<0:NaN:Inf>
                
                #line 21
                mov r1.xyzw, vThreadID.xyyy
                mov r0.yzw, l(0,0,0,1.000000)
                store_uav_typed u0.xyzw, r1.xyzw, r0.xyzw  // gOutput<0>
                
                #line 8
                ret 
                // Approximately 167 instruction slots used
                            
            };
        }

    }

    technique11 RidgedPerlinMix1Tech
    {
        pass P0
        {
            VertexShader = NULL;
            PixelShader = NULL;
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerOperationTexGenerator
                // {
                //
                //   float gTexDimensions[3];           // Offset:    0 Size:    36
                //   uint gSeed;                        // Offset:   36 Size:     4 [unused]
                //   float gLacunarity;                 // Offset:   40 Size:     4
                //   uint gOctaves;                     // Offset:   44 Size:     4
                //   uint gGradientsToUse[2];           // Offset:   48 Size:    20
                //   float gGradients[162];             // Offset:   80 Size:  2580
                //   uint g3DGradientsToUse[3];         // Offset: 2672 Size:    36 [unused]
                //   float g3DGradients[375];           // Offset: 2720 Size:  5988 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gOutput                               UAV  float4          2d    0        1
                // cbPerOperationTexGenerator        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[167], dynamicIndexed
                dcl_uav_typed_texture2d (float,float,float,float) u0
                dcl_input vThreadID.xy
                dcl_temps 9
                dcl_thread_group 256, 1, 1
                
                #line 11 "TextureGenerator-RidgedPerlinMix1.fx"
                mov r0.x, l(0)  // texR<0: -0f>
                
                #line 15
                mov r0.y, r0.x  // texR<0:NaN:Inf>
                mov r0.z, r0.x  // texSP<0:NaN:Inf>
                mov r0.w, r0.x  // i<0>
                loop 
                  ult r1.x, r0.w, cb0[2].w
                  breakc_z r1.x
                  nop 
                  itof r1.xy, vThreadID.xyxx
                  mov r1.z, -cb0[2].z
                  max r1.z, r1.z, cb0[2].z
                  utof r1.w, r0.w
                  log r1.z, r1.z
                  mul r1.z, r1.z, r1.w
                  exp r1.z, r1.z
                  mul r2.xy, r1.zzzz, r1.xyxx  // coords<0:NaN:Inf,1:NaN:Inf>
                
                #line 95 "TextureGenerator-Utilities.fx"
                  mul r2.z, r2.x, cb0[0].x
                  mov r2.w, -r2.z
                  ge r2.z, r2.z, r2.w
                  mov r2.w, -cb0[0].x
                  movc r2.z, r2.z, cb0[0].x, r2.w
                  div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
                  mul r2.x, r2.x, r3.x
                  frc r2.x, r2.x
                  mul r3.x, r2.x, r2.z  // coords<0:NaN>
                  mul r2.x, r2.y, cb0[1].x
                  mov r2.z, -r2.x
                  ge r2.x, r2.x, r2.z
                  mov r2.z, -cb0[1].x
                  movc r2.x, r2.x, cb0[1].x, r2.z
                  div r3.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
                  mul r2.y, r2.y, r3.z
                  frc r2.y, r2.y
                  mul r3.y, r2.y, r2.x  // coords<1:NaN>
                  iadd r2.x, cb0[3].x, l(-1)
                  iadd r2.y, cb0[4].x, l(-1)
                  utof r4.x, r2.x  // grid<0:[0f,4.29497e+009f]>
                  utof r4.y, r2.y  // grid<1:[0f,4.29497e+009f]>
                  mov r5.x, cb0[0].x
                  mov r5.y, cb0[1].x
                  div r3.zw, r5.xxxy, r4.xxxy  // textelsPerCell<0:NaN:Inf,1:NaN:Inf>
                  div r3.zw, r3.xxxy, r3.zzzw  // gridCoords<0:NaN:Inf,1:NaN:Inf>
                
                #line 102
                  ftoi r4.xy, r3.zwzz  // upperLeft<0,1>
                
                #line 105
                  itof r4.z, r4.x
                  eq r4.z, r3.z, r4.z
                  ne r3.x, l(0.000000, 0.000000, 0.000000, 0.000000), r3.x
                  and r3.x, r3.x, r4.z
                  if_nz r3.x
                    iadd r4.x, r4.x, l(-1)  // upperLeft<0>
                  endif 
                  itof r3.x, r4.y
                  eq r3.x, r3.w, r3.x
                  ne r3.y, l(0.000000, 0.000000, 0.000000, 0.000000), r3.y
                  and r3.x, r3.y, r3.x
                  if_nz r3.x
                    iadd r4.y, r4.y, l(-1)  // upperLeft<1>
                  endif 
                  itof r3.x, r4.x
                  itof r3.y, r4.y
                  mov r3.xy, -r3.xyxx
                  add r3.xy, r3.xyxx, r3.zwzz  // frac<0:NaN:Inf,1:NaN:Inf>
                
                #line 125
                  imul null, r3.z, r4.y, l(2)
                  imad r3.w, r4.y, l(2), l(2)
                  imad r4.z, r4.x, l(18), r3.w
                  mov r6.x, cb0[r4.z + 5].x  // G11<0>
                  mov r6.y, cb0[r4.z + 6].x  // G11<1>
                  imad r4.z, r4.x, l(18), l(18)
                  iadd r3.w, r4.z, r3.w
                  mov r7.x, cb0[r3.w + 5].x  // G12<0>
                  mov r7.y, cb0[r3.w + 6].x  // G12<1>
                  imad r3.z, r4.x, l(18), r3.z
                  mov r8.x, cb0[r3.z + 5].x  // G21<0>
                  mov r8.y, cb0[r3.z + 6].x  // G21<1>
                  imad r3.z, r4.y, l(2), r4.z
                  mov r4.x, cb0[r3.z + 5].x  // G22<0>
                  mov r4.y, cb0[r3.z + 6].x  // G22<1>
                  mov r3.zw, -r3.xxxy
                  add r4.zw, r3.zzzw, l(0.000000, 0.000000, 0.000000, 1.000000)  // S11<0:NaN:Inf,1:NaN:Inf>
                  add r5.zw, r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)  // S12<0:NaN:Inf,1:NaN:Inf>
                  add r6.zw, r3.zzzw, l(0.000000, 0.000000, 1.000000, 0.000000)  // S22<0:NaN:Inf,1:NaN:Inf>
                  dp2 r4.z, r6.xyxx, r4.zwzz  // Q11<0:NaN:Inf>
                
                #line 136
                  dp2 r4.w, r7.xyxx, r5.zwzz  // Q12<0:NaN:Inf>
                  dp2 r3.z, r8.xyxx, r3.zwzz  // Q21<0:NaN:Inf>
                  dp2 r3.w, r4.xyxx, r6.zwzz  // Q22<0:NaN:Inf>
                  nop 
                  mov r3.x, r3.x  // x<0:NaN:Inf>
                  mov r3.y, r3.y  // y<0:NaN:Inf>
                
                #line 86
                  mov r4.x, -r3.x
                  add r4.x, r4.x, l(1.000000)
                  mul r4.y, r4.x, r4.x
                  mul r5.z, r4.y, l(1.000000)
                  mul r5.z, r5.z, l(3.000000)
                  mul r4.x, r4.x, l(1.000000)
                  mul r4.x, r4.y, r4.x
                  mul r4.x, r4.x, l(2.000000)
                  mov r4.x, -r4.x
                  add r4.x, r4.x, r5.z
                  mul r4.y, r3.y, r3.y
                  mul r5.z, r4.y, l(1.000000)
                  mul r5.z, r5.z, l(3.000000)
                  mul r5.w, r3.y, l(1.000000)
                  mul r4.y, r4.y, r5.w
                  mul r4.y, r4.y, l(2.000000)
                  mov r4.y, -r4.y
                  add r4.y, r4.y, r5.z
                  mul r5.z, r4.y, r4.x  // SCurve11<0:NaN:Inf>
                
                #line 140
                  mul r4.z, r4.z, r5.z
                  nop 
                
                #line 84
                  mul r5.z, r3.x, r3.x
                  mul r5.w, r5.z, l(1.000000)
                  mul r5.w, r5.w, l(3.000000)
                  mul r3.x, r3.x, l(1.000000)
                  mul r3.x, r5.z, r3.x
                  mul r3.x, r3.x, l(2.000000)
                  mov r3.x, -r3.x
                  add r3.x, r3.x, r5.w
                  mul r4.y, r4.y, r3.x  // SCurve12<0:NaN:Inf>
                
                #line 140
                  mul r4.y, r4.y, r4.w
                  add r4.y, r4.y, r4.z
                  nop 
                
                #line 88
                  mov r3.y, -r3.y
                  add r3.y, r3.y, l(1.000000)
                  mul r4.z, r3.y, r3.y
                  mul r4.w, r4.z, l(1.000000)
                  mul r4.w, r4.w, l(3.000000)
                  mul r3.y, r3.y, l(1.000000)
                  mul r3.y, r4.z, r3.y
                  mul r3.y, r3.y, l(2.000000)
                  mov r3.y, -r3.y
                  add r3.y, r3.y, r4.w
                  mul r4.x, r3.y, r4.x  // SCurve21<0:NaN:Inf>
                
                #line 140
                  mul r3.z, r3.z, r4.x
                  add r3.z, r3.z, r4.y
                  nop 
                
                #line 90
                  mul r3.x, r3.y, r3.x  // SCurve22<0:NaN:Inf>
                
                #line 140
                  mul r3.x, r3.x, r3.w
                  add r3.x, r3.x, r3.z  // Q<0:NaN:Inf>
                  mov r3.x, r3.x  // SampleGradient<0:NaN:Inf>
                
                #line 17 "TextureGenerator-RidgedPerlinMix1.fx"
                  mov r3.x, r3.x  // sampledTexR<0:NaN:Inf>
                  div r3.y, l(1.000000), cb0[2].z
                  mov r3.z, -r3.y
                  max r3.y, r3.z, r3.y
                  log r3.y, r3.y
                  mul r1.w, r1.w, r3.y
                  exp r1.w, r1.w
                  nop 
                  mov r3.x, r3.x  // tex<0:NaN:Inf>
                
                #line 65 "TextureGenerator-Utilities.fx"
                  lt r3.y, l(0.000000), r3.x
                  if_nz r3.y
                    mov r3.x, -r3.x  // tex<0:NaN:Inf>
                  endif 
                  mov r3.x, r3.x  // FilterRidged<0:NaN:Inf>
                
                #line 18 "TextureGenerator-RidgedPerlinMix1.fx"
                  mul r3.x, r1.w, r3.x
                  add r0.y, r0.y, r3.x  // texR<0:NaN:Inf>
                  nop 
                  mul r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                  mul r3.x, cb0[0].x, l(0.300000)
                  mul r3.y, cb0[1].x, l(0.300000)
                  add r1.xy, r1.xyxx, r3.xyxx
                  mul r1.xy, r1.zzzz, r1.xyxx  // coords<0:NaN:Inf,1:NaN:Inf>
                
                #line 95 "TextureGenerator-Utilities.fx"
                  mul r1.z, r1.x, cb0[0].x
                  mov r3.x, -r1.z
                  ge r1.z, r1.z, r3.x
                  movc r1.z, r1.z, cb0[0].x, r2.w
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
                  mul r1.x, r1.x, r2.w
                  frc r1.x, r1.x
                  mul r3.x, r1.x, r1.z  // coords<0:NaN>
                  mul r1.x, r1.y, cb0[1].x
                  mov r1.z, -r1.x
                  ge r1.x, r1.x, r1.z
                  movc r1.x, r1.x, cb0[1].x, r2.z
                  div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
                  mul r1.y, r1.z, r1.y
                  frc r1.y, r1.y
                  mul r3.y, r1.y, r1.x  // coords<1:NaN>
                  utof r1.x, r2.x  // grid<0:[0f,4.29497e+009f]>
                  utof r1.y, r2.y  // grid<1:[0f,4.29497e+009f]>
                  div r1.xy, r5.xyxx, r1.xyxx  // textelsPerCell<0:NaN:Inf,1:NaN:Inf>
                  div r1.xy, r3.xyxx, r1.xyxx  // gridCoords<0:NaN:Inf,1:NaN:Inf>
                
                #line 102
                  ftoi r2.xy, r1.xyxx  // upperLeft<0,1>
                
                #line 105
                  itof r1.z, r2.x
                  eq r1.z, r1.x, r1.z
                  ne r2.z, l(0.000000, 0.000000, 0.000000, 0.000000), r3.x
                  and r1.z, r1.z, r2.z
                  if_nz r1.z
                    iadd r2.x, r2.x, l(-1)  // upperLeft<0>
                  endif 
                  itof r1.z, r2.y
                  eq r1.z, r1.y, r1.z
                  ne r2.z, l(0.000000, 0.000000, 0.000000, 0.000000), r3.y
                  and r1.z, r1.z, r2.z
                  if_nz r1.z
                    iadd r2.y, r2.y, l(-1)  // upperLeft<1>
                  endif 
                  itof r3.x, r2.x
                  itof r3.y, r2.y
                  mov r2.zw, -r3.xxxy
                  add r1.xy, r1.xyxx, r2.zwzz  // frac<0:NaN:Inf,1:NaN:Inf>
                
                #line 125
                  imul null, r1.z, r2.y, l(2)
                  imad r2.z, r2.y, l(2), l(2)
                  imad r2.w, r2.x, l(18), r2.z
                  mov r3.x, cb0[r2.w + 5].x  // G11<0>
                  mov r3.y, cb0[r2.w + 6].x  // G11<1>
                  imad r2.w, r2.x, l(18), l(18)
                  iadd r2.z, r2.w, r2.z
                  mov r4.x, cb0[r2.z + 5].x  // G12<0>
                  mov r4.y, cb0[r2.z + 6].x  // G12<1>
                  imad r1.z, r2.x, l(18), r1.z
                  mov r5.x, cb0[r1.z + 5].x  // G21<0>
                  mov r5.y, cb0[r1.z + 6].x  // G21<1>
                  imad r1.z, r2.y, l(2), r2.w
                  mov r2.x, cb0[r1.z + 5].x  // G22<0>
                  mov r2.y, cb0[r1.z + 6].x  // G22<1>
                  mov r2.zw, -r1.xxxy
                  add r3.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 1.000000)  // S11<0:NaN:Inf,1:NaN:Inf>
                  add r4.zw, r2.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)  // S12<0:NaN:Inf,1:NaN:Inf>
                  add r5.zw, r2.zzzw, l(0.000000, 0.000000, 1.000000, 0.000000)  // S22<0:NaN:Inf,1:NaN:Inf>
                  dp2 r1.z, r3.xyxx, r3.zwzz  // Q11<0:NaN:Inf>
                
                #line 136
                  dp2 r3.x, r4.xyxx, r4.zwzz  // Q12<0:NaN:Inf>
                  dp2 r2.z, r5.xyxx, r2.zwzz  // Q21<0:NaN:Inf>
                  dp2 r2.x, r2.xyxx, r5.zwzz  // Q22<0:NaN:Inf>
                  nop 
                  mov r1.x, r1.x  // x<0:NaN:Inf>
                  mov r1.y, r1.y  // y<0:NaN:Inf>
                
                #line 86
                  mov r2.y, -r1.x
                  add r2.y, r2.y, l(1.000000)
                  mul r2.w, r2.y, r2.y
                  mul r3.y, r2.w, l(1.000000)
                  mul r3.y, r3.y, l(3.000000)
                  mul r2.y, r2.y, l(1.000000)
                  mul r2.y, r2.w, r2.y
                  mul r2.y, r2.y, l(2.000000)
                  mov r2.y, -r2.y
                  add r2.y, r2.y, r3.y
                  mul r2.w, r1.y, r1.y
                  mul r3.y, r2.w, l(1.000000)
                  mul r3.y, r3.y, l(3.000000)
                  mul r3.z, r1.y, l(1.000000)
                  mul r2.w, r2.w, r3.z
                  mul r2.w, r2.w, l(2.000000)
                  mov r2.w, -r2.w
                  add r2.w, r2.w, r3.y
                  mul r3.y, r2.w, r2.y  // SCurve11<0:NaN:Inf>
                
                #line 140
                  mul r1.z, r1.z, r3.y
                  nop 
                
                #line 84
                  mul r3.y, r1.x, r1.x
                  mul r3.z, r3.y, l(1.000000)
                  mul r3.z, r3.z, l(3.000000)
                  mul r1.x, r1.x, l(1.000000)
                  mul r1.x, r3.y, r1.x
                  mul r1.x, r1.x, l(2.000000)
                  mov r1.x, -r1.x
                  add r1.x, r1.x, r3.z
                  mul r2.w, r2.w, r1.x  // SCurve12<0:NaN:Inf>
                
                #line 140
                  mul r2.w, r2.w, r3.x
                  add r1.z, r1.z, r2.w
                  nop 
                
                #line 88
                  mov r1.y, -r1.y
                  add r1.y, r1.y, l(1.000000)
                  mul r2.w, r1.y, r1.y
                  mul r3.x, r2.w, l(1.000000)
                  mul r3.x, r3.x, l(3.000000)
                  mul r1.y, r1.y, l(1.000000)
                  mul r1.y, r2.w, r1.y
                  mul r1.y, r1.y, l(2.000000)
                  mov r1.y, -r1.y
                  add r1.y, r1.y, r3.x
                  mul r2.y, r1.y, r2.y  // SCurve21<0:NaN:Inf>
                
                #line 140
                  mul r2.y, r2.y, r2.z
                  add r1.z, r1.z, r2.y
                  nop 
                
                #line 90
                  mul r1.x, r1.y, r1.x  // SCurve22<0:NaN:Inf>
                
                #line 140
                  mul r1.x, r1.x, r2.x
                  add r1.x, r1.x, r1.z  // Q<0:NaN:Inf>
                  mov r1.x, r1.x  // SampleGradient<0:NaN:Inf>
                
                #line 20 "TextureGenerator-RidgedPerlinMix1.fx"
                  mov r1.x, r1.x  // sampledTexSP<0:NaN:Inf>
                  mul r1.x, r1.x, r1.w
                  add r0.z, r0.z, r1.x  // texSP<0:NaN:Inf>
                
                #line 15
                  iadd r0.w, r0.w, l(1)  // i<0>
                endloop 
                
                #line 24
                nop 
                mov r0.y, r0.y  // tex<0:NaN:Inf>
                
                #line 73 "TextureGenerator-Utilities.fx"
                add r0.x, r0.y, l(0.500000)
                mul r0.x, r0.x, l(2.000000)  // tex<0:NaN:Inf>
                
                #line 77
                mul r0.x, r0.x, l(0.400000)
                add r0.x, r0.x, l(0.600000)  // tex<0:NaN:Inf>
                mov r0.x, r0.x  // ScaleRidged<0:NaN:Inf>
                
                #line 24 "TextureGenerator-RidgedPerlinMix1.fx"
                mov r0.x, r0.x  // texR<0:NaN:Inf>
                nop 
                mov r0.z, r0.z  // tex<0:NaN:Inf>
                
                #line 54 "TextureGenerator-Utilities.fx"
                add r0.y, r0.z, l(0.500000)  // tex<0:NaN:Inf>
                
                #line 58
                mul r0.y, r0.y, l(0.300000)
                add r0.y, r0.y, l(0.000000)  // tex<0:NaN:Inf>
                mov r0.y, r0.y  // ScalePerlin<0:NaN:Inf>
                
                #line 25 "TextureGenerator-RidgedPerlinMix1.fx"
                mov r0.y, r0.y  // texSP<0:NaN:Inf>
                
                #line 28
                nop 
                itof r0.zw, vThreadID.xxxy
                mul r1.x, cb0[0].x, l(0.800000)
                mul r1.y, cb0[1].x, l(0.800000)
                add r0.zw, r0.zzzw, r1.xxxy  // coords<0:[-2.72226e+038f,2.72226e+038f],1:[-2.72226e+038f,2.72226e+038f]>
                
                #line 95 "TextureGenerator-Utilities.fx"
                mul r1.x, r0.z, cb0[0].x
                mov r1.y, -r1.x
                ge r1.x, r1.x, r1.y
                mov r1.y, -cb0[0].x
                movc r1.x, r1.x, cb0[0].x, r1.y
                div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
                mul r0.z, r0.z, r1.y
                frc r0.z, r0.z
                mul r1.x, r0.z, r1.x  // coords<0:NaN>
                mul r0.z, r0.w, cb0[1].x
                mov r1.z, -r0.z
                ge r0.z, r0.z, r1.z
                mov r1.z, -cb0[1].x
                movc r0.z, r0.z, cb0[1].x, r1.z
                div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
                mul r0.w, r0.w, r1.z
                frc r0.w, r0.w
                mul r1.y, r0.w, r0.z  // coords<1:NaN>
                iadd r0.z, cb0[3].x, l(-1)
                iadd r0.w, cb0[4].x, l(-1)
                utof r2.x, r0.z  // grid<0:[0f,4.29497e+009f]>
                utof r2.y, r0.w  // grid<1:[0f,4.29497e+009f]>
                mov r3.x, cb0[0].x
                mov r3.y, cb0[1].x
                div r0.zw, r3.xxxy, r2.xxxy  // textelsPerCell<0:NaN:Inf,1:NaN:Inf>
                div r0.zw, r1.xxxy, r0.zzzw  // gridCoords<0:NaN:Inf,1:NaN:Inf>
                
                #line 102
                ftoi r1.zw, r0.zzzw  // upperLeft<0,1>
                
                #line 105
                itof r2.x, r1.z
                eq r2.x, r0.z, r2.x
                ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), r1.x
                and r1.x, r1.x, r2.x
                if_nz r1.x
                  iadd r1.z, r1.z, l(-1)  // upperLeft<0>
                endif 
                itof r1.x, r1.w
                eq r1.x, r0.w, r1.x
                ne r1.y, l(0.000000, 0.000000, 0.000000, 0.000000), r1.y
                and r1.x, r1.y, r1.x
                if_nz r1.x
                  iadd r1.w, r1.w, l(-1)  // upperLeft<1>
                endif 
                itof r1.x, r1.z
                itof r1.y, r1.w
                mov r1.xy, -r1.xyxx
                add r0.zw, r0.zzzw, r1.xxxy  // frac<0:NaN:Inf,1:NaN:Inf>
                
                #line 125
                imul null, r1.x, r1.w, l(2)
                imad r1.y, r1.w, l(2), l(2)
                imad r2.x, r1.z, l(18), r1.y
                mov r3.x, cb0[r2.x + 5].x  // G11<0>
                mov r3.y, cb0[r2.x + 6].x  // G11<1>
                imad r2.x, r1.z, l(18), l(18)
                iadd r1.y, r2.x, r1.y
                mov r4.x, cb0[r1.y + 5].x  // G12<0>
                mov r4.y, cb0[r1.y + 6].x  // G12<1>
                imad r1.x, r1.z, l(18), r1.x
                mov r5.x, cb0[r1.x + 5].x  // G21<0>
                mov r5.y, cb0[r1.x + 6].x  // G21<1>
                imad r1.x, r1.w, l(2), r2.x
                mov r2.x, cb0[r1.x + 5].x  // G22<0>
                mov r2.y, cb0[r1.x + 6].x  // G22<1>
                mov r1.xy, -r0.zwzz
                add r1.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 1.000000)  // S11<0:NaN:Inf,1:NaN:Inf>
                add r2.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)  // S12<0:NaN:Inf,1:NaN:Inf>
                add r3.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 0.000000)  // S22<0:NaN:Inf,1:NaN:Inf>
                dp2 r1.z, r3.xyxx, r1.zwzz  // Q11<0:NaN:Inf>
                
                #line 136
                dp2 r1.w, r4.xyxx, r2.zwzz  // Q12<0:NaN:Inf>
                dp2 r1.x, r5.xyxx, r1.xyxx  // Q21<0:NaN:Inf>
                dp2 r1.y, r2.xyxx, r3.zwzz  // Q22<0:NaN:Inf>
                nop 
                mov r0.z, r0.z  // x<0:NaN:Inf>
                mov r0.w, r0.w  // y<0:NaN:Inf>
                
                #line 86
                mov r2.x, -r0.z
                add r2.x, r2.x, l(1.000000)
                mul r2.y, r2.x, r2.x
                mul r2.z, r2.y, l(1.000000)
                mul r2.z, r2.z, l(3.000000)
                mul r2.x, r2.x, l(1.000000)
                mul r2.x, r2.y, r2.x
                mul r2.x, r2.x, l(2.000000)
                mov r2.x, -r2.x
                add r2.x, r2.x, r2.z
                mul r2.y, r0.w, r0.w
                mul r2.z, r2.y, l(1.000000)
                mul r2.z, r2.z, l(3.000000)
                mul r2.w, r0.w, l(1.000000)
                mul r2.y, r2.y, r2.w
                mul r2.y, r2.y, l(2.000000)
                mov r2.y, -r2.y
                add r2.y, r2.y, r2.z
                mul r2.z, r2.y, r2.x  // SCurve11<0:NaN:Inf>
                
                #line 140
                mul r1.z, r1.z, r2.z
                nop 
                
                #line 84
                mul r2.z, r0.z, r0.z
                mul r2.w, r2.z, l(1.000000)
                mul r2.w, r2.w, l(3.000000)
                mul r0.z, r0.z, l(1.000000)
                mul r0.z, r2.z, r0.z
                mul r0.z, r0.z, l(2.000000)
                mov r0.z, -r0.z
                add r0.z, r0.z, r2.w
                mul r2.y, r2.y, r0.z  // SCurve12<0:NaN:Inf>
                
                #line 140
                mul r1.w, r1.w, r2.y
                add r1.z, r1.w, r1.z
                nop 
                
                #line 88
                mov r0.w, -r0.w
                add r0.w, r0.w, l(1.000000)
                mul r1.w, r0.w, r0.w
                mul r2.y, r1.w, l(1.000000)
                mul r2.y, r2.y, l(3.000000)
                mul r0.w, r0.w, l(1.000000)
                mul r0.w, r1.w, r0.w
                mul r0.w, r0.w, l(2.000000)
                mov r0.w, -r0.w
                add r0.w, r0.w, r2.y
                mul r1.w, r0.w, r2.x  // SCurve21<0:NaN:Inf>
                
                #line 140
                mul r1.x, r1.w, r1.x
                add r1.x, r1.x, r1.z
                nop 
                
                #line 90
                mul r0.z, r0.w, r0.z  // SCurve22<0:NaN:Inf>
                
                #line 140
                mul r0.z, r0.z, r1.y
                add r0.z, r0.z, r1.x  // Q<0:NaN:Inf>
                mov r0.z, r0.z  // SampleGradient<0:NaN:Inf>
                
                #line 28 "TextureGenerator-RidgedPerlinMix1.fx"
                mov r0.z, r0.z  // texHP<0:NaN:Inf>
                nop 
                mov r0.z, r0.z  // tex<0:NaN:Inf>
                
                #line 54 "TextureGenerator-Utilities.fx"
                add r0.z, r0.z, l(0.500000)  // tex<0:NaN:Inf>
                
                #line 58
                mul r0.z, r0.z, l(1.000000)
                add r0.z, r0.z, l(0.000000)  // tex<0:NaN:Inf>
                mov r0.z, r0.z  // ScalePerlin<0:NaN:Inf>
                
                #line 29 "TextureGenerator-RidgedPerlinMix1.fx"
                mov r0.z, r0.z  // texHP<0:NaN:Inf>
                
                #line 32
                mov r0.w, -r0.y
                add r0.x, r0.w, r0.x
                mul r0.x, r0.x, r0.z
                add r0.x, r0.x, r0.y  // tex<0:NaN:Inf>
                
                #line 36
                mov r1.xyzw, vThreadID.xyyy
                mov r0.yzw, l(0,0,0,1.000000)
                store_uav_typed u0.xyzw, r1.xyzw, r0.xyzw  // gOutput<0>
                
                #line 8
                ret 
                // Approximately 439 instruction slots used
                            
            };
        }

    }

    technique11 SphericalPerlinTech
    {
        pass P0
        {
            VertexShader = NULL;
            PixelShader = NULL;
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerOperationTexGenerator
                // {
                //
                //   float gTexDimensions[3];           // Offset:    0 Size:    36
                //   uint gSeed;                        // Offset:   36 Size:     4 [unused]
                //   float gLacunarity;                 // Offset:   40 Size:     4
                //   uint gOctaves;                     // Offset:   44 Size:     4
                //   uint gGradientsToUse[2];           // Offset:   48 Size:    20 [unused]
                //   float gGradients[162];             // Offset:   80 Size:  2580 [unused]
                //   uint g3DGradientsToUse[3];         // Offset: 2672 Size:    36
                //   float g3DGradients[375];           // Offset: 2720 Size:  5988
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gOutput                               UAV  float4          2d    0        1
                // cbPerOperationTexGenerator        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[545], dynamicIndexed
                dcl_uav_typed_texture2d (float,float,float,float) u0
                dcl_input vThreadID.xy
                dcl_temps 19
                dcl_thread_group 256, 1, 1
                
                #line 28 "TextureGenerator-PerlinNoise.fx"
                itof r0.x, vThreadID.x
                div r0.x, r0.x, cb0[0].x
                mul r0.x, r0.x, l(3.141593)
                mul r0.x, r0.x, l(2.000000)  // theta<0:NaN:Inf>
                itof r0.y, vThreadID.y
                div r0.y, r0.y, cb0[1].x
                mul r0.y, r0.y, l(3.141593)  // phi<0:NaN:Inf>
                sincos r0.z, null, r0.x
                mul r0.z, r0.z, l(0.900000)
                sincos r0.w, null, r0.y
                mul r1.x, r0.w, r0.z  // cartesian<0:NaN>
                sincos null, r0.y, r0.y
                mul r1.y, r0.y, l(0.900000)  // cartesian<1:NaN>
                sincos null, r0.x, r0.x
                mul r0.x, r0.x, l(0.900000)
                mul r1.z, r0.w, r0.x  // cartesian<2:NaN>
                add r0.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // cartesian<0:NaN,1:NaN,2:NaN>
                
                #line 35
                mov r0.w, l(0)  // tex<0: -0f>
                mov r1.x, r0.w  // tex<0:NaN:Inf>
                mov r1.y, r0.w  // i<0>
                loop 
                  ult r1.z, r1.y, cb0[2].w
                  breakc_z r1.z
                  nop 
                  mov r1.z, -cb0[2].z
                  max r1.z, r1.z, cb0[2].z
                  utof r1.w, r1.y
                  log r1.z, r1.z
                  mul r1.z, r1.z, r1.w
                  exp r1.z, r1.z
                  mul r2.xyz, r0.xyzx, r1.zzzz  // coords<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163 "TextureGenerator-Utilities.fx"
                  mul r1.z, r2.x, l(1.000000)
                  mov r2.w, -r1.z
                  ge r1.z, r1.z, r2.w
                  movc r1.z, r1.z, l(1.000000), l(-1.000000)
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
                  mul r2.x, r2.w, r2.x
                  frc r2.x, r2.x
                  mul r3.x, r1.z, r2.x  // coords<0:NaN>
                  mul r1.z, r2.y, l(1.000000)
                  mov r2.x, -r1.z
                  ge r1.z, r1.z, r2.x
                  movc r1.z, r1.z, l(1.000000), l(-1.000000)
                  div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
                  mul r2.x, r2.x, r2.y
                  frc r2.x, r2.x
                  mul r3.y, r1.z, r2.x  // coords<1:NaN>
                  mul r1.z, r2.z, l(1.000000)
                  mov r2.x, -r1.z
                  ge r1.z, r1.z, r2.x
                  movc r1.z, r1.z, l(1.000000), l(-1.000000)
                  div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
                  mul r2.x, r2.x, r2.z
                  frc r2.x, r2.x
                  mul r3.z, r1.z, r2.x  // coords<2:NaN>
                  iadd r1.z, cb0[167].x, l(-1)
                  iadd r2.x, cb0[168].x, l(-1)
                  iadd r2.y, cb0[169].x, l(-1)
                  utof r4.x, r1.z  // space<0:[0f,4.29497e+009f]>
                  utof r4.y, r2.x  // space<1:[0f,4.29497e+009f]>
                  utof r4.z, r2.y  // space<2:[0f,4.29497e+009f]>
                  div r2.xyz, l(1.000000, 1.000000, 1.000000, 0.000000), r4.xyzx  // boxDimensions<0:Inf:[2.32831e-010f,1.#INFf],1:Inf:[2.32831e-010f,1.#INFf],2:Inf:[2.32831e-010f,1.#INFf]>
                  div r2.xyz, r3.xyzx, r2.xyzx  // gridCoords<0:NaN,1:NaN,2:NaN>
                
                #line 170
                  ftoi r4.xyz, r2.xyzx  // upperLeftBack<0,1,2>
                
                #line 173
                  itof r1.z, r4.x
                  eq r1.z, r2.x, r1.z
                  ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), r3.x
                  and r1.z, r1.z, r2.w
                  if_nz r1.z
                    iadd r4.x, r4.x, l(-1)  // upperLeftBack<0>
                  endif 
                  itof r1.z, r4.y
                  eq r1.z, r2.y, r1.z
                  ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), r3.y
                  and r1.z, r1.z, r2.w
                  if_nz r1.z
                    iadd r4.y, r4.y, l(-1)  // upperLeftBack<1>
                  endif 
                  itof r1.z, r4.z
                  eq r1.z, r2.z, r1.z
                  ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), r3.z
                  and r1.z, r1.z, r2.w
                  if_nz r1.z
                    iadd r4.z, r4.z, l(-1)  // upperLeftBack<2>
                  endif 
                  mov r4.x, r4.x  // p221<0>
                  mov r4.y, r4.y  // p221<1>
                  mov r4.z, r4.z  // p221<2>
                  itof r3.x, r4.x
                  itof r3.y, r4.y
                  itof r3.z, r4.z
                  mov r3.xyz, -r3.xyzx
                  add r2.xyz, r2.xyzx, r3.xyzx  // frac<0:NaN,1:NaN,2:NaN>
                
                #line 197
                  nop 
                  itof r1.z, r4.x  // x<0:[-2.14748e+009f,2.14748e+009f]>
                  itof r2.w, r4.y  // y<0:[-2.14748e+009f,2.14748e+009f]>
                  itof r3.x, r4.z  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r3.x, r3.x
                  ftou r2.w, r2.w
                  ftou r1.z, r1.z
                  imul null, r2.w, r2.w, l(15)
                  imad r3.y, r1.z, l(75), r2.w
                  imad r3.z, r3.x, l(3), r3.y
                  mov r5.x, cb0[r3.z + 170].x  // Get3DGradients<0>
                  mov r5.y, cb0[r3.z + 171].x  // Get3DGradients<1>
                  mov r5.z, cb0[r3.z + 172].x  // Get3DGradients<2>
                
                #line 197
                  mov r5.xyz, r5.xyzx  // G221<0,1,2>
                  nop 
                  iadd r3.z, r4.x, l(1)
                  itof r3.z, r3.z  // x<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r3.z, r3.z
                  imad r2.w, r3.z, l(75), r2.w
                  imad r3.w, r3.x, l(3), r2.w
                  mov r6.x, cb0[r3.w + 170].x  // Get3DGradients<0>
                  mov r6.y, cb0[r3.w + 171].x  // Get3DGradients<1>
                  mov r6.z, cb0[r3.w + 172].x  // Get3DGradients<2>
                
                #line 198
                  mov r6.xyz, r6.xyzx  // G222<0,1,2>
                  nop 
                  iadd r3.w, r4.y, l(1)
                  itof r3.w, r3.w  // y<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r3.w, r3.w
                  imul null, r3.w, r3.w, l(15)
                  imad r1.z, r1.z, l(75), r3.w
                  imad r4.x, r3.x, l(3), r1.z
                  mov r7.x, cb0[r4.x + 170].x  // Get3DGradients<0>
                  mov r7.y, cb0[r4.x + 171].x  // Get3DGradients<1>
                  mov r7.z, cb0[r4.x + 172].x  // Get3DGradients<2>
                
                #line 199
                  mov r7.xyz, r7.xyzx  // G211<0,1,2>
                  nop 
                
                #line 158
                  imad r3.z, r3.z, l(75), r3.w
                  imad r3.x, r3.x, l(3), r3.z
                  mov r8.x, cb0[r3.x + 170].x  // Get3DGradients<0>
                  mov r8.y, cb0[r3.x + 171].x  // Get3DGradients<1>
                  mov r8.z, cb0[r3.x + 172].x  // Get3DGradients<2>
                
                #line 200
                  mov r8.xyz, r8.xyzx  // G212<0,1,2>
                
                #line 203
                  nop 
                  iadd r3.x, r4.z, l(1)
                  itof r3.x, r3.x  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r3.x, r3.x
                  imad r3.y, r3.x, l(3), r3.y
                  mov r4.x, cb0[r3.y + 170].x  // Get3DGradients<0>
                  mov r4.y, cb0[r3.y + 171].x  // Get3DGradients<1>
                  mov r4.z, cb0[r3.y + 172].x  // Get3DGradients<2>
                
                #line 203
                  mov r4.xyz, r4.xyzx  // G121<0,1,2>
                  nop 
                
                #line 158
                  imad r2.w, r3.x, l(3), r2.w
                  mov r9.x, cb0[r2.w + 170].x  // Get3DGradients<0>
                  mov r9.y, cb0[r2.w + 171].x  // Get3DGradients<1>
                  mov r9.z, cb0[r2.w + 172].x  // Get3DGradients<2>
                
                #line 204
                  mov r9.xyz, r9.xyzx  // G122<0,1,2>
                  nop 
                
                #line 158
                  imad r1.z, r3.x, l(3), r1.z
                  mov r10.x, cb0[r1.z + 170].x  // Get3DGradients<0>
                  mov r10.y, cb0[r1.z + 171].x  // Get3DGradients<1>
                  mov r10.z, cb0[r1.z + 172].x  // Get3DGradients<2>
                
                #line 205
                  mov r10.xyz, r10.xyzx  // G111<0,1,2>
                  nop 
                
                #line 158
                  imad r1.z, r3.x, l(3), r3.z
                  mov r3.x, cb0[r1.z + 170].x  // Get3DGradients<0>
                  mov r3.y, cb0[r1.z + 171].x  // Get3DGradients<1>
                  mov r3.z, cb0[r1.z + 172].x  // Get3DGradients<2>
                
                #line 206
                  mov r3.xyz, r3.xyzx  // G112<0,1,2>
                
                #line 209
                  mov r11.xyz, -r2.xyzx  // S221<0:NaN,1:NaN,2:NaN>
                  add r12.xyz, r11.xyzx, l(1.000000, 0.000000, 0.000000, 0.000000)  // S222<0:NaN,1:NaN,2:NaN>
                  add r13.xyz, r11.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)  // S211<0:NaN,1:NaN,2:NaN>
                  add r14.xyz, r11.xyzx, l(1.000000, 1.000000, 0.000000, 0.000000)  // S212<0:NaN,1:NaN,2:NaN>
                
                #line 215
                  add r15.xyz, r11.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)  // S121<0:NaN,1:NaN,2:NaN>
                  add r16.xyz, r11.xyzx, l(1.000000, 0.000000, 1.000000, 0.000000)  // S122<0:NaN,1:NaN,2:NaN>
                  add r17.xyz, r11.xyzx, l(0.000000, 1.000000, 1.000000, 0.000000)  // S111<0:NaN,1:NaN,2:NaN>
                  add r18.xyz, r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // S112<0:NaN,1:NaN,2:NaN>
                
                #line 222
                  dp3 r1.z, r5.xyzx, r11.xyzx  // Q221<0:NaN:Inf>
                  dp3 r2.w, r6.xyzx, r12.xyzx  // Q222<0:NaN:Inf>
                  dp3 r3.w, r7.xyzx, r13.xyzx  // Q211<0:NaN:Inf>
                  dp3 r4.w, r8.xyzx, r14.xyzx  // Q212<0:NaN:Inf>
                
                #line 228
                  dp3 r4.x, r4.xyzx, r15.xyzx  // Q121<0:NaN:Inf>
                  dp3 r4.y, r9.xyzx, r16.xyzx  // Q122<0:NaN:Inf>
                  dp3 r4.z, r10.xyzx, r17.xyzx  // Q111<0:NaN:Inf>
                  dp3 r3.x, r3.xyzx, r18.xyzx  // Q112<0:NaN:Inf>
                
                #line 235
                  nop 
                  mov r2.xyz, r2.xyzx  // pt<0:NaN,1:NaN,2:NaN>
                
                #line 156
                  mov r3.y, -r2.x
                  add r3.y, r3.y, l(1.000000)
                  mul r3.z, r3.y, r3.y
                  mul r5.x, r3.z, l(1.000000)
                  mul r5.x, r5.x, l(3.000000)
                  mul r3.y, r3.y, l(1.000000)
                  mul r3.y, r3.z, r3.y
                  mul r3.y, r3.y, l(2.000000)
                  mov r3.y, -r3.y
                  add r3.y, r3.y, r5.x
                  mov r3.z, -r2.y
                  add r3.z, r3.z, l(1.000000)
                  mul r5.x, r3.z, r3.z
                  mul r5.y, r5.x, l(1.000000)
                  mul r5.y, r5.y, l(3.000000)
                  mul r3.z, r3.z, l(1.000000)
                  mul r3.z, r5.x, r3.z
                  mul r3.z, r3.z, l(2.000000)
                  mov r3.z, -r3.z
                  add r3.z, r3.z, r5.y
                  mul r5.x, r3.z, r3.y
                  mov r5.y, -r2.z
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.y
                  mul r5.w, r5.z, l(1.000000)
                  mul r5.w, r5.w, l(3.000000)
                  mul r5.y, r5.y, l(1.000000)
                  mul r5.y, r5.z, r5.y
                  mul r5.y, r5.y, l(2.000000)
                  mov r5.y, -r5.y
                  add r5.y, r5.y, r5.w
                  mul r5.z, r5.y, r5.x  // SCurve221<0:NaN:Inf>
                
                #line 235
                  mul r1.z, r1.z, r5.z
                  nop 
                
                #line 155
                  mul r5.z, r2.x, r2.x
                  mul r5.w, r5.z, l(1.000000)
                  mul r5.w, r5.w, l(3.000000)
                  mul r2.x, r2.x, l(1.000000)
                  mul r2.x, r5.z, r2.x
                  mul r2.x, r2.x, l(2.000000)
                  mov r2.x, -r2.x
                  add r2.x, r2.x, r5.w
                  mul r3.z, r3.z, r2.x
                  mul r5.z, r5.y, r3.z  // SCurve222<0:NaN:Inf>
                
                #line 235
                  mul r2.w, r2.w, r5.z
                  add r1.z, r1.z, r2.w
                  nop 
                
                #line 154
                  mul r2.w, r2.y, r2.y
                  mul r5.z, r2.w, l(1.000000)
                  mul r5.z, r5.z, l(3.000000)
                  mul r2.y, r2.y, l(1.000000)
                  mul r2.y, r2.w, r2.y
                  mul r2.y, r2.y, l(2.000000)
                  mov r2.y, -r2.y
                  add r2.y, r2.y, r5.z
                  mul r2.w, r2.y, r3.y
                  mul r3.y, r5.y, r2.w  // SCurve211<0:NaN:Inf>
                
                #line 235
                  mul r3.y, r3.w, r3.y
                  add r1.z, r1.z, r3.y
                  nop 
                
                #line 153
                  mul r2.x, r2.y, r2.x
                  mul r2.y, r5.y, r2.x  // SCurve212<0:NaN:Inf>
                
                #line 235
                  mul r2.y, r4.w, r2.y
                  add r1.z, r1.z, r2.y
                  nop 
                
                #line 150
                  mul r2.y, r2.z, r2.z
                  mul r3.y, r2.y, l(1.000000)
                  mul r3.y, r3.y, l(3.000000)
                  mul r2.z, r2.z, l(1.000000)
                  mul r2.y, r2.y, r2.z
                  mul r2.y, r2.y, l(2.000000)
                  mov r2.y, -r2.y
                  add r2.y, r2.y, r3.y
                  mul r2.z, r2.y, r5.x  // SCurve121<0:NaN:Inf>
                
                #line 235
                  mul r2.z, r4.x, r2.z
                  add r1.z, r1.z, r2.z
                  nop 
                
                #line 149
                  mul r2.z, r2.y, r3.z  // SCurve122<0:NaN:Inf>
                
                #line 235
                  mul r2.z, r4.y, r2.z
                  add r1.z, r1.z, r2.z
                  nop 
                
                #line 148
                  mul r2.z, r2.y, r2.w  // SCurve111<0:NaN:Inf>
                
                #line 235
                  mul r2.z, r4.z, r2.z
                  add r1.z, r1.z, r2.z
                  nop 
                
                #line 147
                  mul r2.x, r2.y, r2.x  // SCurve112<0:NaN:Inf>
                
                #line 235
                  mul r2.x, r3.x, r2.x
                  add r1.z, r1.z, r2.x  // Q<0:NaN:Inf>
                  mov r1.z, r1.z  // Sample3DGradient<0:NaN:Inf>
                
                #line 38 "TextureGenerator-PerlinNoise.fx"
                  mov r1.z, r1.z  // sampledColor<0:NaN:Inf>
                  div r2.x, l(1.000000), cb0[2].z
                  mov r2.y, -r2.x
                  max r2.x, r2.y, r2.x
                  log r2.x, r2.x
                  mul r1.w, r1.w, r2.x
                  exp r1.w, r1.w
                  mul r1.z, r1.z, r1.w
                  add r1.x, r1.z, r1.x  // tex<0:NaN:Inf>
                
                #line 36
                  iadd r1.y, r1.y, l(1)  // i<0>
                endloop 
                
                #line 42
                nop 
                mov r1.x, r1.x  // tex<0:NaN:Inf>
                
                #line 54 "TextureGenerator-Utilities.fx"
                add r0.x, r1.x, l(0.500000)  // tex<0:NaN:Inf>
                
                #line 58
                mul r0.x, r0.x, l(1.000000)
                add r0.x, r0.x, l(0.000000)  // tex<0:NaN:Inf>
                mov r0.x, r0.x  // ScalePerlin<0:NaN:Inf>
                
                #line 42 "TextureGenerator-PerlinNoise.fx"
                mov r0.x, r0.x  // tex<0:NaN:Inf>
                
                #line 45
                mov r1.xyzw, vThreadID.xyyy
                mov r0.yzw, l(0,0,0,1.000000)
                store_uav_typed u0.xyzw, r1.xyzw, r0.xyzw  // gOutput<0>
                
                #line 24
                ret 
                // Approximately 292 instruction slots used
                            
            };
        }

    }

    technique11 SphericalRidgedTech
    {
        pass P0
        {
            VertexShader = NULL;
            PixelShader = NULL;
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerOperationTexGenerator
                // {
                //
                //   float gTexDimensions[3];           // Offset:    0 Size:    36
                //   uint gSeed;                        // Offset:   36 Size:     4 [unused]
                //   float gLacunarity;                 // Offset:   40 Size:     4
                //   uint gOctaves;                     // Offset:   44 Size:     4
                //   uint gGradientsToUse[2];           // Offset:   48 Size:    20 [unused]
                //   float gGradients[162];             // Offset:   80 Size:  2580 [unused]
                //   uint g3DGradientsToUse[3];         // Offset: 2672 Size:    36
                //   float g3DGradients[375];           // Offset: 2720 Size:  5988
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gOutput                               UAV  float4          2d    0        1
                // cbPerOperationTexGenerator        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[545], dynamicIndexed
                dcl_uav_typed_texture2d (float,float,float,float) u0
                dcl_input vThreadID.xy
                dcl_temps 19
                dcl_thread_group 256, 1, 1
                
                #line 29 "TextureGenerator-RidgedMultifractal.fx"
                itof r0.x, vThreadID.x
                div r0.x, r0.x, cb0[0].x
                mul r0.x, r0.x, l(3.141593)
                mul r0.x, r0.x, l(2.000000)  // theta<0:NaN:Inf>
                itof r0.y, vThreadID.y
                div r0.y, r0.y, cb0[1].x
                mul r0.y, r0.y, l(3.141593)  // phi<0:NaN:Inf>
                sincos r0.z, null, r0.x
                mul r0.z, r0.z, l(0.900000)
                sincos r0.w, null, r0.y
                mul r1.x, r0.w, r0.z  // cartesian<0:NaN>
                sincos null, r0.y, r0.y
                mul r1.y, r0.y, l(0.900000)  // cartesian<1:NaN>
                sincos null, r0.x, r0.x
                mul r0.x, r0.x, l(0.900000)
                mul r1.z, r0.w, r0.x  // cartesian<2:NaN>
                add r0.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // cartesian<0:NaN,1:NaN,2:NaN>
                
                #line 36
                mov r0.w, l(0)  // tex<0: -0f>
                mov r1.x, r0.w  // tex<0:NaN:Inf>
                mov r1.y, r0.w  // i<0>
                loop 
                  ult r1.z, r1.y, cb0[2].w
                  breakc_z r1.z
                  nop 
                  mov r1.z, -cb0[2].z
                  max r1.z, r1.z, cb0[2].z
                  utof r1.w, r1.y
                  log r1.z, r1.z
                  mul r1.z, r1.z, r1.w
                  exp r1.z, r1.z
                  mul r2.xyz, r0.xyzx, r1.zzzz  // coords<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163 "TextureGenerator-Utilities.fx"
                  mul r1.z, r2.x, l(1.000000)
                  mov r2.w, -r1.z
                  ge r1.z, r1.z, r2.w
                  movc r1.z, r1.z, l(1.000000), l(-1.000000)
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
                  mul r2.x, r2.w, r2.x
                  frc r2.x, r2.x
                  mul r3.x, r1.z, r2.x  // coords<0:NaN>
                  mul r1.z, r2.y, l(1.000000)
                  mov r2.x, -r1.z
                  ge r1.z, r1.z, r2.x
                  movc r1.z, r1.z, l(1.000000), l(-1.000000)
                  div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
                  mul r2.x, r2.x, r2.y
                  frc r2.x, r2.x
                  mul r3.y, r1.z, r2.x  // coords<1:NaN>
                  mul r1.z, r2.z, l(1.000000)
                  mov r2.x, -r1.z
                  ge r1.z, r1.z, r2.x
                  movc r1.z, r1.z, l(1.000000), l(-1.000000)
                  div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
                  mul r2.x, r2.x, r2.z
                  frc r2.x, r2.x
                  mul r3.z, r1.z, r2.x  // coords<2:NaN>
                  iadd r1.z, cb0[167].x, l(-1)
                  iadd r2.x, cb0[168].x, l(-1)
                  iadd r2.y, cb0[169].x, l(-1)
                  utof r4.x, r1.z  // space<0:[0f,4.29497e+009f]>
                  utof r4.y, r2.x  // space<1:[0f,4.29497e+009f]>
                  utof r4.z, r2.y  // space<2:[0f,4.29497e+009f]>
                  div r2.xyz, l(1.000000, 1.000000, 1.000000, 0.000000), r4.xyzx  // boxDimensions<0:Inf:[2.32831e-010f,1.#INFf],1:Inf:[2.32831e-010f,1.#INFf],2:Inf:[2.32831e-010f,1.#INFf]>
                  div r2.xyz, r3.xyzx, r2.xyzx  // gridCoords<0:NaN,1:NaN,2:NaN>
                
                #line 170
                  ftoi r4.xyz, r2.xyzx  // upperLeftBack<0,1,2>
                
                #line 173
                  itof r1.z, r4.x
                  eq r1.z, r2.x, r1.z
                  ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), r3.x
                  and r1.z, r1.z, r2.w
                  if_nz r1.z
                    iadd r4.x, r4.x, l(-1)  // upperLeftBack<0>
                  endif 
                  itof r1.z, r4.y
                  eq r1.z, r2.y, r1.z
                  ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), r3.y
                  and r1.z, r1.z, r2.w
                  if_nz r1.z
                    iadd r4.y, r4.y, l(-1)  // upperLeftBack<1>
                  endif 
                  itof r1.z, r4.z
                  eq r1.z, r2.z, r1.z
                  ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), r3.z
                  and r1.z, r1.z, r2.w
                  if_nz r1.z
                    iadd r4.z, r4.z, l(-1)  // upperLeftBack<2>
                  endif 
                  mov r4.x, r4.x  // p221<0>
                  mov r4.y, r4.y  // p221<1>
                  mov r4.z, r4.z  // p221<2>
                  itof r3.x, r4.x
                  itof r3.y, r4.y
                  itof r3.z, r4.z
                  mov r3.xyz, -r3.xyzx
                  add r2.xyz, r2.xyzx, r3.xyzx  // frac<0:NaN,1:NaN,2:NaN>
                
                #line 197
                  nop 
                  itof r1.z, r4.x  // x<0:[-2.14748e+009f,2.14748e+009f]>
                  itof r2.w, r4.y  // y<0:[-2.14748e+009f,2.14748e+009f]>
                  itof r3.x, r4.z  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r3.x, r3.x
                  ftou r2.w, r2.w
                  ftou r1.z, r1.z
                  imul null, r2.w, r2.w, l(15)
                  imad r3.y, r1.z, l(75), r2.w
                  imad r3.z, r3.x, l(3), r3.y
                  mov r5.x, cb0[r3.z + 170].x  // Get3DGradients<0>
                  mov r5.y, cb0[r3.z + 171].x  // Get3DGradients<1>
                  mov r5.z, cb0[r3.z + 172].x  // Get3DGradients<2>
                
                #line 197
                  mov r5.xyz, r5.xyzx  // G221<0,1,2>
                  nop 
                  iadd r3.z, r4.x, l(1)
                  itof r3.z, r3.z  // x<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r3.z, r3.z
                  imad r2.w, r3.z, l(75), r2.w
                  imad r3.w, r3.x, l(3), r2.w
                  mov r6.x, cb0[r3.w + 170].x  // Get3DGradients<0>
                  mov r6.y, cb0[r3.w + 171].x  // Get3DGradients<1>
                  mov r6.z, cb0[r3.w + 172].x  // Get3DGradients<2>
                
                #line 198
                  mov r6.xyz, r6.xyzx  // G222<0,1,2>
                  nop 
                  iadd r3.w, r4.y, l(1)
                  itof r3.w, r3.w  // y<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r3.w, r3.w
                  imul null, r3.w, r3.w, l(15)
                  imad r1.z, r1.z, l(75), r3.w
                  imad r4.x, r3.x, l(3), r1.z
                  mov r7.x, cb0[r4.x + 170].x  // Get3DGradients<0>
                  mov r7.y, cb0[r4.x + 171].x  // Get3DGradients<1>
                  mov r7.z, cb0[r4.x + 172].x  // Get3DGradients<2>
                
                #line 199
                  mov r7.xyz, r7.xyzx  // G211<0,1,2>
                  nop 
                
                #line 158
                  imad r3.z, r3.z, l(75), r3.w
                  imad r3.x, r3.x, l(3), r3.z
                  mov r8.x, cb0[r3.x + 170].x  // Get3DGradients<0>
                  mov r8.y, cb0[r3.x + 171].x  // Get3DGradients<1>
                  mov r8.z, cb0[r3.x + 172].x  // Get3DGradients<2>
                
                #line 200
                  mov r8.xyz, r8.xyzx  // G212<0,1,2>
                
                #line 203
                  nop 
                  iadd r3.x, r4.z, l(1)
                  itof r3.x, r3.x  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r3.x, r3.x
                  imad r3.y, r3.x, l(3), r3.y
                  mov r4.x, cb0[r3.y + 170].x  // Get3DGradients<0>
                  mov r4.y, cb0[r3.y + 171].x  // Get3DGradients<1>
                  mov r4.z, cb0[r3.y + 172].x  // Get3DGradients<2>
                
                #line 203
                  mov r4.xyz, r4.xyzx  // G121<0,1,2>
                  nop 
                
                #line 158
                  imad r2.w, r3.x, l(3), r2.w
                  mov r9.x, cb0[r2.w + 170].x  // Get3DGradients<0>
                  mov r9.y, cb0[r2.w + 171].x  // Get3DGradients<1>
                  mov r9.z, cb0[r2.w + 172].x  // Get3DGradients<2>
                
                #line 204
                  mov r9.xyz, r9.xyzx  // G122<0,1,2>
                  nop 
                
                #line 158
                  imad r1.z, r3.x, l(3), r1.z
                  mov r10.x, cb0[r1.z + 170].x  // Get3DGradients<0>
                  mov r10.y, cb0[r1.z + 171].x  // Get3DGradients<1>
                  mov r10.z, cb0[r1.z + 172].x  // Get3DGradients<2>
                
                #line 205
                  mov r10.xyz, r10.xyzx  // G111<0,1,2>
                  nop 
                
                #line 158
                  imad r1.z, r3.x, l(3), r3.z
                  mov r3.x, cb0[r1.z + 170].x  // Get3DGradients<0>
                  mov r3.y, cb0[r1.z + 171].x  // Get3DGradients<1>
                  mov r3.z, cb0[r1.z + 172].x  // Get3DGradients<2>
                
                #line 206
                  mov r3.xyz, r3.xyzx  // G112<0,1,2>
                
                #line 209
                  mov r11.xyz, -r2.xyzx  // S221<0:NaN,1:NaN,2:NaN>
                  add r12.xyz, r11.xyzx, l(1.000000, 0.000000, 0.000000, 0.000000)  // S222<0:NaN,1:NaN,2:NaN>
                  add r13.xyz, r11.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)  // S211<0:NaN,1:NaN,2:NaN>
                  add r14.xyz, r11.xyzx, l(1.000000, 1.000000, 0.000000, 0.000000)  // S212<0:NaN,1:NaN,2:NaN>
                
                #line 215
                  add r15.xyz, r11.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)  // S121<0:NaN,1:NaN,2:NaN>
                  add r16.xyz, r11.xyzx, l(1.000000, 0.000000, 1.000000, 0.000000)  // S122<0:NaN,1:NaN,2:NaN>
                  add r17.xyz, r11.xyzx, l(0.000000, 1.000000, 1.000000, 0.000000)  // S111<0:NaN,1:NaN,2:NaN>
                  add r18.xyz, r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // S112<0:NaN,1:NaN,2:NaN>
                
                #line 222
                  dp3 r1.z, r5.xyzx, r11.xyzx  // Q221<0:NaN:Inf>
                  dp3 r2.w, r6.xyzx, r12.xyzx  // Q222<0:NaN:Inf>
                  dp3 r3.w, r7.xyzx, r13.xyzx  // Q211<0:NaN:Inf>
                  dp3 r4.w, r8.xyzx, r14.xyzx  // Q212<0:NaN:Inf>
                
                #line 228
                  dp3 r4.x, r4.xyzx, r15.xyzx  // Q121<0:NaN:Inf>
                  dp3 r4.y, r9.xyzx, r16.xyzx  // Q122<0:NaN:Inf>
                  dp3 r4.z, r10.xyzx, r17.xyzx  // Q111<0:NaN:Inf>
                  dp3 r3.x, r3.xyzx, r18.xyzx  // Q112<0:NaN:Inf>
                
                #line 235
                  nop 
                  mov r2.xyz, r2.xyzx  // pt<0:NaN,1:NaN,2:NaN>
                
                #line 156
                  mov r3.y, -r2.x
                  add r3.y, r3.y, l(1.000000)
                  mul r3.z, r3.y, r3.y
                  mul r5.x, r3.z, l(1.000000)
                  mul r5.x, r5.x, l(3.000000)
                  mul r3.y, r3.y, l(1.000000)
                  mul r3.y, r3.z, r3.y
                  mul r3.y, r3.y, l(2.000000)
                  mov r3.y, -r3.y
                  add r3.y, r3.y, r5.x
                  mov r3.z, -r2.y
                  add r3.z, r3.z, l(1.000000)
                  mul r5.x, r3.z, r3.z
                  mul r5.y, r5.x, l(1.000000)
                  mul r5.y, r5.y, l(3.000000)
                  mul r3.z, r3.z, l(1.000000)
                  mul r3.z, r5.x, r3.z
                  mul r3.z, r3.z, l(2.000000)
                  mov r3.z, -r3.z
                  add r3.z, r3.z, r5.y
                  mul r5.x, r3.z, r3.y
                  mov r5.y, -r2.z
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.y
                  mul r5.w, r5.z, l(1.000000)
                  mul r5.w, r5.w, l(3.000000)
                  mul r5.y, r5.y, l(1.000000)
                  mul r5.y, r5.z, r5.y
                  mul r5.y, r5.y, l(2.000000)
                  mov r5.y, -r5.y
                  add r5.y, r5.y, r5.w
                  mul r5.z, r5.y, r5.x  // SCurve221<0:NaN:Inf>
                
                #line 235
                  mul r1.z, r1.z, r5.z
                  nop 
                
                #line 155
                  mul r5.z, r2.x, r2.x
                  mul r5.w, r5.z, l(1.000000)
                  mul r5.w, r5.w, l(3.000000)
                  mul r2.x, r2.x, l(1.000000)
                  mul r2.x, r5.z, r2.x
                  mul r2.x, r2.x, l(2.000000)
                  mov r2.x, -r2.x
                  add r2.x, r2.x, r5.w
                  mul r3.z, r3.z, r2.x
                  mul r5.z, r5.y, r3.z  // SCurve222<0:NaN:Inf>
                
                #line 235
                  mul r2.w, r2.w, r5.z
                  add r1.z, r1.z, r2.w
                  nop 
                
                #line 154
                  mul r2.w, r2.y, r2.y
                  mul r5.z, r2.w, l(1.000000)
                  mul r5.z, r5.z, l(3.000000)
                  mul r2.y, r2.y, l(1.000000)
                  mul r2.y, r2.w, r2.y
                  mul r2.y, r2.y, l(2.000000)
                  mov r2.y, -r2.y
                  add r2.y, r2.y, r5.z
                  mul r2.w, r2.y, r3.y
                  mul r3.y, r5.y, r2.w  // SCurve211<0:NaN:Inf>
                
                #line 235
                  mul r3.y, r3.w, r3.y
                  add r1.z, r1.z, r3.y
                  nop 
                
                #line 153
                  mul r2.x, r2.y, r2.x
                  mul r2.y, r5.y, r2.x  // SCurve212<0:NaN:Inf>
                
                #line 235
                  mul r2.y, r4.w, r2.y
                  add r1.z, r1.z, r2.y
                  nop 
                
                #line 150
                  mul r2.y, r2.z, r2.z
                  mul r3.y, r2.y, l(1.000000)
                  mul r3.y, r3.y, l(3.000000)
                  mul r2.z, r2.z, l(1.000000)
                  mul r2.y, r2.y, r2.z
                  mul r2.y, r2.y, l(2.000000)
                  mov r2.y, -r2.y
                  add r2.y, r2.y, r3.y
                  mul r2.z, r2.y, r5.x  // SCurve121<0:NaN:Inf>
                
                #line 235
                  mul r2.z, r4.x, r2.z
                  add r1.z, r1.z, r2.z
                  nop 
                
                #line 149
                  mul r2.z, r2.y, r3.z  // SCurve122<0:NaN:Inf>
                
                #line 235
                  mul r2.z, r4.y, r2.z
                  add r1.z, r1.z, r2.z
                  nop 
                
                #line 148
                  mul r2.z, r2.y, r2.w  // SCurve111<0:NaN:Inf>
                
                #line 235
                  mul r2.z, r4.z, r2.z
                  add r1.z, r1.z, r2.z
                  nop 
                
                #line 147
                  mul r2.x, r2.y, r2.x  // SCurve112<0:NaN:Inf>
                
                #line 235
                  mul r2.x, r3.x, r2.x
                  add r1.z, r1.z, r2.x  // Q<0:NaN:Inf>
                  mov r1.z, r1.z  // Sample3DGradient<0:NaN:Inf>
                
                #line 39 "TextureGenerator-RidgedMultifractal.fx"
                  mov r1.z, r1.z  // sampledColor<0:NaN:Inf>
                  div r2.x, l(1.000000), cb0[2].z
                  mov r2.y, -r2.x
                  max r2.x, r2.y, r2.x
                  log r2.x, r2.x
                  mul r1.w, r1.w, r2.x
                  exp r1.w, r1.w
                  nop 
                  mov r1.z, r1.z  // tex<0:NaN:Inf>
                
                #line 65 "TextureGenerator-Utilities.fx"
                  lt r2.x, l(0.000000), r1.z
                  if_nz r2.x
                    mov r1.z, -r1.z  // tex<0:NaN:Inf>
                  endif 
                  mov r1.z, r1.z  // FilterRidged<0:NaN:Inf>
                
                #line 40 "TextureGenerator-RidgedMultifractal.fx"
                  mul r1.z, r1.z, r1.w
                  add r1.x, r1.z, r1.x  // tex<0:NaN:Inf>
                
                #line 37
                  iadd r1.y, r1.y, l(1)  // i<0>
                endloop 
                
                #line 43
                nop 
                mov r1.x, r1.x  // tex<0:NaN:Inf>
                
                #line 73 "TextureGenerator-Utilities.fx"
                add r0.x, r1.x, l(0.500000)
                mul r0.x, r0.x, l(2.000000)  // tex<0:NaN:Inf>
                
                #line 77
                mul r0.x, r0.x, l(1.000000)
                add r0.x, r0.x, l(0.000000)  // tex<0:NaN:Inf>
                mov r0.x, r0.x  // ScaleRidged<0:NaN:Inf>
                
                #line 43 "TextureGenerator-RidgedMultifractal.fx"
                mov r0.x, r0.x  // tex<0:NaN:Inf>
                
                #line 46
                mov r1.xyzw, vThreadID.xyyy
                mov r0.yzw, l(0,0,0,1.000000)
                store_uav_typed u0.xyzw, r1.xyzw, r0.xyzw  // gOutput<0>
                
                #line 25
                ret 
                // Approximately 300 instruction slots used
                            
            };
        }

    }

    technique11 SphericalRidgedPerlinMix1Tech
    {
        pass P0
        {
            VertexShader = NULL;
            PixelShader = NULL;
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerOperationTexGenerator
                // {
                //
                //   float gTexDimensions[3];           // Offset:    0 Size:    36
                //   uint gSeed;                        // Offset:   36 Size:     4 [unused]
                //   float gLacunarity;                 // Offset:   40 Size:     4
                //   uint gOctaves;                     // Offset:   44 Size:     4
                //   uint gGradientsToUse[2];           // Offset:   48 Size:    20 [unused]
                //   float gGradients[162];             // Offset:   80 Size:  2580 [unused]
                //   uint g3DGradientsToUse[3];         // Offset: 2672 Size:    36
                //   float g3DGradients[375];           // Offset: 2720 Size:  5988
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gOutput                               UAV  float4          2d    0        1
                // cbPerOperationTexGenerator        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[545], dynamicIndexed
                dcl_uav_typed_texture2d (float,float,float,float) u0
                dcl_input vThreadID.xy
                dcl_temps 20
                dcl_thread_group 256, 1, 1
                
                #line 44 "TextureGenerator-RidgedPerlinMix1.fx"
                itof r0.x, vThreadID.x
                div r0.x, r0.x, cb0[0].x
                mul r0.x, r0.x, l(3.141593)
                mul r0.x, r0.x, l(2.000000)  // theta<0:NaN:Inf>
                itof r0.y, vThreadID.y
                div r0.y, r0.y, cb0[1].x
                mul r0.y, r0.y, l(3.141593)  // phi<0:NaN:Inf>
                sincos r0.z, null, r0.x
                mul r0.z, r0.z, l(0.900000)
                sincos r0.w, null, r0.y
                mul r1.x, r0.w, r0.z  // cartesian<0:NaN>
                sincos null, r0.y, r0.y
                mul r1.y, r0.y, l(0.900000)  // cartesian<1:NaN>
                sincos null, r0.x, r0.x
                mul r0.x, r0.x, l(0.900000)
                mul r1.z, r0.w, r0.x  // cartesian<2:NaN>
                add r0.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // cartesian<0:NaN,1:NaN,2:NaN>
                
                #line 51
                mov r0.w, l(0)  // texR<0: -0f>
                
                #line 55
                mov r1.x, r0.w  // texR<0:NaN:Inf>
                mov r1.y, r0.w  // texSP<0:NaN:Inf>
                mov r1.z, r0.w  // i<0>
                loop 
                  ult r1.w, r1.z, cb0[2].w
                  breakc_z r1.w
                  nop 
                
                #line 197 "TextureGenerator-Utilities.fx"
                  nop 
                  nop 
                  nop 
                  nop 
                
                #line 203
                  nop 
                  nop 
                  nop 
                  nop 
                
                #line 235
                  nop 
                  nop 
                  nop 
                  nop 
                  nop 
                  nop 
                  nop 
                  nop 
                
                #line 59 "TextureGenerator-RidgedPerlinMix1.fx"
                  nop 
                  mov r1.w, -cb0[2].z
                  max r1.w, r1.w, cb0[2].z
                  utof r2.x, r1.z
                  log r1.w, r1.w
                  mul r1.w, r1.w, r2.x
                  exp r1.w, r1.w
                  mul r2.yzw, r0.xxyz, r1.wwww  // coords<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163 "TextureGenerator-Utilities.fx"
                  mul r3.x, r2.y, l(1.000000)
                  mov r3.y, -r3.x
                  ge r3.x, r3.x, r3.y
                  movc r3.x, r3.x, l(1.000000), l(-1.000000)
                  div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
                  mul r2.y, r2.y, r3.y
                  frc r2.y, r2.y
                  mul r3.x, r2.y, r3.x  // coords<0:NaN>
                  mul r2.y, r2.z, l(1.000000)
                  mov r3.w, -r2.y
                  ge r2.y, r2.y, r3.w
                  movc r2.y, r2.y, l(1.000000), l(-1.000000)
                  div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
                  mul r2.z, r2.z, r3.w
                  frc r2.z, r2.z
                  mul r3.y, r2.z, r2.y  // coords<1:NaN>
                  mul r2.y, r2.w, l(1.000000)
                  mov r2.z, -r2.y
                  ge r2.y, r2.y, r2.z
                  movc r2.y, r2.y, l(1.000000), l(-1.000000)
                  div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
                  mul r2.z, r2.z, r2.w
                  frc r2.z, r2.z
                  mul r3.z, r2.z, r2.y  // coords<2:NaN>
                  iadd r2.y, cb0[167].x, l(-1)
                  iadd r2.z, cb0[168].x, l(-1)
                  iadd r2.w, cb0[169].x, l(-1)
                  utof r4.x, r2.y  // space<0:[0f,4.29497e+009f]>
                  utof r4.y, r2.z  // space<1:[0f,4.29497e+009f]>
                  utof r4.z, r2.w  // space<2:[0f,4.29497e+009f]>
                  div r4.xyz, l(1.000000, 1.000000, 1.000000, 0.000000), r4.xyzx  // boxDimensions<0:Inf:[2.32831e-010f,1.#INFf],1:Inf:[2.32831e-010f,1.#INFf],2:Inf:[2.32831e-010f,1.#INFf]>
                  div r4.xyz, r3.xyzx, r4.xyzx  // gridCoords<0:NaN,1:NaN,2:NaN>
                
                #line 170
                  ftoi r5.xyz, r4.xyzx  // upperLeftBack<0,1,2>
                
                #line 173
                  itof r3.w, r5.x
                  eq r3.w, r4.x, r3.w
                  ne r3.x, l(0.000000, 0.000000, 0.000000, 0.000000), r3.x
                  and r3.x, r3.x, r3.w
                  if_nz r3.x
                    iadd r5.x, r5.x, l(-1)  // upperLeftBack<0>
                  endif 
                  itof r3.x, r5.y
                  eq r3.x, r4.y, r3.x
                  ne r3.y, l(0.000000, 0.000000, 0.000000, 0.000000), r3.y
                  and r3.x, r3.y, r3.x
                  if_nz r3.x
                    iadd r5.y, r5.y, l(-1)  // upperLeftBack<1>
                  endif 
                  itof r3.x, r5.z
                  eq r3.x, r4.z, r3.x
                  ne r3.y, l(0.000000, 0.000000, 0.000000, 0.000000), r3.z
                  and r3.x, r3.y, r3.x
                  if_nz r3.x
                    iadd r5.z, r5.z, l(-1)  // upperLeftBack<2>
                  endif 
                  mov r5.x, r5.x  // p221<0>
                  mov r5.y, r5.y  // p221<1>
                  mov r5.z, r5.z  // p221<2>
                  itof r3.x, r5.x
                  itof r3.y, r5.y
                  itof r3.z, r5.z
                  mov r3.xyz, -r3.xyzx
                  add r3.xyz, r3.xyzx, r4.xyzx  // frac<0:NaN,1:NaN,2:NaN>
                
                #line 197
                  nop 
                  itof r3.w, r5.x  // x<0:[-2.14748e+009f,2.14748e+009f]>
                  itof r4.x, r5.y  // y<0:[-2.14748e+009f,2.14748e+009f]>
                  itof r4.y, r5.z  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r4.y, r4.y
                  ftou r4.x, r4.x
                  ftou r3.w, r3.w
                  imul null, r4.x, r4.x, l(15)
                  imad r4.z, r3.w, l(75), r4.x
                  imad r4.w, r4.y, l(3), r4.z
                  mov r6.x, cb0[r4.w + 170].x  // Get3DGradients<0>
                  mov r6.y, cb0[r4.w + 171].x  // Get3DGradients<1>
                  mov r6.z, cb0[r4.w + 172].x  // Get3DGradients<2>
                
                #line 197
                  mov r6.xyz, r6.xyzx  // G221<0,1,2>
                  nop 
                  iadd r4.w, r5.x, l(1)
                  itof r4.w, r4.w  // x<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r4.w, r4.w
                  imad r4.x, r4.w, l(75), r4.x
                  imad r5.x, r4.y, l(3), r4.x
                  mov r7.x, cb0[r5.x + 170].x  // Get3DGradients<0>
                  mov r7.y, cb0[r5.x + 171].x  // Get3DGradients<1>
                  mov r7.z, cb0[r5.x + 172].x  // Get3DGradients<2>
                
                #line 198
                  mov r7.xyz, r7.xyzx  // G222<0,1,2>
                  nop 
                  iadd r5.x, r5.y, l(1)
                  itof r5.x, r5.x  // y<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r5.x, r5.x
                  imul null, r5.x, r5.x, l(15)
                  imad r3.w, r3.w, l(75), r5.x
                  imad r5.y, r4.y, l(3), r3.w
                  mov r8.x, cb0[r5.y + 170].x  // Get3DGradients<0>
                  mov r8.y, cb0[r5.y + 171].x  // Get3DGradients<1>
                  mov r8.z, cb0[r5.y + 172].x  // Get3DGradients<2>
                
                #line 199
                  mov r8.xyz, r8.xyzx  // G211<0,1,2>
                  nop 
                
                #line 158
                  imad r4.w, r4.w, l(75), r5.x
                  imad r4.y, r4.y, l(3), r4.w
                  mov r9.x, cb0[r4.y + 170].x  // Get3DGradients<0>
                  mov r9.y, cb0[r4.y + 171].x  // Get3DGradients<1>
                  mov r9.z, cb0[r4.y + 172].x  // Get3DGradients<2>
                
                #line 200
                  mov r9.xyz, r9.xyzx  // G212<0,1,2>
                
                #line 203
                  nop 
                  iadd r4.y, r5.z, l(1)
                  itof r4.y, r4.y  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r4.y, r4.y
                  imad r4.z, r4.y, l(3), r4.z
                  mov r5.x, cb0[r4.z + 170].x  // Get3DGradients<0>
                  mov r5.y, cb0[r4.z + 171].x  // Get3DGradients<1>
                  mov r5.z, cb0[r4.z + 172].x  // Get3DGradients<2>
                
                #line 203
                  mov r5.xyz, r5.xyzx  // G121<0,1,2>
                  nop 
                
                #line 158
                  imad r4.x, r4.y, l(3), r4.x
                  mov r10.x, cb0[r4.x + 170].x  // Get3DGradients<0>
                  mov r10.y, cb0[r4.x + 171].x  // Get3DGradients<1>
                  mov r10.z, cb0[r4.x + 172].x  // Get3DGradients<2>
                
                #line 204
                  mov r10.xyz, r10.xyzx  // G122<0,1,2>
                  nop 
                
                #line 158
                  imad r3.w, r4.y, l(3), r3.w
                  mov r11.x, cb0[r3.w + 170].x  // Get3DGradients<0>
                  mov r11.y, cb0[r3.w + 171].x  // Get3DGradients<1>
                  mov r11.z, cb0[r3.w + 172].x  // Get3DGradients<2>
                
                #line 205
                  mov r11.xyz, r11.xyzx  // G111<0,1,2>
                  nop 
                
                #line 158
                  imad r3.w, r4.y, l(3), r4.w
                  mov r4.x, cb0[r3.w + 170].x  // Get3DGradients<0>
                  mov r4.y, cb0[r3.w + 171].x  // Get3DGradients<1>
                  mov r4.z, cb0[r3.w + 172].x  // Get3DGradients<2>
                
                #line 206
                  mov r4.xyz, r4.xyzx  // G112<0,1,2>
                
                #line 209
                  mov r12.xyz, -r3.xyzx  // S221<0:NaN,1:NaN,2:NaN>
                  add r13.xyz, r12.xyzx, l(1.000000, 0.000000, 0.000000, 0.000000)  // S222<0:NaN,1:NaN,2:NaN>
                  add r14.xyz, r12.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)  // S211<0:NaN,1:NaN,2:NaN>
                  add r15.xyz, r12.xyzx, l(1.000000, 1.000000, 0.000000, 0.000000)  // S212<0:NaN,1:NaN,2:NaN>
                
                #line 215
                  add r16.xyz, r12.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)  // S121<0:NaN,1:NaN,2:NaN>
                  add r17.xyz, r12.xyzx, l(1.000000, 0.000000, 1.000000, 0.000000)  // S122<0:NaN,1:NaN,2:NaN>
                  add r18.xyz, r12.xyzx, l(0.000000, 1.000000, 1.000000, 0.000000)  // S111<0:NaN,1:NaN,2:NaN>
                  add r19.xyz, r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // S112<0:NaN,1:NaN,2:NaN>
                
                #line 222
                  dp3 r3.w, r6.xyzx, r12.xyzx  // Q221<0:NaN:Inf>
                  dp3 r4.w, r7.xyzx, r13.xyzx  // Q222<0:NaN:Inf>
                  dp3 r5.w, r8.xyzx, r14.xyzx  // Q211<0:NaN:Inf>
                  dp3 r6.x, r9.xyzx, r15.xyzx  // Q212<0:NaN:Inf>
                
                #line 228
                  dp3 r5.x, r5.xyzx, r16.xyzx  // Q121<0:NaN:Inf>
                  dp3 r5.y, r10.xyzx, r17.xyzx  // Q122<0:NaN:Inf>
                  dp3 r5.z, r11.xyzx, r18.xyzx  // Q111<0:NaN:Inf>
                  dp3 r4.x, r4.xyzx, r19.xyzx  // Q112<0:NaN:Inf>
                
                #line 235
                  nop 
                  mov r3.xyz, r3.xyzx  // pt<0:NaN,1:NaN,2:NaN>
                
                #line 156
                  mov r4.y, -r3.x
                  add r4.y, r4.y, l(1.000000)
                  mul r4.z, r4.y, r4.y
                  mul r6.y, r4.z, l(1.000000)
                  mul r6.y, r6.y, l(3.000000)
                  mul r4.y, r4.y, l(1.000000)
                  mul r4.y, r4.z, r4.y
                  mul r4.y, r4.y, l(2.000000)
                  mov r4.y, -r4.y
                  add r4.y, r4.y, r6.y
                  mov r4.z, -r3.y
                  add r4.z, r4.z, l(1.000000)
                  mul r6.y, r4.z, r4.z
                  mul r6.z, r6.y, l(1.000000)
                  mul r6.z, r6.z, l(3.000000)
                  mul r4.z, r4.z, l(1.000000)
                  mul r4.z, r6.y, r4.z
                  mul r4.z, r4.z, l(2.000000)
                  mov r4.z, -r4.z
                  add r4.z, r4.z, r6.z
                  mul r6.y, r4.z, r4.y
                  mov r6.z, -r3.z
                  add r6.z, r6.z, l(1.000000)
                  mul r6.w, r6.z, r6.z
                  mul r7.x, r6.w, l(1.000000)
                  mul r7.x, r7.x, l(3.000000)
                  mul r6.z, r6.z, l(1.000000)
                  mul r6.z, r6.w, r6.z
                  mul r6.z, r6.z, l(2.000000)
                  mov r6.z, -r6.z
                  add r6.z, r6.z, r7.x
                  mul r6.w, r6.z, r6.y  // SCurve221<0:NaN:Inf>
                
                #line 235
                  mul r3.w, r3.w, r6.w
                  nop 
                
                #line 155
                  mul r6.w, r3.x, r3.x
                  mul r7.x, r6.w, l(1.000000)
                  mul r7.x, r7.x, l(3.000000)
                  mul r3.x, r3.x, l(1.000000)
                  mul r3.x, r6.w, r3.x
                  mul r3.x, r3.x, l(2.000000)
                  mov r3.x, -r3.x
                  add r3.x, r3.x, r7.x
                  mul r4.z, r4.z, r3.x
                  mul r6.w, r6.z, r4.z  // SCurve222<0:NaN:Inf>
                
                #line 235
                  mul r4.w, r4.w, r6.w
                  add r3.w, r3.w, r4.w
                  nop 
                
                #line 154
                  mul r4.w, r3.y, r3.y
                  mul r6.w, r4.w, l(1.000000)
                  mul r6.w, r6.w, l(3.000000)
                  mul r3.y, r3.y, l(1.000000)
                  mul r3.y, r4.w, r3.y
                  mul r3.y, r3.y, l(2.000000)
                  mov r3.y, -r3.y
                  add r3.y, r3.y, r6.w
                  mul r4.y, r3.y, r4.y
                  mul r4.w, r6.z, r4.y  // SCurve211<0:NaN:Inf>
                
                #line 235
                  mul r4.w, r5.w, r4.w
                  add r3.w, r3.w, r4.w
                  nop 
                
                #line 153
                  mul r3.x, r3.y, r3.x
                  mul r3.y, r6.z, r3.x  // SCurve212<0:NaN:Inf>
                
                #line 235
                  mul r3.y, r6.x, r3.y
                  add r3.y, r3.y, r3.w
                  nop 
                
                #line 150
                  mul r3.w, r3.z, r3.z
                  mul r4.w, r3.w, l(1.000000)
                  mul r4.w, r4.w, l(3.000000)
                  mul r3.z, r3.z, l(1.000000)
                  mul r3.z, r3.w, r3.z
                  mul r3.z, r3.z, l(2.000000)
                  mov r3.z, -r3.z
                  add r3.z, r3.z, r4.w
                  mul r3.w, r3.z, r6.y  // SCurve121<0:NaN:Inf>
                
                #line 235
                  mul r3.w, r5.x, r3.w
                  add r3.y, r3.w, r3.y
                  nop 
                
                #line 149
                  mul r3.w, r3.z, r4.z  // SCurve122<0:NaN:Inf>
                
                #line 235
                  mul r3.w, r5.y, r3.w
                  add r3.y, r3.w, r3.y
                  nop 
                
                #line 148
                  mul r3.w, r3.z, r4.y  // SCurve111<0:NaN:Inf>
                
                #line 235
                  mul r3.w, r5.z, r3.w
                  add r3.y, r3.w, r3.y
                  nop 
                
                #line 147
                  mul r3.x, r3.z, r3.x  // SCurve112<0:NaN:Inf>
                
                #line 235
                  mul r3.x, r4.x, r3.x
                  add r3.x, r3.x, r3.y  // Q<0:NaN:Inf>
                  mov r3.x, r3.x  // Sample3DGradient<0:NaN:Inf>
                
                #line 59 "TextureGenerator-RidgedPerlinMix1.fx"
                  mov r3.x, r3.x  // sampledTexR<0:NaN:Inf>
                  div r3.y, l(1.000000), cb0[2].z
                  mov r3.z, -r3.y
                  max r3.y, r3.z, r3.y
                  log r3.y, r3.y
                  mul r2.x, r2.x, r3.y
                  exp r2.x, r2.x
                  nop 
                  mov r3.x, r3.x  // tex<0:NaN:Inf>
                
                #line 65 "TextureGenerator-Utilities.fx"
                  lt r3.y, l(0.000000), r3.x
                  if_nz r3.y
                    mov r3.x, -r3.x  // tex<0:NaN:Inf>
                  endif 
                  mov r3.x, r3.x  // FilterRidged<0:NaN:Inf>
                
                #line 60 "TextureGenerator-RidgedPerlinMix1.fx"
                  mul r3.x, r2.x, r3.x
                  add r1.x, r1.x, r3.x  // texR<0:NaN:Inf>
                  nop 
                  mul r3.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                  add r3.xyz, r3.xyzx, l(0.300000, 0.300000, 0.300000, 0.000000)
                  mul r3.xyz, r1.wwww, r3.xyzx  // coords<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163 "TextureGenerator-Utilities.fx"
                  mul r1.w, r3.x, l(1.000000)
                  mov r3.w, -r1.w
                  ge r1.w, r1.w, r3.w
                  movc r1.w, r1.w, l(1.000000), l(-1.000000)
                  div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
                  mul r3.x, r3.w, r3.x
                  frc r3.x, r3.x
                  mul r4.x, r1.w, r3.x  // coords<0:NaN>
                  mul r1.w, r3.y, l(1.000000)
                  mov r3.x, -r1.w
                  ge r1.w, r1.w, r3.x
                  movc r1.w, r1.w, l(1.000000), l(-1.000000)
                  div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
                  mul r3.x, r3.x, r3.y
                  frc r3.x, r3.x
                  mul r4.y, r1.w, r3.x  // coords<1:NaN>
                  mul r1.w, r3.z, l(1.000000)
                  mov r3.x, -r1.w
                  ge r1.w, r1.w, r3.x
                  movc r1.w, r1.w, l(1.000000), l(-1.000000)
                  div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
                  mul r3.x, r3.x, r3.z
                  frc r3.x, r3.x
                  mul r4.z, r1.w, r3.x  // coords<2:NaN>
                  utof r3.x, r2.y  // space<0:[0f,4.29497e+009f]>
                  utof r3.y, r2.z  // space<1:[0f,4.29497e+009f]>
                  utof r3.z, r2.w  // space<2:[0f,4.29497e+009f]>
                  div r2.yzw, l(0.000000, 1.000000, 1.000000, 1.000000), r3.xxyz  // boxDimensions<0:Inf:[2.32831e-010f,1.#INFf],1:Inf:[2.32831e-010f,1.#INFf],2:Inf:[2.32831e-010f,1.#INFf]>
                  div r2.yzw, r4.xxyz, r2.yyzw  // gridCoords<0:NaN,1:NaN,2:NaN>
                
                #line 170
                  ftoi r3.xyz, r2.yzwy  // upperLeftBack<0,1,2>
                
                #line 173
                  itof r1.w, r3.x
                  eq r1.w, r2.y, r1.w
                  ne r3.w, l(0.000000, 0.000000, 0.000000, 0.000000), r4.x
                  and r1.w, r1.w, r3.w
                  if_nz r1.w
                    iadd r3.x, r3.x, l(-1)  // upperLeftBack<0>
                  endif 
                  itof r1.w, r3.y
                  eq r1.w, r2.z, r1.w
                  ne r3.w, l(0.000000, 0.000000, 0.000000, 0.000000), r4.y
                  and r1.w, r1.w, r3.w
                  if_nz r1.w
                    iadd r3.y, r3.y, l(-1)  // upperLeftBack<1>
                  endif 
                  itof r1.w, r3.z
                  eq r1.w, r2.w, r1.w
                  ne r3.w, l(0.000000, 0.000000, 0.000000, 0.000000), r4.z
                  and r1.w, r1.w, r3.w
                  if_nz r1.w
                    iadd r3.z, r3.z, l(-1)  // upperLeftBack<2>
                  endif 
                  mov r3.x, r3.x  // p221<0>
                  mov r3.y, r3.y  // p221<1>
                  mov r3.z, r3.z  // p221<2>
                  itof r4.x, r3.x
                  itof r4.y, r3.y
                  itof r4.z, r3.z
                  mov r4.xyz, -r4.xyzx
                  add r2.yzw, r2.yyzw, r4.xxyz  // frac<0:NaN,1:NaN,2:NaN>
                
                #line 197
                  nop 
                  itof r1.w, r3.x  // x<0:[-2.14748e+009f,2.14748e+009f]>
                  itof r3.w, r3.y  // y<0:[-2.14748e+009f,2.14748e+009f]>
                  itof r4.x, r3.z  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r4.x, r4.x
                  ftou r3.w, r3.w
                  ftou r1.w, r1.w
                  imul null, r3.w, r3.w, l(15)
                  imad r4.y, r1.w, l(75), r3.w
                  imad r4.z, r4.x, l(3), r4.y
                  mov r5.x, cb0[r4.z + 170].x  // Get3DGradients<0>
                  mov r5.y, cb0[r4.z + 171].x  // Get3DGradients<1>
                  mov r5.z, cb0[r4.z + 172].x  // Get3DGradients<2>
                
                #line 197
                  mov r5.xyz, r5.xyzx  // G221<0,1,2>
                  nop 
                  iadd r3.x, r3.x, l(1)
                  itof r3.x, r3.x  // x<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r3.x, r3.x
                  imad r3.w, r3.x, l(75), r3.w
                  imad r4.z, r4.x, l(3), r3.w
                  mov r6.x, cb0[r4.z + 170].x  // Get3DGradients<0>
                  mov r6.y, cb0[r4.z + 171].x  // Get3DGradients<1>
                  mov r6.z, cb0[r4.z + 172].x  // Get3DGradients<2>
                
                #line 198
                  mov r6.xyz, r6.xyzx  // G222<0,1,2>
                  nop 
                  iadd r3.y, r3.y, l(1)
                  itof r3.y, r3.y  // y<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r3.y, r3.y
                  imul null, r3.y, r3.y, l(15)
                  imad r1.w, r1.w, l(75), r3.y
                  imad r4.z, r4.x, l(3), r1.w
                  mov r7.x, cb0[r4.z + 170].x  // Get3DGradients<0>
                  mov r7.y, cb0[r4.z + 171].x  // Get3DGradients<1>
                  mov r7.z, cb0[r4.z + 172].x  // Get3DGradients<2>
                
                #line 199
                  mov r7.xyz, r7.xyzx  // G211<0,1,2>
                  nop 
                
                #line 158
                  imad r3.x, r3.x, l(75), r3.y
                  imad r3.y, r4.x, l(3), r3.x
                  mov r8.x, cb0[r3.y + 170].x  // Get3DGradients<0>
                  mov r8.y, cb0[r3.y + 171].x  // Get3DGradients<1>
                  mov r8.z, cb0[r3.y + 172].x  // Get3DGradients<2>
                
                #line 200
                  mov r8.xyz, r8.xyzx  // G212<0,1,2>
                
                #line 203
                  nop 
                  iadd r3.y, r3.z, l(1)
                  itof r3.y, r3.y  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r3.y, r3.y
                  imad r3.z, r3.y, l(3), r4.y
                  mov r4.x, cb0[r3.z + 170].x  // Get3DGradients<0>
                  mov r4.y, cb0[r3.z + 171].x  // Get3DGradients<1>
                  mov r4.z, cb0[r3.z + 172].x  // Get3DGradients<2>
                
                #line 203
                  mov r4.xyz, r4.xyzx  // G121<0,1,2>
                  nop 
                
                #line 158
                  imad r3.z, r3.y, l(3), r3.w
                  mov r9.x, cb0[r3.z + 170].x  // Get3DGradients<0>
                  mov r9.y, cb0[r3.z + 171].x  // Get3DGradients<1>
                  mov r9.z, cb0[r3.z + 172].x  // Get3DGradients<2>
                
                #line 204
                  mov r9.xyz, r9.xyzx  // G122<0,1,2>
                  nop 
                
                #line 158
                  imad r1.w, r3.y, l(3), r1.w
                  mov r10.x, cb0[r1.w + 170].x  // Get3DGradients<0>
                  mov r10.y, cb0[r1.w + 171].x  // Get3DGradients<1>
                  mov r10.z, cb0[r1.w + 172].x  // Get3DGradients<2>
                
                #line 205
                  mov r10.xyz, r10.xyzx  // G111<0,1,2>
                  nop 
                
                #line 158
                  imad r1.w, r3.y, l(3), r3.x
                  mov r3.x, cb0[r1.w + 170].x  // Get3DGradients<0>
                  mov r3.y, cb0[r1.w + 171].x  // Get3DGradients<1>
                  mov r3.z, cb0[r1.w + 172].x  // Get3DGradients<2>
                
                #line 206
                  mov r3.xyz, r3.xyzx  // G112<0,1,2>
                
                #line 209
                  mov r11.xyz, -r2.yzwy  // S221<0:NaN,1:NaN,2:NaN>
                  add r12.xyz, r11.xyzx, l(1.000000, 0.000000, 0.000000, 0.000000)  // S222<0:NaN,1:NaN,2:NaN>
                  add r13.xyz, r11.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)  // S211<0:NaN,1:NaN,2:NaN>
                  add r14.xyz, r11.xyzx, l(1.000000, 1.000000, 0.000000, 0.000000)  // S212<0:NaN,1:NaN,2:NaN>
                
                #line 215
                  add r15.xyz, r11.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)  // S121<0:NaN,1:NaN,2:NaN>
                  add r16.xyz, r11.xyzx, l(1.000000, 0.000000, 1.000000, 0.000000)  // S122<0:NaN,1:NaN,2:NaN>
                  add r17.xyz, r11.xyzx, l(0.000000, 1.000000, 1.000000, 0.000000)  // S111<0:NaN,1:NaN,2:NaN>
                  add r18.xyz, r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // S112<0:NaN,1:NaN,2:NaN>
                
                #line 222
                  dp3 r1.w, r5.xyzx, r11.xyzx  // Q221<0:NaN:Inf>
                  dp3 r3.w, r6.xyzx, r12.xyzx  // Q222<0:NaN:Inf>
                  dp3 r4.w, r7.xyzx, r13.xyzx  // Q211<0:NaN:Inf>
                  dp3 r5.x, r8.xyzx, r14.xyzx  // Q212<0:NaN:Inf>
                
                #line 228
                  dp3 r4.x, r4.xyzx, r15.xyzx  // Q121<0:NaN:Inf>
                  dp3 r4.y, r9.xyzx, r16.xyzx  // Q122<0:NaN:Inf>
                  dp3 r4.z, r10.xyzx, r17.xyzx  // Q111<0:NaN:Inf>
                  dp3 r3.x, r3.xyzx, r18.xyzx  // Q112<0:NaN:Inf>
                
                #line 235
                  nop 
                  mov r2.yzw, r2.yyzw  // pt<0:NaN,1:NaN,2:NaN>
                
                #line 156
                  mov r3.y, -r2.y
                  add r3.y, r3.y, l(1.000000)
                  mul r3.z, r3.y, r3.y
                  mul r5.y, r3.z, l(1.000000)
                  mul r5.y, r5.y, l(3.000000)
                  mul r3.y, r3.y, l(1.000000)
                  mul r3.y, r3.z, r3.y
                  mul r3.y, r3.y, l(2.000000)
                  mov r3.y, -r3.y
                  add r3.y, r3.y, r5.y
                  mov r3.z, -r2.z
                  add r3.z, r3.z, l(1.000000)
                  mul r5.y, r3.z, r3.z
                  mul r5.z, r5.y, l(1.000000)
                  mul r5.z, r5.z, l(3.000000)
                  mul r3.z, r3.z, l(1.000000)
                  mul r3.z, r5.y, r3.z
                  mul r3.z, r3.z, l(2.000000)
                  mov r3.z, -r3.z
                  add r3.z, r3.z, r5.z
                  mul r5.y, r3.z, r3.y
                  mov r5.z, -r2.w
                  add r5.z, r5.z, l(1.000000)
                  mul r5.w, r5.z, r5.z
                  mul r6.x, r5.w, l(1.000000)
                  mul r6.x, r6.x, l(3.000000)
                  mul r5.z, r5.z, l(1.000000)
                  mul r5.z, r5.w, r5.z
                  mul r5.z, r5.z, l(2.000000)
                  mov r5.z, -r5.z
                  add r5.z, r5.z, r6.x
                  mul r5.w, r5.z, r5.y  // SCurve221<0:NaN:Inf>
                
                #line 235
                  mul r1.w, r1.w, r5.w
                  nop 
                
                #line 155
                  mul r5.w, r2.y, r2.y
                  mul r6.x, r5.w, l(1.000000)
                  mul r6.x, r6.x, l(3.000000)
                  mul r2.y, r2.y, l(1.000000)
                  mul r2.y, r5.w, r2.y
                  mul r2.y, r2.y, l(2.000000)
                  mov r2.y, -r2.y
                  add r2.y, r2.y, r6.x
                  mul r3.z, r3.z, r2.y
                  mul r5.w, r5.z, r3.z  // SCurve222<0:NaN:Inf>
                
                #line 235
                  mul r3.w, r3.w, r5.w
                  add r1.w, r1.w, r3.w
                  nop 
                
                #line 154
                  mul r3.w, r2.z, r2.z
                  mul r5.w, r3.w, l(1.000000)
                  mul r5.w, r5.w, l(3.000000)
                  mul r2.z, r2.z, l(1.000000)
                  mul r2.z, r3.w, r2.z
                  mul r2.z, r2.z, l(2.000000)
                  mov r2.z, -r2.z
                  add r2.z, r2.z, r5.w
                  mul r3.y, r2.z, r3.y
                  mul r3.w, r5.z, r3.y  // SCurve211<0:NaN:Inf>
                
                #line 235
                  mul r3.w, r4.w, r3.w
                  add r1.w, r1.w, r3.w
                  nop 
                
                #line 153
                  mul r2.y, r2.z, r2.y
                  mul r2.z, r5.z, r2.y  // SCurve212<0:NaN:Inf>
                
                #line 235
                  mul r2.z, r5.x, r2.z
                  add r1.w, r1.w, r2.z
                  nop 
                
                #line 150
                  mul r2.z, r2.w, r2.w
                  mul r3.w, r2.z, l(1.000000)
                  mul r3.w, r3.w, l(3.000000)
                  mul r2.w, r2.w, l(1.000000)
                  mul r2.z, r2.z, r2.w
                  mul r2.z, r2.z, l(2.000000)
                  mov r2.z, -r2.z
                  add r2.z, r2.z, r3.w
                  mul r2.w, r2.z, r5.y  // SCurve121<0:NaN:Inf>
                
                #line 235
                  mul r2.w, r4.x, r2.w
                  add r1.w, r1.w, r2.w
                  nop 
                
                #line 149
                  mul r2.w, r2.z, r3.z  // SCurve122<0:NaN:Inf>
                
                #line 235
                  mul r2.w, r4.y, r2.w
                  add r1.w, r1.w, r2.w
                  nop 
                
                #line 148
                  mul r2.w, r2.z, r3.y  // SCurve111<0:NaN:Inf>
                
                #line 235
                  mul r2.w, r4.z, r2.w
                  add r1.w, r1.w, r2.w
                  nop 
                
                #line 147
                  mul r2.y, r2.z, r2.y  // SCurve112<0:NaN:Inf>
                
                #line 235
                  mul r2.y, r3.x, r2.y
                  add r1.w, r1.w, r2.y  // Q<0:NaN:Inf>
                  mov r1.w, r1.w  // Sample3DGradient<0:NaN:Inf>
                
                #line 62 "TextureGenerator-RidgedPerlinMix1.fx"
                  mov r1.w, r1.w  // sampledTexSP<0:NaN:Inf>
                  mul r1.w, r1.w, r2.x
                  add r1.y, r1.w, r1.y  // texSP<0:NaN:Inf>
                
                #line 55
                  iadd r1.z, r1.z, l(1)  // i<0>
                endloop 
                
                #line 66
                nop 
                mov r1.x, r1.x  // tex<0:NaN:Inf>
                
                #line 73 "TextureGenerator-Utilities.fx"
                add r0.w, r1.x, l(0.500000)
                mul r0.w, r0.w, l(2.000000)  // tex<0:NaN:Inf>
                
                #line 77
                mul r0.w, r0.w, l(0.400000)
                add r0.w, r0.w, l(0.600000)  // tex<0:NaN:Inf>
                mov r0.w, r0.w  // ScaleRidged<0:NaN:Inf>
                
                #line 66 "TextureGenerator-RidgedPerlinMix1.fx"
                mov r0.w, r0.w  // texR<0:NaN:Inf>
                nop 
                mov r1.y, r1.y  // tex<0:NaN:Inf>
                
                #line 54 "TextureGenerator-Utilities.fx"
                add r1.x, r1.y, l(0.500000)  // tex<0:NaN:Inf>
                
                #line 58
                mul r1.x, r1.x, l(0.300000)
                add r1.x, r1.x, l(0.000000)  // tex<0:NaN:Inf>
                mov r1.x, r1.x  // ScalePerlin<0:NaN:Inf>
                
                #line 67 "TextureGenerator-RidgedPerlinMix1.fx"
                mov r1.x, r1.x  // texSP<0:NaN:Inf>
                
                #line 70
                nop 
                add r0.xyz, r0.xyzx, l(0.800000, 0.800000, 0.800000, 0.000000)  // coords<0:NaN,1:NaN,2:NaN>
                
                #line 163 "TextureGenerator-Utilities.fx"
                mul r1.y, r0.x, l(1.000000)
                mov r1.z, -r1.y
                ge r1.y, r1.y, r1.z
                movc r1.y, r1.y, l(1.000000), l(-1.000000)
                div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
                mul r0.x, r0.x, r1.z
                frc r0.x, r0.x
                mul r2.x, r0.x, r1.y  // coords<0:NaN>
                mul r0.x, r0.y, l(1.000000)
                mov r1.y, -r0.x
                ge r0.x, r0.x, r1.y
                movc r0.x, r0.x, l(1.000000), l(-1.000000)
                div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
                mul r0.y, r0.y, r1.y
                frc r0.y, r0.y
                mul r2.y, r0.y, r0.x  // coords<1:NaN>
                mul r0.x, r0.z, l(1.000000)
                mov r0.y, -r0.x
                ge r0.x, r0.x, r0.y
                movc r0.x, r0.x, l(1.000000), l(-1.000000)
                div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
                mul r0.y, r0.y, r0.z
                frc r0.y, r0.y
                mul r2.z, r0.y, r0.x  // coords<2:NaN>
                iadd r0.x, cb0[167].x, l(-1)
                iadd r0.y, cb0[168].x, l(-1)
                iadd r0.z, cb0[169].x, l(-1)
                utof r3.x, r0.x  // space<0:[0f,4.29497e+009f]>
                utof r3.y, r0.y  // space<1:[0f,4.29497e+009f]>
                utof r3.z, r0.z  // space<2:[0f,4.29497e+009f]>
                div r0.xyz, l(1.000000, 1.000000, 1.000000, 0.000000), r3.xyzx  // boxDimensions<0:Inf:[2.32831e-010f,1.#INFf],1:Inf:[2.32831e-010f,1.#INFf],2:Inf:[2.32831e-010f,1.#INFf]>
                div r0.xyz, r2.xyzx, r0.xyzx  // gridCoords<0:NaN,1:NaN,2:NaN>
                
                #line 170
                ftoi r1.yzw, r0.xxyz  // upperLeftBack<0,1,2>
                
                #line 173
                itof r2.w, r1.y
                eq r2.w, r0.x, r2.w
                ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), r2.x
                and r2.x, r2.x, r2.w
                if_nz r2.x
                  iadd r1.y, r1.y, l(-1)  // upperLeftBack<0>
                endif 
                itof r2.x, r1.z
                eq r2.x, r0.y, r2.x
                ne r2.y, l(0.000000, 0.000000, 0.000000, 0.000000), r2.y
                and r2.x, r2.y, r2.x
                if_nz r2.x
                  iadd r1.z, r1.z, l(-1)  // upperLeftBack<1>
                endif 
                itof r2.x, r1.w
                eq r2.x, r0.z, r2.x
                ne r2.y, l(0.000000, 0.000000, 0.000000, 0.000000), r2.z
                and r2.x, r2.y, r2.x
                if_nz r2.x
                  iadd r1.w, r1.w, l(-1)  // upperLeftBack<2>
                endif 
                mov r1.y, r1.y  // p221<0>
                mov r1.z, r1.z  // p221<1>
                mov r1.w, r1.w  // p221<2>
                itof r2.x, r1.y
                itof r2.y, r1.z
                itof r2.z, r1.w
                mov r2.xyz, -r2.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // frac<0:NaN,1:NaN,2:NaN>
                
                #line 197
                nop 
                itof r2.x, r1.y  // x<0:[-2.14748e+009f,2.14748e+009f]>
                itof r2.y, r1.z  // y<0:[-2.14748e+009f,2.14748e+009f]>
                itof r2.z, r1.w  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                ftou r2.z, r2.z
                ftou r2.y, r2.y
                ftou r2.x, r2.x
                imul null, r2.y, r2.y, l(15)
                imad r2.w, r2.x, l(75), r2.y
                imad r3.x, r2.z, l(3), r2.w
                mov r4.x, cb0[r3.x + 170].x  // Get3DGradients<0>
                mov r4.y, cb0[r3.x + 171].x  // Get3DGradients<1>
                mov r4.z, cb0[r3.x + 172].x  // Get3DGradients<2>
                
                #line 197
                mov r4.xyz, r4.xyzx  // G221<0,1,2>
                nop 
                iadd r1.y, r1.y, l(1)
                itof r1.y, r1.y  // x<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                ftou r1.y, r1.y
                imad r2.y, r1.y, l(75), r2.y
                imad r3.x, r2.z, l(3), r2.y
                mov r5.x, cb0[r3.x + 170].x  // Get3DGradients<0>
                mov r5.y, cb0[r3.x + 171].x  // Get3DGradients<1>
                mov r5.z, cb0[r3.x + 172].x  // Get3DGradients<2>
                
                #line 198
                mov r5.xyz, r5.xyzx  // G222<0,1,2>
                nop 
                iadd r1.z, r1.z, l(1)
                itof r1.z, r1.z  // y<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                ftou r1.z, r1.z
                imul null, r1.z, r1.z, l(15)
                imad r2.x, r2.x, l(75), r1.z
                imad r3.x, r2.z, l(3), r2.x
                mov r6.x, cb0[r3.x + 170].x  // Get3DGradients<0>
                mov r6.y, cb0[r3.x + 171].x  // Get3DGradients<1>
                mov r6.z, cb0[r3.x + 172].x  // Get3DGradients<2>
                
                #line 199
                mov r6.xyz, r6.xyzx  // G211<0,1,2>
                nop 
                
                #line 158
                imad r1.y, r1.y, l(75), r1.z
                imad r1.z, r2.z, l(3), r1.y
                mov r3.x, cb0[r1.z + 170].x  // Get3DGradients<0>
                mov r3.y, cb0[r1.z + 171].x  // Get3DGradients<1>
                mov r3.z, cb0[r1.z + 172].x  // Get3DGradients<2>
                
                #line 200
                mov r3.xyz, r3.xyzx  // G212<0,1,2>
                
                #line 203
                nop 
                iadd r1.z, r1.w, l(1)
                itof r1.z, r1.z  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                ftou r1.z, r1.z
                imad r1.w, r1.z, l(3), r2.w
                mov r7.x, cb0[r1.w + 170].x  // Get3DGradients<0>
                mov r7.y, cb0[r1.w + 171].x  // Get3DGradients<1>
                mov r7.z, cb0[r1.w + 172].x  // Get3DGradients<2>
                
                #line 203
                mov r7.xyz, r7.xyzx  // G121<0,1,2>
                nop 
                
                #line 158
                imad r1.w, r1.z, l(3), r2.y
                mov r8.x, cb0[r1.w + 170].x  // Get3DGradients<0>
                mov r8.y, cb0[r1.w + 171].x  // Get3DGradients<1>
                mov r8.z, cb0[r1.w + 172].x  // Get3DGradients<2>
                
                #line 204
                mov r8.xyz, r8.xyzx  // G122<0,1,2>
                nop 
                
                #line 158
                imad r1.w, r1.z, l(3), r2.x
                mov r2.x, cb0[r1.w + 170].x  // Get3DGradients<0>
                mov r2.y, cb0[r1.w + 171].x  // Get3DGradients<1>
                mov r2.z, cb0[r1.w + 172].x  // Get3DGradients<2>
                
                #line 205
                mov r2.xyz, r2.xyzx  // G111<0,1,2>
                nop 
                
                #line 158
                imad r1.y, r1.z, l(3), r1.y
                mov r9.x, cb0[r1.y + 170].x  // Get3DGradients<0>
                mov r9.y, cb0[r1.y + 171].x  // Get3DGradients<1>
                mov r9.z, cb0[r1.y + 172].x  // Get3DGradients<2>
                
                #line 206
                mov r9.xyz, r9.xyzx  // G112<0,1,2>
                
                #line 209
                mov r1.yzw, -r0.xxyz  // S221<0:NaN,1:NaN,2:NaN>
                add r10.xyz, r1.yzwy, l(1.000000, 0.000000, 0.000000, 0.000000)  // S222<0:NaN,1:NaN,2:NaN>
                add r11.xyz, r1.yzwy, l(0.000000, 1.000000, 0.000000, 0.000000)  // S211<0:NaN,1:NaN,2:NaN>
                add r12.xyz, r1.yzwy, l(1.000000, 1.000000, 0.000000, 0.000000)  // S212<0:NaN,1:NaN,2:NaN>
                
                #line 215
                add r13.xyz, r1.yzwy, l(0.000000, 0.000000, 1.000000, 0.000000)  // S121<0:NaN,1:NaN,2:NaN>
                add r14.xyz, r1.yzwy, l(1.000000, 0.000000, 1.000000, 0.000000)  // S122<0:NaN,1:NaN,2:NaN>
                add r15.xyz, r1.yzwy, l(0.000000, 1.000000, 1.000000, 0.000000)  // S111<0:NaN,1:NaN,2:NaN>
                add r16.xyz, r1.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)  // S112<0:NaN,1:NaN,2:NaN>
                
                #line 222
                dp3 r1.y, r4.xyzx, r1.yzwy  // Q221<0:NaN:Inf>
                dp3 r1.z, r5.xyzx, r10.xyzx  // Q222<0:NaN:Inf>
                dp3 r1.w, r6.xyzx, r11.xyzx  // Q211<0:NaN:Inf>
                dp3 r2.w, r3.xyzx, r12.xyzx  // Q212<0:NaN:Inf>
                
                #line 228
                dp3 r3.x, r7.xyzx, r13.xyzx  // Q121<0:NaN:Inf>
                dp3 r3.y, r8.xyzx, r14.xyzx  // Q122<0:NaN:Inf>
                dp3 r2.x, r2.xyzx, r15.xyzx  // Q111<0:NaN:Inf>
                dp3 r2.y, r9.xyzx, r16.xyzx  // Q112<0:NaN:Inf>
                
                #line 235
                nop 
                mov r0.xyz, r0.xyzx  // pt<0:NaN,1:NaN,2:NaN>
                
                #line 156
                mov r2.z, -r0.x
                add r2.z, r2.z, l(1.000000)
                mul r3.z, r2.z, r2.z
                mul r3.w, r3.z, l(1.000000)
                mul r3.w, r3.w, l(3.000000)
                mul r2.z, r2.z, l(1.000000)
                mul r2.z, r3.z, r2.z
                mul r2.z, r2.z, l(2.000000)
                mov r2.z, -r2.z
                add r2.z, r2.z, r3.w
                mov r3.z, -r0.y
                add r3.z, r3.z, l(1.000000)
                mul r3.w, r3.z, r3.z
                mul r4.x, r3.w, l(1.000000)
                mul r4.x, r4.x, l(3.000000)
                mul r3.z, r3.z, l(1.000000)
                mul r3.z, r3.w, r3.z
                mul r3.z, r3.z, l(2.000000)
                mov r3.z, -r3.z
                add r3.z, r3.z, r4.x
                mul r3.w, r2.z, r3.z
                mov r4.x, -r0.z
                add r4.x, r4.x, l(1.000000)
                mul r4.y, r4.x, r4.x
                mul r4.z, r4.y, l(1.000000)
                mul r4.z, r4.z, l(3.000000)
                mul r4.x, r4.x, l(1.000000)
                mul r4.x, r4.y, r4.x
                mul r4.x, r4.x, l(2.000000)
                mov r4.x, -r4.x
                add r4.x, r4.x, r4.z
                mul r4.y, r3.w, r4.x  // SCurve221<0:NaN:Inf>
                
                #line 235
                mul r1.y, r1.y, r4.y
                nop 
                
                #line 155
                mul r4.y, r0.x, r0.x
                mul r4.z, r4.y, l(1.000000)
                mul r4.z, r4.z, l(3.000000)
                mul r0.x, r0.x, l(1.000000)
                mul r0.x, r4.y, r0.x
                mul r0.x, r0.x, l(2.000000)
                mov r0.x, -r0.x
                add r0.x, r0.x, r4.z
                mul r3.z, r3.z, r0.x
                mul r4.y, r4.x, r3.z  // SCurve222<0:NaN:Inf>
                
                #line 235
                mul r1.z, r1.z, r4.y
                add r1.y, r1.z, r1.y
                nop 
                
                #line 154
                mul r1.z, r0.y, r0.y
                mul r4.y, r1.z, l(1.000000)
                mul r4.y, r4.y, l(3.000000)
                mul r0.y, r0.y, l(1.000000)
                mul r0.y, r1.z, r0.y
                mul r0.y, r0.y, l(2.000000)
                mov r0.y, -r0.y
                add r0.y, r0.y, r4.y
                mul r1.z, r0.y, r2.z
                mul r2.z, r4.x, r1.z  // SCurve211<0:NaN:Inf>
                
                #line 235
                mul r1.w, r1.w, r2.z
                add r1.y, r1.w, r1.y
                nop 
                
                #line 153
                mul r0.x, r0.y, r0.x
                mul r0.y, r4.x, r0.x  // SCurve212<0:NaN:Inf>
                
                #line 235
                mul r0.y, r2.w, r0.y
                add r0.y, r0.y, r1.y
                nop 
                
                #line 150
                mul r1.y, r0.z, r0.z
                mul r1.w, r1.y, l(1.000000)
                mul r1.w, r1.w, l(3.000000)
                mul r0.z, r0.z, l(1.000000)
                mul r0.z, r1.y, r0.z
                mul r0.z, r0.z, l(2.000000)
                mov r0.z, -r0.z
                add r0.z, r0.z, r1.w
                mul r1.y, r0.z, r3.w  // SCurve121<0:NaN:Inf>
                
                #line 235
                mul r1.y, r3.x, r1.y
                add r0.y, r0.y, r1.y
                nop 
                
                #line 149
                mul r1.y, r0.z, r3.z  // SCurve122<0:NaN:Inf>
                
                #line 235
                mul r1.y, r3.y, r1.y
                add r0.y, r0.y, r1.y
                nop 
                
                #line 148
                mul r1.y, r0.z, r1.z  // SCurve111<0:NaN:Inf>
                
                #line 235
                mul r1.y, r2.x, r1.y
                add r0.y, r0.y, r1.y
                nop 
                
                #line 147
                mul r0.x, r0.z, r0.x  // SCurve112<0:NaN:Inf>
                
                #line 235
                mul r0.x, r2.y, r0.x
                add r0.x, r0.x, r0.y  // Q<0:NaN:Inf>
                mov r0.x, r0.x  // Sample3DGradient<0:NaN:Inf>
                
                #line 70 "TextureGenerator-RidgedPerlinMix1.fx"
                mov r0.x, r0.x  // texHP<0:NaN:Inf>
                nop 
                mov r0.x, r0.x  // tex<0:NaN:Inf>
                
                #line 54 "TextureGenerator-Utilities.fx"
                add r0.x, r0.x, l(0.500000)  // tex<0:NaN:Inf>
                
                #line 58
                mul r0.x, r0.x, l(1.000000)
                add r0.x, r0.x, l(0.000000)  // tex<0:NaN:Inf>
                mov r0.x, r0.x  // ScalePerlin<0:NaN:Inf>
                
                #line 71 "TextureGenerator-RidgedPerlinMix1.fx"
                mov r0.x, r0.x  // texHP<0:NaN:Inf>
                
                #line 74
                mov r0.y, -r1.x
                add r0.y, r0.y, r0.w
                mul r0.x, r0.y, r0.x
                add r0.x, r0.x, r1.x  // tex<0:NaN:Inf>
                
                #line 78
                mov r1.xyzw, vThreadID.xyyy
                mov r0.yzw, l(0,0,0,1.000000)
                store_uav_typed u0.xyzw, r1.xyzw, r0.xyzw  // gOutput<0>
                
                #line 40
                ret 
                // Approximately 819 instruction slots used
                            
            };
        }

    }

    technique11 RidgedPerlinMix1Tech3D
    {
        pass P0
        {
            VertexShader = NULL;
            PixelShader = NULL;
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerOperationTexGenerator
                // {
                //
                //   float gTexDimensions[3];           // Offset:    0 Size:    36
                //   uint gSeed;                        // Offset:   36 Size:     4 [unused]
                //   float gLacunarity;                 // Offset:   40 Size:     4
                //   uint gOctaves;                     // Offset:   44 Size:     4
                //   uint gGradientsToUse[2];           // Offset:   48 Size:    20 [unused]
                //   float gGradients[162];             // Offset:   80 Size:  2580 [unused]
                //   uint g3DGradientsToUse[3];         // Offset: 2672 Size:    36
                //   float g3DGradients[375];           // Offset: 2720 Size:  5988
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gOutput3D                             UAV  float4          3d    0        1
                // cbPerOperationTexGenerator        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[545], dynamicIndexed
                dcl_uav_typed_texture3d (float,float,float,float) u0
                dcl_input vThreadID.xyz
                dcl_temps 20
                dcl_thread_group 256, 1, 1
                
                #line 84 "TextureGenerator-RidgedPerlinMix1.fx"
                itof r0.x, vThreadID.x
                div r0.x, r0.x, cb0[0].x  // x<0:NaN:Inf>
                itof r0.w, vThreadID.y
                div r0.y, r0.w, cb0[1].x  // y<0:NaN:Inf>
                itof r0.w, vThreadID.z
                div r0.z, r0.w, cb0[2].x  // z<0:NaN:Inf>
                mov r0.x, r0.x  // cartesian<0:NaN:Inf>
                mov r0.y, r0.y  // cartesian<1:NaN:Inf>
                mov r0.z, r0.z  // cartesian<2:NaN:Inf>
                
                #line 90
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w
                mul r0.w, r0.w, l(2.000000)
                mov r0.w, -r0.w
                add r0.w, r0.w, l(1.000000)  // amount<0:NaN:Inf>
                mov r1.x, -r0.w
                max r0.w, r0.w, r1.x
                rsq r0.w, r0.w
                div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w  // amount<0:NaN:Inf>
                
                #line 94
                mov r1.x, l(0)  // texR<0: -0f>
                
                #line 98
                mov r1.y, r1.x  // texR<0:NaN:Inf>
                mov r1.z, r1.x  // texSP<0:NaN:Inf>
                mov r1.w, r1.x  // i<0>
                loop 
                  ult r2.x, r1.w, cb0[2].w
                  breakc_z r2.x
                  nop 
                
                #line 197 "TextureGenerator-Utilities.fx"
                  nop 
                  nop 
                  nop 
                  nop 
                
                #line 203
                  nop 
                  nop 
                  nop 
                  nop 
                
                #line 235
                  nop 
                  nop 
                  nop 
                  nop 
                  nop 
                  nop 
                  nop 
                  nop 
                
                #line 102 "TextureGenerator-RidgedPerlinMix1.fx"
                  nop 
                  mov r2.x, -cb0[2].z
                  max r2.x, r2.x, cb0[2].z
                  utof r2.y, r1.w
                  log r2.x, r2.x
                  mul r2.x, r2.x, r2.y
                  exp r2.x, r2.x
                  mul r3.xyz, r0.xyzx, r2.xxxx  // coords<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163 "TextureGenerator-Utilities.fx"
                  mul r2.z, r3.x, l(1.000000)
                  mov r2.w, -r2.z
                  ge r2.z, r2.z, r2.w
                  movc r2.z, r2.z, l(1.000000), l(-1.000000)
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
                  mul r2.w, r2.w, r3.x
                  frc r2.w, r2.w
                  mul r4.x, r2.w, r2.z  // coords<0:NaN>
                  mul r2.z, r3.y, l(1.000000)
                  mov r2.w, -r2.z
                  ge r2.z, r2.z, r2.w
                  movc r2.z, r2.z, l(1.000000), l(-1.000000)
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
                  mul r2.w, r2.w, r3.y
                  frc r2.w, r2.w
                  mul r4.y, r2.w, r2.z  // coords<1:NaN>
                  mul r2.z, r3.z, l(1.000000)
                  mov r2.w, -r2.z
                  ge r2.z, r2.z, r2.w
                  movc r2.z, r2.z, l(1.000000), l(-1.000000)
                  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
                  mul r2.w, r2.w, r3.z
                  frc r2.w, r2.w
                  mul r4.z, r2.w, r2.z  // coords<2:NaN>
                  iadd r2.z, cb0[167].x, l(-1)
                  iadd r2.w, cb0[168].x, l(-1)
                  iadd r3.x, cb0[169].x, l(-1)
                  utof r5.x, r2.z  // space<0:[0f,4.29497e+009f]>
                  utof r5.y, r2.w  // space<1:[0f,4.29497e+009f]>
                  utof r5.z, r3.x  // space<2:[0f,4.29497e+009f]>
                  div r3.yzw, l(0.000000, 1.000000, 1.000000, 1.000000), r5.xxyz  // boxDimensions<0:Inf:[2.32831e-010f,1.#INFf],1:Inf:[2.32831e-010f,1.#INFf],2:Inf:[2.32831e-010f,1.#INFf]>
                  div r3.yzw, r4.xxyz, r3.yyzw  // gridCoords<0:NaN,1:NaN,2:NaN>
                
                #line 170
                  ftoi r5.xyz, r3.yzwy  // upperLeftBack<0,1,2>
                
                #line 173
                  itof r4.w, r5.x
                  eq r4.w, r3.y, r4.w
                  ne r4.x, l(0.000000, 0.000000, 0.000000, 0.000000), r4.x
                  and r4.x, r4.x, r4.w
                  if_nz r4.x
                    iadd r5.x, r5.x, l(-1)  // upperLeftBack<0>
                  endif 
                  itof r4.x, r5.y
                  eq r4.x, r3.z, r4.x
                  ne r4.y, l(0.000000, 0.000000, 0.000000, 0.000000), r4.y
                  and r4.x, r4.y, r4.x
                  if_nz r4.x
                    iadd r5.y, r5.y, l(-1)  // upperLeftBack<1>
                  endif 
                  itof r4.x, r5.z
                  eq r4.x, r3.w, r4.x
                  ne r4.y, l(0.000000, 0.000000, 0.000000, 0.000000), r4.z
                  and r4.x, r4.y, r4.x
                  if_nz r4.x
                    iadd r5.z, r5.z, l(-1)  // upperLeftBack<2>
                  endif 
                  mov r5.x, r5.x  // p221<0>
                  mov r5.y, r5.y  // p221<1>
                  mov r5.z, r5.z  // p221<2>
                  itof r4.x, r5.x
                  itof r4.y, r5.y
                  itof r4.z, r5.z
                  mov r4.xyz, -r4.xyzx
                  add r3.yzw, r3.yyzw, r4.xxyz  // frac<0:NaN,1:NaN,2:NaN>
                
                #line 197
                  nop 
                  itof r4.x, r5.x  // x<0:[-2.14748e+009f,2.14748e+009f]>
                  itof r4.y, r5.y  // y<0:[-2.14748e+009f,2.14748e+009f]>
                  itof r4.z, r5.z  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r4.z, r4.z
                  ftou r4.y, r4.y
                  ftou r4.x, r4.x
                  imul null, r4.y, r4.y, l(15)
                  imad r4.w, r4.x, l(75), r4.y
                  imad r5.w, r4.z, l(3), r4.w
                  mov r6.x, cb0[r5.w + 170].x  // Get3DGradients<0>
                  mov r6.y, cb0[r5.w + 171].x  // Get3DGradients<1>
                  mov r6.z, cb0[r5.w + 172].x  // Get3DGradients<2>
                
                #line 197
                  mov r6.xyz, r6.xyzx  // G221<0,1,2>
                  nop 
                  iadd r5.x, r5.x, l(1)
                  itof r5.x, r5.x  // x<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r5.x, r5.x
                  imad r4.y, r5.x, l(75), r4.y
                  imad r5.w, r4.z, l(3), r4.y
                  mov r7.x, cb0[r5.w + 170].x  // Get3DGradients<0>
                  mov r7.y, cb0[r5.w + 171].x  // Get3DGradients<1>
                  mov r7.z, cb0[r5.w + 172].x  // Get3DGradients<2>
                
                #line 198
                  mov r7.xyz, r7.xyzx  // G222<0,1,2>
                  nop 
                  iadd r5.y, r5.y, l(1)
                  itof r5.y, r5.y  // y<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r5.y, r5.y
                  imul null, r5.y, r5.y, l(15)
                  imad r4.x, r4.x, l(75), r5.y
                  imad r5.w, r4.z, l(3), r4.x
                  mov r8.x, cb0[r5.w + 170].x  // Get3DGradients<0>
                  mov r8.y, cb0[r5.w + 171].x  // Get3DGradients<1>
                  mov r8.z, cb0[r5.w + 172].x  // Get3DGradients<2>
                
                #line 199
                  mov r8.xyz, r8.xyzx  // G211<0,1,2>
                  nop 
                
                #line 158
                  imad r5.x, r5.x, l(75), r5.y
                  imad r4.z, r4.z, l(3), r5.x
                  mov r9.x, cb0[r4.z + 170].x  // Get3DGradients<0>
                  mov r9.y, cb0[r4.z + 171].x  // Get3DGradients<1>
                  mov r9.z, cb0[r4.z + 172].x  // Get3DGradients<2>
                
                #line 200
                  mov r9.xyz, r9.xyzx  // G212<0,1,2>
                
                #line 203
                  nop 
                  iadd r4.z, r5.z, l(1)
                  itof r4.z, r4.z  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r4.z, r4.z
                  imad r4.w, r4.z, l(3), r4.w
                  mov r10.x, cb0[r4.w + 170].x  // Get3DGradients<0>
                  mov r10.y, cb0[r4.w + 171].x  // Get3DGradients<1>
                  mov r10.z, cb0[r4.w + 172].x  // Get3DGradients<2>
                
                #line 203
                  mov r10.xyz, r10.xyzx  // G121<0,1,2>
                  nop 
                
                #line 158
                  imad r4.y, r4.z, l(3), r4.y
                  mov r11.x, cb0[r4.y + 170].x  // Get3DGradients<0>
                  mov r11.y, cb0[r4.y + 171].x  // Get3DGradients<1>
                  mov r11.z, cb0[r4.y + 172].x  // Get3DGradients<2>
                
                #line 204
                  mov r11.xyz, r11.xyzx  // G122<0,1,2>
                  nop 
                
                #line 158
                  imad r4.x, r4.z, l(3), r4.x
                  mov r12.x, cb0[r4.x + 170].x  // Get3DGradients<0>
                  mov r12.y, cb0[r4.x + 171].x  // Get3DGradients<1>
                  mov r12.z, cb0[r4.x + 172].x  // Get3DGradients<2>
                
                #line 205
                  mov r12.xyz, r12.xyzx  // G111<0,1,2>
                  nop 
                
                #line 158
                  imad r4.x, r4.z, l(3), r5.x
                  mov r5.x, cb0[r4.x + 170].x  // Get3DGradients<0>
                  mov r5.y, cb0[r4.x + 171].x  // Get3DGradients<1>
                  mov r5.z, cb0[r4.x + 172].x  // Get3DGradients<2>
                
                #line 206
                  mov r5.xyz, r5.xyzx  // G112<0,1,2>
                
                #line 209
                  mov r4.xyz, -r3.yzwy  // S221<0:NaN,1:NaN,2:NaN>
                  add r13.xyz, r4.xyzx, l(1.000000, 0.000000, 0.000000, 0.000000)  // S222<0:NaN,1:NaN,2:NaN>
                  add r14.xyz, r4.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)  // S211<0:NaN,1:NaN,2:NaN>
                  add r15.xyz, r4.xyzx, l(1.000000, 1.000000, 0.000000, 0.000000)  // S212<0:NaN,1:NaN,2:NaN>
                
                #line 215
                  add r16.xyz, r4.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)  // S121<0:NaN,1:NaN,2:NaN>
                  add r17.xyz, r4.xyzx, l(1.000000, 0.000000, 1.000000, 0.000000)  // S122<0:NaN,1:NaN,2:NaN>
                  add r18.xyz, r4.xyzx, l(0.000000, 1.000000, 1.000000, 0.000000)  // S111<0:NaN,1:NaN,2:NaN>
                  add r19.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // S112<0:NaN,1:NaN,2:NaN>
                
                #line 222
                  dp3 r4.x, r6.xyzx, r4.xyzx  // Q221<0:NaN:Inf>
                  dp3 r4.y, r7.xyzx, r13.xyzx  // Q222<0:NaN:Inf>
                  dp3 r4.z, r8.xyzx, r14.xyzx  // Q211<0:NaN:Inf>
                  dp3 r4.w, r9.xyzx, r15.xyzx  // Q212<0:NaN:Inf>
                
                #line 228
                  dp3 r5.w, r10.xyzx, r16.xyzx  // Q121<0:NaN:Inf>
                  dp3 r6.x, r11.xyzx, r17.xyzx  // Q122<0:NaN:Inf>
                  dp3 r6.y, r12.xyzx, r18.xyzx  // Q111<0:NaN:Inf>
                  dp3 r5.x, r5.xyzx, r19.xyzx  // Q112<0:NaN:Inf>
                
                #line 235
                  nop 
                  mov r3.yzw, r3.yyzw  // pt<0:NaN,1:NaN,2:NaN>
                
                #line 156
                  mov r5.y, -r3.y
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.y
                  mul r6.z, r5.z, l(1.000000)
                  mul r6.z, r6.z, l(3.000000)
                  mul r5.y, r5.y, l(1.000000)
                  mul r5.y, r5.z, r5.y
                  mul r5.y, r5.y, l(2.000000)
                  mov r5.y, -r5.y
                  add r5.y, r5.y, r6.z
                  mov r5.z, -r3.z
                  add r5.z, r5.z, l(1.000000)
                  mul r6.z, r5.z, r5.z
                  mul r6.w, r6.z, l(1.000000)
                  mul r6.w, r6.w, l(3.000000)
                  mul r5.z, r5.z, l(1.000000)
                  mul r5.z, r6.z, r5.z
                  mul r5.z, r5.z, l(2.000000)
                  mov r5.z, -r5.z
                  add r5.z, r5.z, r6.w
                  mul r6.z, r5.z, r5.y
                  mov r6.w, -r3.w
                  add r6.w, r6.w, l(1.000000)
                  mul r7.x, r6.w, r6.w
                  mul r7.y, r7.x, l(1.000000)
                  mul r7.y, r7.y, l(3.000000)
                  mul r6.w, r6.w, l(1.000000)
                  mul r6.w, r7.x, r6.w
                  mul r6.w, r6.w, l(2.000000)
                  mov r6.w, -r6.w
                  add r6.w, r6.w, r7.y
                  mul r7.x, r6.w, r6.z  // SCurve221<0:NaN:Inf>
                
                #line 235
                  mul r4.x, r4.x, r7.x
                  nop 
                
                #line 155
                  mul r7.x, r3.y, r3.y
                  mul r7.y, r7.x, l(1.000000)
                  mul r7.y, r7.y, l(3.000000)
                  mul r3.y, r3.y, l(1.000000)
                  mul r3.y, r7.x, r3.y
                  mul r3.y, r3.y, l(2.000000)
                  mov r3.y, -r3.y
                  add r3.y, r3.y, r7.y
                  mul r5.z, r5.z, r3.y
                  mul r7.x, r6.w, r5.z  // SCurve222<0:NaN:Inf>
                
                #line 235
                  mul r4.y, r4.y, r7.x
                  add r4.x, r4.y, r4.x
                  nop 
                
                #line 154
                  mul r4.y, r3.z, r3.z
                  mul r7.x, r4.y, l(1.000000)
                  mul r7.x, r7.x, l(3.000000)
                  mul r3.z, r3.z, l(1.000000)
                  mul r3.z, r4.y, r3.z
                  mul r3.z, r3.z, l(2.000000)
                  mov r3.z, -r3.z
                  add r3.z, r3.z, r7.x
                  mul r4.y, r3.z, r5.y
                  mul r5.y, r6.w, r4.y  // SCurve211<0:NaN:Inf>
                
                #line 235
                  mul r4.z, r4.z, r5.y
                  add r4.x, r4.z, r4.x
                  nop 
                
                #line 153
                  mul r3.y, r3.z, r3.y
                  mul r3.z, r6.w, r3.y  // SCurve212<0:NaN:Inf>
                
                #line 235
                  mul r3.z, r4.w, r3.z
                  add r3.z, r3.z, r4.x
                  nop 
                
                #line 150
                  mul r4.x, r3.w, r3.w
                  mul r4.z, r4.x, l(1.000000)
                  mul r4.z, r4.z, l(3.000000)
                  mul r3.w, r3.w, l(1.000000)
                  mul r3.w, r4.x, r3.w
                  mul r3.w, r3.w, l(2.000000)
                  mov r3.w, -r3.w
                  add r3.w, r3.w, r4.z
                  mul r4.x, r3.w, r6.z  // SCurve121<0:NaN:Inf>
                
                #line 235
                  mul r4.x, r5.w, r4.x
                  add r3.z, r3.z, r4.x
                  nop 
                
                #line 149
                  mul r4.x, r3.w, r5.z  // SCurve122<0:NaN:Inf>
                
                #line 235
                  mul r4.x, r6.x, r4.x
                  add r3.z, r3.z, r4.x
                  nop 
                
                #line 148
                  mul r4.x, r3.w, r4.y  // SCurve111<0:NaN:Inf>
                
                #line 235
                  mul r4.x, r6.y, r4.x
                  add r3.z, r3.z, r4.x
                  nop 
                
                #line 147
                  mul r3.y, r3.w, r3.y  // SCurve112<0:NaN:Inf>
                
                #line 235
                  mul r3.y, r5.x, r3.y
                  add r3.y, r3.y, r3.z  // Q<0:NaN:Inf>
                  mov r3.y, r3.y  // Sample3DGradient<0:NaN:Inf>
                
                #line 102 "TextureGenerator-RidgedPerlinMix1.fx"
                  mov r3.y, r3.y  // sampledTexR<0:NaN:Inf>
                  div r3.z, l(1.000000), cb0[2].z
                  mov r3.w, -r3.z
                  max r3.z, r3.w, r3.z
                  log r3.z, r3.z
                  mul r2.y, r2.y, r3.z
                  exp r2.y, r2.y
                  nop 
                  mov r3.y, r3.y  // tex<0:NaN:Inf>
                
                #line 65 "TextureGenerator-Utilities.fx"
                  lt r3.z, l(0.000000), r3.y
                  if_nz r3.z
                    mov r3.y, -r3.y  // tex<0:NaN:Inf>
                  endif 
                  mov r3.y, r3.y  // FilterRidged<0:NaN:Inf>
                
                #line 103 "TextureGenerator-RidgedPerlinMix1.fx"
                  mul r3.y, r2.y, r3.y
                  add r1.y, r1.y, r3.y  // texR<0:NaN:Inf>
                  nop 
                  mul r3.yzw, r0.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000)
                  add r3.yzw, r3.yyzw, l(0.000000, 0.300000, 0.300000, 0.300000)
                  mul r3.yzw, r2.xxxx, r3.yyzw  // coords<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163 "TextureGenerator-Utilities.fx"
                  mul r2.x, r3.y, l(1.000000)
                  mov r4.x, -r2.x
                  ge r2.x, r2.x, r4.x
                  movc r2.x, r2.x, l(1.000000), l(-1.000000)
                  div r4.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
                  mul r3.y, r3.y, r4.x
                  frc r3.y, r3.y
                  mul r4.x, r2.x, r3.y  // coords<0:NaN>
                  mul r2.x, r3.z, l(1.000000)
                  mov r3.y, -r2.x
                  ge r2.x, r2.x, r3.y
                  movc r2.x, r2.x, l(1.000000), l(-1.000000)
                  div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
                  mul r3.y, r3.y, r3.z
                  frc r3.y, r3.y
                  mul r4.y, r2.x, r3.y  // coords<1:NaN>
                  mul r2.x, r3.w, l(1.000000)
                  mov r3.y, -r2.x
                  ge r2.x, r2.x, r3.y
                  movc r2.x, r2.x, l(1.000000), l(-1.000000)
                  div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
                  mul r3.y, r3.y, r3.w
                  frc r3.y, r3.y
                  mul r4.z, r2.x, r3.y  // coords<2:NaN>
                  utof r5.x, r2.z  // space<0:[0f,4.29497e+009f]>
                  utof r5.y, r2.w  // space<1:[0f,4.29497e+009f]>
                  utof r5.z, r3.x  // space<2:[0f,4.29497e+009f]>
                  div r2.xzw, l(1.000000, 0.000000, 1.000000, 1.000000), r5.xxyz  // boxDimensions<0:Inf:[2.32831e-010f,1.#INFf],1:Inf:[2.32831e-010f,1.#INFf],2:Inf:[2.32831e-010f,1.#INFf]>
                  div r2.xzw, r4.xxyz, r2.xxzw  // gridCoords<0:NaN,1:NaN,2:NaN>
                
                #line 170
                  ftoi r3.xyz, r2.xzwx  // upperLeftBack<0,1,2>
                
                #line 173
                  itof r3.w, r3.x
                  eq r3.w, r2.x, r3.w
                  ne r4.x, l(0.000000, 0.000000, 0.000000, 0.000000), r4.x
                  and r3.w, r3.w, r4.x
                  if_nz r3.w
                    iadd r3.x, r3.x, l(-1)  // upperLeftBack<0>
                  endif 
                  itof r3.w, r3.y
                  eq r3.w, r2.z, r3.w
                  ne r4.x, l(0.000000, 0.000000, 0.000000, 0.000000), r4.y
                  and r3.w, r3.w, r4.x
                  if_nz r3.w
                    iadd r3.y, r3.y, l(-1)  // upperLeftBack<1>
                  endif 
                  itof r3.w, r3.z
                  eq r3.w, r2.w, r3.w
                  ne r4.x, l(0.000000, 0.000000, 0.000000, 0.000000), r4.z
                  and r3.w, r3.w, r4.x
                  if_nz r3.w
                    iadd r3.z, r3.z, l(-1)  // upperLeftBack<2>
                  endif 
                  mov r3.x, r3.x  // p221<0>
                  mov r3.y, r3.y  // p221<1>
                  mov r3.z, r3.z  // p221<2>
                  itof r4.x, r3.x
                  itof r4.y, r3.y
                  itof r4.z, r3.z
                  mov r4.xyz, -r4.xyzx
                  add r2.xzw, r2.xxzw, r4.xxyz  // frac<0:NaN,1:NaN,2:NaN>
                
                #line 197
                  nop 
                  itof r3.w, r3.x  // x<0:[-2.14748e+009f,2.14748e+009f]>
                  itof r4.x, r3.y  // y<0:[-2.14748e+009f,2.14748e+009f]>
                  itof r4.y, r3.z  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r4.y, r4.y
                  ftou r4.x, r4.x
                  ftou r3.w, r3.w
                  imul null, r4.x, r4.x, l(15)
                  imad r4.z, r3.w, l(75), r4.x
                  imad r4.w, r4.y, l(3), r4.z
                  mov r5.x, cb0[r4.w + 170].x  // Get3DGradients<0>
                  mov r5.y, cb0[r4.w + 171].x  // Get3DGradients<1>
                  mov r5.z, cb0[r4.w + 172].x  // Get3DGradients<2>
                
                #line 197
                  mov r5.xyz, r5.xyzx  // G221<0,1,2>
                  nop 
                  iadd r3.x, r3.x, l(1)
                  itof r3.x, r3.x  // x<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r3.x, r3.x
                  imad r4.x, r3.x, l(75), r4.x
                  imad r4.w, r4.y, l(3), r4.x
                  mov r6.x, cb0[r4.w + 170].x  // Get3DGradients<0>
                  mov r6.y, cb0[r4.w + 171].x  // Get3DGradients<1>
                  mov r6.z, cb0[r4.w + 172].x  // Get3DGradients<2>
                
                #line 198
                  mov r6.xyz, r6.xyzx  // G222<0,1,2>
                  nop 
                  iadd r3.y, r3.y, l(1)
                  itof r3.y, r3.y  // y<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r3.y, r3.y
                  imul null, r3.y, r3.y, l(15)
                  imad r3.w, r3.w, l(75), r3.y
                  imad r4.w, r4.y, l(3), r3.w
                  mov r7.x, cb0[r4.w + 170].x  // Get3DGradients<0>
                  mov r7.y, cb0[r4.w + 171].x  // Get3DGradients<1>
                  mov r7.z, cb0[r4.w + 172].x  // Get3DGradients<2>
                
                #line 199
                  mov r7.xyz, r7.xyzx  // G211<0,1,2>
                  nop 
                
                #line 158
                  imad r3.x, r3.x, l(75), r3.y
                  imad r3.y, r4.y, l(3), r3.x
                  mov r8.x, cb0[r3.y + 170].x  // Get3DGradients<0>
                  mov r8.y, cb0[r3.y + 171].x  // Get3DGradients<1>
                  mov r8.z, cb0[r3.y + 172].x  // Get3DGradients<2>
                
                #line 200
                  mov r8.xyz, r8.xyzx  // G212<0,1,2>
                
                #line 203
                  nop 
                  iadd r3.y, r3.z, l(1)
                  itof r3.y, r3.y  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                  ftou r3.y, r3.y
                  imad r3.z, r3.y, l(3), r4.z
                  mov r9.x, cb0[r3.z + 170].x  // Get3DGradients<0>
                  mov r9.y, cb0[r3.z + 171].x  // Get3DGradients<1>
                  mov r9.z, cb0[r3.z + 172].x  // Get3DGradients<2>
                
                #line 203
                  mov r9.xyz, r9.xyzx  // G121<0,1,2>
                  nop 
                
                #line 158
                  imad r3.z, r3.y, l(3), r4.x
                  mov r4.x, cb0[r3.z + 170].x  // Get3DGradients<0>
                  mov r4.y, cb0[r3.z + 171].x  // Get3DGradients<1>
                  mov r4.z, cb0[r3.z + 172].x  // Get3DGradients<2>
                
                #line 204
                  mov r4.xyz, r4.xyzx  // G122<0,1,2>
                  nop 
                
                #line 158
                  imad r3.z, r3.y, l(3), r3.w
                  mov r10.x, cb0[r3.z + 170].x  // Get3DGradients<0>
                  mov r10.y, cb0[r3.z + 171].x  // Get3DGradients<1>
                  mov r10.z, cb0[r3.z + 172].x  // Get3DGradients<2>
                
                #line 205
                  mov r10.xyz, r10.xyzx  // G111<0,1,2>
                  nop 
                
                #line 158
                  imad r3.x, r3.y, l(3), r3.x
                  mov r11.x, cb0[r3.x + 170].x  // Get3DGradients<0>
                  mov r11.y, cb0[r3.x + 171].x  // Get3DGradients<1>
                  mov r11.z, cb0[r3.x + 172].x  // Get3DGradients<2>
                
                #line 206
                  mov r11.xyz, r11.xyzx  // G112<0,1,2>
                
                #line 209
                  mov r3.xyz, -r2.xzwx  // S221<0:NaN,1:NaN,2:NaN>
                  add r12.xyz, r3.xyzx, l(1.000000, 0.000000, 0.000000, 0.000000)  // S222<0:NaN,1:NaN,2:NaN>
                  add r13.xyz, r3.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)  // S211<0:NaN,1:NaN,2:NaN>
                  add r14.xyz, r3.xyzx, l(1.000000, 1.000000, 0.000000, 0.000000)  // S212<0:NaN,1:NaN,2:NaN>
                
                #line 215
                  add r15.xyz, r3.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)  // S121<0:NaN,1:NaN,2:NaN>
                  add r16.xyz, r3.xyzx, l(1.000000, 0.000000, 1.000000, 0.000000)  // S122<0:NaN,1:NaN,2:NaN>
                  add r17.xyz, r3.xyzx, l(0.000000, 1.000000, 1.000000, 0.000000)  // S111<0:NaN,1:NaN,2:NaN>
                  add r18.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // S112<0:NaN,1:NaN,2:NaN>
                
                #line 222
                  dp3 r3.x, r5.xyzx, r3.xyzx  // Q221<0:NaN:Inf>
                  dp3 r3.y, r6.xyzx, r12.xyzx  // Q222<0:NaN:Inf>
                  dp3 r3.z, r7.xyzx, r13.xyzx  // Q211<0:NaN:Inf>
                  dp3 r3.w, r8.xyzx, r14.xyzx  // Q212<0:NaN:Inf>
                
                #line 228
                  dp3 r4.w, r9.xyzx, r15.xyzx  // Q121<0:NaN:Inf>
                  dp3 r4.x, r4.xyzx, r16.xyzx  // Q122<0:NaN:Inf>
                  dp3 r4.y, r10.xyzx, r17.xyzx  // Q111<0:NaN:Inf>
                  dp3 r4.z, r11.xyzx, r18.xyzx  // Q112<0:NaN:Inf>
                
                #line 235
                  nop 
                  mov r2.xzw, r2.xxzw  // pt<0:NaN,1:NaN,2:NaN>
                
                #line 156
                  mov r5.x, -r2.x
                  add r5.x, r5.x, l(1.000000)
                  mul r5.y, r5.x, r5.x
                  mul r5.z, r5.y, l(1.000000)
                  mul r5.z, r5.z, l(3.000000)
                  mul r5.x, r5.x, l(1.000000)
                  mul r5.x, r5.y, r5.x
                  mul r5.x, r5.x, l(2.000000)
                  mov r5.x, -r5.x
                  add r5.x, r5.x, r5.z
                  mov r5.y, -r2.z
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.y
                  mul r5.w, r5.z, l(1.000000)
                  mul r5.w, r5.w, l(3.000000)
                  mul r5.y, r5.y, l(1.000000)
                  mul r5.y, r5.z, r5.y
                  mul r5.y, r5.y, l(2.000000)
                  mov r5.y, -r5.y
                  add r5.y, r5.y, r5.w
                  mul r5.z, r5.y, r5.x
                  mov r5.w, -r2.w
                  add r5.w, r5.w, l(1.000000)
                  mul r6.x, r5.w, r5.w
                  mul r6.y, r6.x, l(1.000000)
                  mul r6.y, r6.y, l(3.000000)
                  mul r5.w, r5.w, l(1.000000)
                  mul r5.w, r6.x, r5.w
                  mul r5.w, r5.w, l(2.000000)
                  mov r5.w, -r5.w
                  add r5.w, r5.w, r6.y
                  mul r6.x, r5.w, r5.z  // SCurve221<0:NaN:Inf>
                
                #line 235
                  mul r3.x, r3.x, r6.x
                  nop 
                
                #line 155
                  mul r6.x, r2.x, r2.x
                  mul r6.y, r6.x, l(1.000000)
                  mul r6.y, r6.y, l(3.000000)
                  mul r2.x, r2.x, l(1.000000)
                  mul r2.x, r6.x, r2.x
                  mul r2.x, r2.x, l(2.000000)
                  mov r2.x, -r2.x
                  add r2.x, r2.x, r6.y
                  mul r5.y, r5.y, r2.x
                  mul r6.x, r5.w, r5.y  // SCurve222<0:NaN:Inf>
                
                #line 235
                  mul r3.y, r3.y, r6.x
                  add r3.x, r3.y, r3.x
                  nop 
                
                #line 154
                  mul r3.y, r2.z, r2.z
                  mul r6.x, r3.y, l(1.000000)
                  mul r6.x, r6.x, l(3.000000)
                  mul r2.z, r2.z, l(1.000000)
                  mul r2.z, r3.y, r2.z
                  mul r2.z, r2.z, l(2.000000)
                  mov r2.z, -r2.z
                  add r2.z, r2.z, r6.x
                  mul r3.y, r2.z, r5.x
                  mul r5.x, r5.w, r3.y  // SCurve211<0:NaN:Inf>
                
                #line 235
                  mul r3.z, r3.z, r5.x
                  add r3.x, r3.z, r3.x
                  nop 
                
                #line 153
                  mul r2.x, r2.z, r2.x
                  mul r2.z, r5.w, r2.x  // SCurve212<0:NaN:Inf>
                
                #line 235
                  mul r2.z, r3.w, r2.z
                  add r2.z, r2.z, r3.x
                  nop 
                
                #line 150
                  mul r3.x, r2.w, r2.w
                  mul r3.z, r3.x, l(1.000000)
                  mul r3.z, r3.z, l(3.000000)
                  mul r2.w, r2.w, l(1.000000)
                  mul r2.w, r3.x, r2.w
                  mul r2.w, r2.w, l(2.000000)
                  mov r2.w, -r2.w
                  add r2.w, r2.w, r3.z
                  mul r3.x, r2.w, r5.z  // SCurve121<0:NaN:Inf>
                
                #line 235
                  mul r3.x, r4.w, r3.x
                  add r2.z, r2.z, r3.x
                  nop 
                
                #line 149
                  mul r3.x, r2.w, r5.y  // SCurve122<0:NaN:Inf>
                
                #line 235
                  mul r3.x, r4.x, r3.x
                  add r2.z, r2.z, r3.x
                  nop 
                
                #line 148
                  mul r3.x, r2.w, r3.y  // SCurve111<0:NaN:Inf>
                
                #line 235
                  mul r3.x, r4.y, r3.x
                  add r2.z, r2.z, r3.x
                  nop 
                
                #line 147
                  mul r2.x, r2.w, r2.x  // SCurve112<0:NaN:Inf>
                
                #line 235
                  mul r2.x, r4.z, r2.x
                  add r2.x, r2.x, r2.z  // Q<0:NaN:Inf>
                  mov r2.x, r2.x  // Sample3DGradient<0:NaN:Inf>
                
                #line 105 "TextureGenerator-RidgedPerlinMix1.fx"
                  mov r2.x, r2.x  // sampledTexSP<0:NaN:Inf>
                  mul r2.x, r2.x, r2.y
                  add r1.z, r1.z, r2.x  // texSP<0:NaN:Inf>
                
                #line 98
                  iadd r1.w, r1.w, l(1)  // i<0>
                endloop 
                
                #line 109
                nop 
                mov r1.y, r1.y  // tex<0:NaN:Inf>
                
                #line 73 "TextureGenerator-Utilities.fx"
                add r1.x, r1.y, l(0.500000)
                mul r1.x, r1.x, l(2.000000)  // tex<0:NaN:Inf>
                
                #line 77
                mul r1.x, r1.x, l(0.400000)
                add r1.x, r1.x, l(0.600000)  // tex<0:NaN:Inf>
                mov r1.x, r1.x  // ScaleRidged<0:NaN:Inf>
                
                #line 109 "TextureGenerator-RidgedPerlinMix1.fx"
                mov r1.x, r1.x  // texR<0:NaN:Inf>
                nop 
                mov r1.z, r1.z  // tex<0:NaN:Inf>
                
                #line 54 "TextureGenerator-Utilities.fx"
                add r1.y, r1.z, l(0.500000)  // tex<0:NaN:Inf>
                
                #line 58
                mul r1.y, r1.y, l(0.300000)
                add r1.y, r1.y, l(0.000000)  // tex<0:NaN:Inf>
                mov r1.y, r1.y  // ScalePerlin<0:NaN:Inf>
                
                #line 110 "TextureGenerator-RidgedPerlinMix1.fx"
                mov r1.y, r1.y  // texSP<0:NaN:Inf>
                
                #line 113
                nop 
                add r0.xyz, r0.xyzx, l(0.800000, 0.800000, 0.800000, 0.000000)  // coords<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 163 "TextureGenerator-Utilities.fx"
                mul r1.z, r0.x, l(1.000000)
                mov r1.w, -r1.z
                ge r1.z, r1.z, r1.w
                movc r1.z, r1.z, l(1.000000), l(-1.000000)
                div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
                mul r0.x, r0.x, r1.w
                frc r0.x, r0.x
                mul r2.x, r0.x, r1.z  // coords<0:NaN>
                mul r0.x, r0.y, l(1.000000)
                mov r1.z, -r0.x
                ge r0.x, r0.x, r1.z
                movc r0.x, r0.x, l(1.000000), l(-1.000000)
                div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
                mul r0.y, r0.y, r1.z
                frc r0.y, r0.y
                mul r2.y, r0.y, r0.x  // coords<1:NaN>
                mul r0.x, r0.z, l(1.000000)
                mov r0.y, -r0.x
                ge r0.x, r0.x, r0.y
                movc r0.x, r0.x, l(1.000000), l(-1.000000)
                div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
                mul r0.y, r0.y, r0.z
                frc r0.y, r0.y
                mul r2.z, r0.y, r0.x  // coords<2:NaN>
                iadd r0.x, cb0[167].x, l(-1)
                iadd r0.y, cb0[168].x, l(-1)
                iadd r0.z, cb0[169].x, l(-1)
                utof r3.x, r0.x  // space<0:[0f,4.29497e+009f]>
                utof r3.y, r0.y  // space<1:[0f,4.29497e+009f]>
                utof r3.z, r0.z  // space<2:[0f,4.29497e+009f]>
                div r0.xyz, l(1.000000, 1.000000, 1.000000, 0.000000), r3.xyzx  // boxDimensions<0:Inf:[2.32831e-010f,1.#INFf],1:Inf:[2.32831e-010f,1.#INFf],2:Inf:[2.32831e-010f,1.#INFf]>
                div r0.xyz, r2.xyzx, r0.xyzx  // gridCoords<0:NaN,1:NaN,2:NaN>
                
                #line 170
                ftoi r3.xyz, r0.xyzx  // upperLeftBack<0,1,2>
                
                #line 173
                itof r1.z, r3.x
                eq r1.z, r0.x, r1.z
                ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), r2.x
                and r1.z, r1.w, r1.z
                if_nz r1.z
                  iadd r3.x, r3.x, l(-1)  // upperLeftBack<0>
                endif 
                itof r1.z, r3.y
                eq r1.z, r0.y, r1.z
                ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), r2.y
                and r1.z, r1.w, r1.z
                if_nz r1.z
                  iadd r3.y, r3.y, l(-1)  // upperLeftBack<1>
                endif 
                itof r1.z, r3.z
                eq r1.z, r0.z, r1.z
                ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), r2.z
                and r1.z, r1.w, r1.z
                if_nz r1.z
                  iadd r3.z, r3.z, l(-1)  // upperLeftBack<2>
                endif 
                mov r3.x, r3.x  // p221<0>
                mov r3.y, r3.y  // p221<1>
                mov r3.z, r3.z  // p221<2>
                itof r2.x, r3.x
                itof r2.y, r3.y
                itof r2.z, r3.z
                mov r2.xyz, -r2.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // frac<0:NaN,1:NaN,2:NaN>
                
                #line 197
                nop 
                itof r1.z, r3.x  // x<0:[-2.14748e+009f,2.14748e+009f]>
                itof r1.w, r3.y  // y<0:[-2.14748e+009f,2.14748e+009f]>
                itof r2.x, r3.z  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                ftou r2.x, r2.x
                ftou r1.w, r1.w
                ftou r1.z, r1.z
                imul null, r1.w, r1.w, l(15)
                imad r2.y, r1.z, l(75), r1.w
                imad r2.z, r2.x, l(3), r2.y
                mov r4.x, cb0[r2.z + 170].x  // Get3DGradients<0>
                mov r4.y, cb0[r2.z + 171].x  // Get3DGradients<1>
                mov r4.z, cb0[r2.z + 172].x  // Get3DGradients<2>
                
                #line 197
                mov r4.xyz, r4.xyzx  // G221<0,1,2>
                nop 
                iadd r2.z, r3.x, l(1)
                itof r2.z, r2.z  // x<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                ftou r2.z, r2.z
                imad r1.w, r2.z, l(75), r1.w
                imad r2.w, r2.x, l(3), r1.w
                mov r5.x, cb0[r2.w + 170].x  // Get3DGradients<0>
                mov r5.y, cb0[r2.w + 171].x  // Get3DGradients<1>
                mov r5.z, cb0[r2.w + 172].x  // Get3DGradients<2>
                
                #line 198
                mov r5.xyz, r5.xyzx  // G222<0,1,2>
                nop 
                iadd r2.w, r3.y, l(1)
                itof r2.w, r2.w  // y<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                ftou r2.w, r2.w
                imul null, r2.w, r2.w, l(15)
                imad r1.z, r1.z, l(75), r2.w
                imad r3.x, r2.x, l(3), r1.z
                mov r6.x, cb0[r3.x + 170].x  // Get3DGradients<0>
                mov r6.y, cb0[r3.x + 171].x  // Get3DGradients<1>
                mov r6.z, cb0[r3.x + 172].x  // Get3DGradients<2>
                
                #line 199
                mov r6.xyz, r6.xyzx  // G211<0,1,2>
                nop 
                
                #line 158
                imad r2.z, r2.z, l(75), r2.w
                imad r2.x, r2.x, l(3), r2.z
                mov r7.x, cb0[r2.x + 170].x  // Get3DGradients<0>
                mov r7.y, cb0[r2.x + 171].x  // Get3DGradients<1>
                mov r7.z, cb0[r2.x + 172].x  // Get3DGradients<2>
                
                #line 200
                mov r7.xyz, r7.xyzx  // G212<0,1,2>
                
                #line 203
                nop 
                iadd r2.x, r3.z, l(1)
                itof r2.x, r2.x  // z<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 158
                ftou r2.x, r2.x
                imad r2.y, r2.x, l(3), r2.y
                mov r3.x, cb0[r2.y + 170].x  // Get3DGradients<0>
                mov r3.y, cb0[r2.y + 171].x  // Get3DGradients<1>
                mov r3.z, cb0[r2.y + 172].x  // Get3DGradients<2>
                
                #line 203
                mov r3.xyz, r3.xyzx  // G121<0,1,2>
                nop 
                
                #line 158
                imad r1.w, r2.x, l(3), r1.w
                mov r8.x, cb0[r1.w + 170].x  // Get3DGradients<0>
                mov r8.y, cb0[r1.w + 171].x  // Get3DGradients<1>
                mov r8.z, cb0[r1.w + 172].x  // Get3DGradients<2>
                
                #line 204
                mov r8.xyz, r8.xyzx  // G122<0,1,2>
                nop 
                
                #line 158
                imad r1.z, r2.x, l(3), r1.z
                mov r9.x, cb0[r1.z + 170].x  // Get3DGradients<0>
                mov r9.y, cb0[r1.z + 171].x  // Get3DGradients<1>
                mov r9.z, cb0[r1.z + 172].x  // Get3DGradients<2>
                
                #line 205
                mov r9.xyz, r9.xyzx  // G111<0,1,2>
                nop 
                
                #line 158
                imad r1.z, r2.x, l(3), r2.z
                mov r2.x, cb0[r1.z + 170].x  // Get3DGradients<0>
                mov r2.y, cb0[r1.z + 171].x  // Get3DGradients<1>
                mov r2.z, cb0[r1.z + 172].x  // Get3DGradients<2>
                
                #line 206
                mov r2.xyz, r2.xyzx  // G112<0,1,2>
                
                #line 209
                mov r10.xyz, -r0.xyzx  // S221<0:NaN,1:NaN,2:NaN>
                add r11.xyz, r10.xyzx, l(1.000000, 0.000000, 0.000000, 0.000000)  // S222<0:NaN,1:NaN,2:NaN>
                add r12.xyz, r10.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)  // S211<0:NaN,1:NaN,2:NaN>
                add r13.xyz, r10.xyzx, l(1.000000, 1.000000, 0.000000, 0.000000)  // S212<0:NaN,1:NaN,2:NaN>
                
                #line 215
                add r14.xyz, r10.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)  // S121<0:NaN,1:NaN,2:NaN>
                add r15.xyz, r10.xyzx, l(1.000000, 0.000000, 1.000000, 0.000000)  // S122<0:NaN,1:NaN,2:NaN>
                add r16.xyz, r10.xyzx, l(0.000000, 1.000000, 1.000000, 0.000000)  // S111<0:NaN,1:NaN,2:NaN>
                add r17.xyz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // S112<0:NaN,1:NaN,2:NaN>
                
                #line 222
                dp3 r1.z, r4.xyzx, r10.xyzx  // Q221<0:NaN:Inf>
                dp3 r1.w, r5.xyzx, r11.xyzx  // Q222<0:NaN:Inf>
                dp3 r2.w, r6.xyzx, r12.xyzx  // Q211<0:NaN:Inf>
                dp3 r3.w, r7.xyzx, r13.xyzx  // Q212<0:NaN:Inf>
                
                #line 228
                dp3 r3.x, r3.xyzx, r14.xyzx  // Q121<0:NaN:Inf>
                dp3 r3.y, r8.xyzx, r15.xyzx  // Q122<0:NaN:Inf>
                dp3 r3.z, r9.xyzx, r16.xyzx  // Q111<0:NaN:Inf>
                dp3 r2.x, r2.xyzx, r17.xyzx  // Q112<0:NaN:Inf>
                
                #line 235
                nop 
                mov r0.xyz, r0.xyzx  // pt<0:NaN,1:NaN,2:NaN>
                
                #line 156
                mov r2.y, -r0.x
                add r2.y, r2.y, l(1.000000)
                mul r2.z, r2.y, r2.y
                mul r4.x, r2.z, l(1.000000)
                mul r4.x, r4.x, l(3.000000)
                mul r2.y, r2.y, l(1.000000)
                mul r2.y, r2.z, r2.y
                mul r2.y, r2.y, l(2.000000)
                mov r2.y, -r2.y
                add r2.y, r2.y, r4.x
                mov r2.z, -r0.y
                add r2.z, r2.z, l(1.000000)
                mul r4.x, r2.z, r2.z
                mul r4.y, r4.x, l(1.000000)
                mul r4.y, r4.y, l(3.000000)
                mul r2.z, r2.z, l(1.000000)
                mul r2.z, r4.x, r2.z
                mul r2.z, r2.z, l(2.000000)
                mov r2.z, -r2.z
                add r2.z, r2.z, r4.y
                mul r4.x, r2.z, r2.y
                mov r4.y, -r0.z
                add r4.y, r4.y, l(1.000000)
                mul r4.z, r4.y, r4.y
                mul r4.w, r4.z, l(1.000000)
                mul r4.w, r4.w, l(3.000000)
                mul r4.y, r4.y, l(1.000000)
                mul r4.y, r4.z, r4.y
                mul r4.y, r4.y, l(2.000000)
                mov r4.y, -r4.y
                add r4.y, r4.y, r4.w
                mul r4.z, r4.y, r4.x  // SCurve221<0:NaN:Inf>
                
                #line 235
                mul r1.z, r1.z, r4.z
                nop 
                
                #line 155
                mul r4.z, r0.x, r0.x
                mul r4.w, r4.z, l(1.000000)
                mul r4.w, r4.w, l(3.000000)
                mul r0.x, r0.x, l(1.000000)
                mul r0.x, r4.z, r0.x
                mul r0.x, r0.x, l(2.000000)
                mov r0.x, -r0.x
                add r0.x, r0.x, r4.w
                mul r2.z, r2.z, r0.x
                mul r4.z, r4.y, r2.z  // SCurve222<0:NaN:Inf>
                
                #line 235
                mul r1.w, r1.w, r4.z
                add r1.z, r1.w, r1.z
                nop 
                
                #line 154
                mul r1.w, r0.y, r0.y
                mul r4.z, r1.w, l(1.000000)
                mul r4.z, r4.z, l(3.000000)
                mul r0.y, r0.y, l(1.000000)
                mul r0.y, r1.w, r0.y
                mul r0.y, r0.y, l(2.000000)
                mov r0.y, -r0.y
                add r0.y, r0.y, r4.z
                mul r1.w, r0.y, r2.y
                mul r2.y, r4.y, r1.w  // SCurve211<0:NaN:Inf>
                
                #line 235
                mul r2.y, r2.w, r2.y
                add r1.z, r1.z, r2.y
                nop 
                
                #line 153
                mul r0.x, r0.y, r0.x
                mul r0.y, r4.y, r0.x  // SCurve212<0:NaN:Inf>
                
                #line 235
                mul r0.y, r3.w, r0.y
                add r0.y, r0.y, r1.z
                nop 
                
                #line 150
                mul r1.z, r0.z, r0.z
                mul r2.y, r1.z, l(1.000000)
                mul r2.y, r2.y, l(3.000000)
                mul r0.z, r0.z, l(1.000000)
                mul r0.z, r1.z, r0.z
                mul r0.z, r0.z, l(2.000000)
                mov r0.z, -r0.z
                add r0.z, r0.z, r2.y
                mul r1.z, r0.z, r4.x  // SCurve121<0:NaN:Inf>
                
                #line 235
                mul r1.z, r3.x, r1.z
                add r0.y, r0.y, r1.z
                nop 
                
                #line 149
                mul r1.z, r0.z, r2.z  // SCurve122<0:NaN:Inf>
                
                #line 235
                mul r1.z, r3.y, r1.z
                add r0.y, r0.y, r1.z
                nop 
                
                #line 148
                mul r1.z, r0.z, r1.w  // SCurve111<0:NaN:Inf>
                
                #line 235
                mul r1.z, r3.z, r1.z
                add r0.y, r0.y, r1.z
                nop 
                
                #line 147
                mul r0.x, r0.z, r0.x  // SCurve112<0:NaN:Inf>
                
                #line 235
                mul r0.x, r2.x, r0.x
                add r0.x, r0.x, r0.y  // Q<0:NaN:Inf>
                mov r0.x, r0.x  // Sample3DGradient<0:NaN:Inf>
                
                #line 113 "TextureGenerator-RidgedPerlinMix1.fx"
                mov r0.x, r0.x  // texHP<0:NaN:Inf>
                nop 
                mov r0.x, r0.x  // tex<0:NaN:Inf>
                
                #line 54 "TextureGenerator-Utilities.fx"
                add r0.x, r0.x, l(0.500000)  // tex<0:NaN:Inf>
                
                #line 58
                mul r0.x, r0.x, l(1.000000)
                add r0.x, r0.x, l(0.000000)  // tex<0:NaN:Inf>
                mov r0.x, r0.x  // ScalePerlin<0:NaN:Inf>
                
                #line 114 "TextureGenerator-RidgedPerlinMix1.fx"
                mov r0.x, r0.x  // texHP<0:NaN:Inf>
                
                #line 117
                mov r0.y, -r1.y
                add r0.y, r0.y, r1.x
                mul r0.x, r0.y, r0.x
                add r0.x, r0.x, r1.y  // tex<0:NaN:Inf>
                
                #line 121
                mov r1.xyzw, vThreadID.xyzz
                mul r0.x, r0.w, r0.x
                mov r0.yzw, l(0,0,0,1.000000)
                store_uav_typed u0.xyzw, r1.xyzw, r0.xyzw  // gOutput3D<0>
                
                #line 82
                ret 
                // Approximately 822 instruction slots used
                            
            };
        }

    }

    technique11 SphericalGradientTech3D
    {
        pass P0
        {
            VertexShader = NULL;
            PixelShader = NULL;
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerOperationTexGenerator
                // {
                //
                //   float gTexDimensions[3];           // Offset:    0 Size:    36
                //   uint gSeed;                        // Offset:   36 Size:     4 [unused]
                //   float gLacunarity;                 // Offset:   40 Size:     4 [unused]
                //   uint gOctaves;                     // Offset:   44 Size:     4 [unused]
                //   uint gGradientsToUse[2];           // Offset:   48 Size:    20 [unused]
                //   float gGradients[162];             // Offset:   80 Size:  2580 [unused]
                //   uint g3DGradientsToUse[3];         // Offset: 2672 Size:    36 [unused]
                //   float g3DGradients[375];           // Offset: 2720 Size:  5988 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gOutput3D                             UAV  float4          3d    0        1
                // cbPerOperationTexGenerator        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[3], immediateIndexed
                dcl_uav_typed_texture3d (float,float,float,float) u0
                dcl_input vThreadID.xyz
                dcl_temps 2
                dcl_thread_group 256, 1, 1
                
                #line 11 "TextureGenerator-Functions.fx"
                itof r0.x, vThreadID.x
                div r0.x, r0.x, cb0[0].x  // p<0:NaN:Inf>
                itof r0.w, vThreadID.y
                div r0.y, r0.w, cb0[1].x  // p<1:NaN:Inf>
                itof r0.w, vThreadID.z
                div r0.z, r0.w, cb0[2].x  // p<2:NaN:Inf>
                
                #line 16
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x
                mul r0.x, r0.x, l(2.000000)
                mov r0.x, -r0.x
                add r0.x, r0.x, l(1.000000)  // value<0:NaN:Inf>
                mov r1.xyzw, vThreadID.xyzz
                mov r0.yzw, l(0,0,0,1.000000)
                store_uav_typed u0.xyzw, r1.xyzw, r0.xyzw  // gOutput3D<0>
                
                #line 8
                ret 
                // Approximately 17 instruction slots used
                            
            };
        }

    }

}

