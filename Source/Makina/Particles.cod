//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    bool    gEmitting;                  // Offset:    0, size:    4
    float3  gEyePosW;                   // Offset:    4, size:   12
    float3  gEmitPosW;                  // Offset:   16, size:   12
    float3  gEmitDirW;                  // Offset:   32, size:   12
    float   gGameTime;                  // Offset:   44, size:    4
    float   gTimeStep;                  // Offset:   48, size:    4
    float4x4 gViewProj;                 // Offset:   64, size:   64
    float3  gGravity = { 0, -9.80000019, 0 };// Offset:  128, size:   12
    float3  gWind = { 0 };              // Offset:  144, size:   12
    float3  gRainSpeed = { 0, -11, 0 }; // Offset:  160, size:   12
}

cbuffer cbFixed
{
    float2  gQuadTexC[4] = { 0, 0, 0, 1, 1, 0, 1, 1 };// Offset:    0, size:   56
}

//
// 8 local object(s)
//
Texture2DArray gTexArray;
Texture1D gRandomTex;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState NoDepthWrites
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
BlendState AdditiveBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
GeometryShader gsSparksStreamOut = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cbPerFrame
        // {
        //
        //   bool gEmitting;                    // Offset:    0 Size:     4
        //   float3 gEyePosW;                   // Offset:    4 Size:    12 [unused]
        //   float3 gEmitPosW;                  // Offset:   16 Size:    12
        //   float3 gEmitDirW;                  // Offset:   32 Size:    12
        //   float gGameTime;                   // Offset:   44 Size:     4
        //   float gTimeStep;                   // Offset:   48 Size:     4 [unused]
        //   float4x4 gViewProj;                // Offset:   64 Size:    64 [unused]
        //   float3 gGravity;                   // Offset:  128 Size:    12 [unused]
        //      = 0x00000000 0xc11ccccd 0x00000000 
        //   float3 gWind;                      // Offset:  144 Size:    12 [unused]
        //      = 0x00000000 0x00000000 0x00000000 
        //   float3 gRainSpeed;                 // Offset:  160 Size:    12 [unused]
        //      = 0x00000000 0xc1300000 0x00000000 
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim Slot Elements
        // ------------------------------ ---------- ------- ----------- ---- --------
        // samLinear                         sampler      NA          NA    0        1
        // gRandomTex                        texture  float4          1d    0        1
        // cbPerFrame                        cbuffer      NA          NA    0        1
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue Format   Used
        // -------------------- ----- ------ -------- -------- ------ ------
        // POSITION                 0   xyz         0     NONE  float   xyz 
        // VELOCITY                 0   xyz         1     NONE  float   xyz 
        // SIZE                     0   xy          2     NONE  float   xy  
        // AGE                      0     z         2     NONE  float     z 
        // TYPE                     0   x           3     NONE   uint   x   
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue Format   Used
        // -------------------- ----- ------ -------- -------- ------ ------
        // m0:POSITION              0   xyz         0     NONE  float   xyz 
        // m0:VELOCITY              0   xyz         1     NONE  float   xyz 
        // m0:SIZE                  0   xy          2     NONE  float   xy  
        // m0:AGE                   0     z         2     NONE  float     z 
        // m0:TYPE                  0   x           3     NONE   uint   x   
        //
        gs_5_0
        dcl_globalFlags refactoringAllowed
        dcl_constantbuffer cb0[3], immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource_texture1d (float,float,float,float) t0
        dcl_input v[1][0].xyz
        dcl_input v[1][1].xyz
        dcl_input v[1][2].xy
        dcl_input v[1][2].z
        dcl_input v[1][3].x
        dcl_temps 3
        dcl_inputprimitive point 
        dcl_stream m0
        dcl_outputtopology pointlist 
        dcl_output o0.xyz
        dcl_output o1.xyz
        dcl_output o2.xy
        dcl_output o2.z
        dcl_output o3.x
        dcl_maxout 6
        
        #line 34 "Particles-Sparks.fx"
        if_z v[0][3].x
        
        #line 37
          lt r0.x, l(0.002000), v[0][2].z
          ine r0.y, l(0, 0, 0, 0), cb0[0].x
          and r0.x, r0.y, r0.x
          if_nz r0.x
            mov r0.x, l(0)  // i<0: 0>
            mov r0.y, r0.x  // i<0>
            loop 
              ilt r0.z, r0.y, l(5)
              breakc_z r0.z
        
        #line 42
              nop 
              itof r0.z, r0.y
              div r0.z, r0.z, l(5.000000)  // offset<0:[-4.29497e+008f,4.29497e+008f]>
        
        #line 140 "Particles-Utilities.fx"
              add r0.z, r0.z, cb0[2].w  // u<0>
        
        #line 143
              sample_l_indexable(texture1d)(float,float,float,float) r1.xyz, r0.z, t0.xyzw, s0, l(0.000000)
              mov r1.xyz, r1.xyzx  // v<0:Inf,1:Inf,2:Inf>
              mov r1.xyz, r1.xyzx  // RandVec3<0:Inf,1:Inf,2:Inf>
        
        #line 42 "Particles-Sparks.fx"
              mov r1.xyz, r1.xyzx  // vRandom<0:Inf,1:Inf,2:Inf>
        
        #line 45
              mov r2.xyz, cb0[1].xyzx  // p<0,1,2>
              dp3 r0.z, cb0[2].xyzx, cb0[2].xyzx
              sqrt r0.z, r0.z
              mul r1.xyz, r0.zzzz, r1.xyzx
              mul r1.xyz, r1.xyzx, l(0.800000, 0.800000, 0.800000, 0.000000)
              add r1.xyz, r1.xyzx, cb0[2].xyzx  // p<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
              mov r0.zw, l(0,0,1.000000,1.000000)  // p<6: 1f,7: 1f>
              mov r1.w, l(1)  // p<9: 1u>
              mov o0.xyz, r2.xyzx  // ptStream<0,0,0>
              mov o1.xyz, r1.xyzx  // ptStream<0,0,0>
              mov o2.xy, r0.zwzz  // ptStream<0,0>
              mov o2.z, r0.x  // ptStream<0>
              mov o3.x, r1.w  // ptStream<0>
              emit_stream m0
        
        #line 39
              iadd r0.y, r0.y, l(1)  // i<0>
            endloop 
            mov r0.x, l(0)  // gin<8: 0f>
          else 
            mov r0.x, v[0][2].z  // gin<8>
          endif 
        
        #line 59
          mov o0.xyz, v[0][0].xyzx  // ptStream<0,0,0>
          mov o1.xyz, v[0][1].xyzx  // ptStream<0,0,0>
          mov o2.xy, v[0][2].xyxx  // ptStream<0,0>
          mov o2.z, r0.x  // ptStream<0>
          mov o3.x, v[0][3].x  // ptStream<0>
          emit_stream m0
        
        #line 34
        else 
        
        #line 64
          dp3 r0.x, cb0[2].xyzx, cb0[2].xyzx
          sqrt r0.x, r0.x
          div r0.x, v[0][1].x, r0.x
          mul r0.x, r0.x, l(0.500000)
          add r0.x, r0.x, l(0.500000)
          ge r0.x, r0.x, v[0][2].z
          if_nz r0.x
            mov o0.xyz, v[0][0].xyzx  // ptStream<0,0,0>
            mov o1.xyz, v[0][1].xyzx  // ptStream<0,0,0>
            mov o2.xyz, v[0][2].xyzx  // ptStream<0,0,0>
            mov o3.x, v[0][3].x  // ptStream<0>
            emit_stream m0
          endif 
        
        #line 34
        endif 
        
        #line 31
        ret 
        // Approximately 60 instruction slots used
            
    }
/* Stream out decl: "POSITION.xyz; VELOCITY.xyz; SIZE.xy; AGE.x; TYPE.x" */;
GeometryShader gsFireStreamOut = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cbPerFrame
        // {
        //
        //   bool gEmitting;                    // Offset:    0 Size:     4
        //   float3 gEyePosW;                   // Offset:    4 Size:    12 [unused]
        //   float3 gEmitPosW;                  // Offset:   16 Size:    12
        //   float3 gEmitDirW;                  // Offset:   32 Size:    12
        //   float gGameTime;                   // Offset:   44 Size:     4
        //   float gTimeStep;                   // Offset:   48 Size:     4 [unused]
        //   float4x4 gViewProj;                // Offset:   64 Size:    64 [unused]
        //   float3 gGravity;                   // Offset:  128 Size:    12 [unused]
        //      = 0x00000000 0xc11ccccd 0x00000000 
        //   float3 gWind;                      // Offset:  144 Size:    12 [unused]
        //      = 0x00000000 0x00000000 0x00000000 
        //   float3 gRainSpeed;                 // Offset:  160 Size:    12 [unused]
        //      = 0x00000000 0xc1300000 0x00000000 
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim Slot Elements
        // ------------------------------ ---------- ------- ----------- ---- --------
        // samLinear                         sampler      NA          NA    0        1
        // gRandomTex                        texture  float4          1d    0        1
        // cbPerFrame                        cbuffer      NA          NA    0        1
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue Format   Used
        // -------------------- ----- ------ -------- -------- ------ ------
        // POSITION                 0   xyz         0     NONE  float   xyz 
        // VELOCITY                 0   xyz         1     NONE  float   xyz 
        // SIZE                     0   xy          2     NONE  float   xy  
        // AGE                      0     z         2     NONE  float     z 
        // TYPE                     0   x           3     NONE   uint   x   
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue Format   Used
        // -------------------- ----- ------ -------- -------- ------ ------
        // m0:POSITION              0   xyz         0     NONE  float   xyz 
        // m0:VELOCITY              0   xyz         1     NONE  float   xyz 
        // m0:SIZE                  0   xy          2     NONE  float   xy  
        // m0:AGE                   0     z         2     NONE  float     z 
        // m0:TYPE                  0   x           3     NONE   uint   x   
        //
        gs_5_0
        dcl_globalFlags refactoringAllowed
        dcl_constantbuffer cb0[3], immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource_texture1d (float,float,float,float) t0
        dcl_input v[1][0].xyz
        dcl_input v[1][1].xyz
        dcl_input v[1][2].xy
        dcl_input v[1][2].z
        dcl_input v[1][3].x
        dcl_temps 3
        dcl_inputprimitive point 
        dcl_stream m0
        dcl_outputtopology pointlist 
        dcl_output o0.xyz
        dcl_output o1.xyz
        dcl_output o2.xy
        dcl_output o2.z
        dcl_output o3.x
        dcl_maxout 21
        
        #line 48 "Particles-Fire.fx"
        if_z v[0][3].x
        
        #line 51
          lt r0.x, l(0.002000), v[0][2].z
          ine r0.y, l(0, 0, 0, 0), cb0[0].x
          and r0.x, r0.y, r0.x
          if_nz r0.x
            mov r0.x, l(0)  // i<0: 0>
            mov r0.y, r0.x  // i<0>
            loop 
              ilt r0.z, r0.y, l(20)
              breakc_z r0.z
        
        #line 56
              nop 
              itof r0.z, r0.y
              div r0.w, r0.z, l(20.000000)  // offset<0:[-1.07374e+008f,1.07374e+008f]>
        
        #line 140 "Particles-Utilities.fx"
              add r0.w, r0.w, cb0[2].w  // u<0>
        
        #line 143
              sample_l_indexable(texture1d)(float,float,float,float) r1.xyz, r0.w, t0.xyzw, s0, l(0.000000)
              mov r1.xyz, r1.xyzx  // v<0:Inf,1:Inf,2:Inf>
              mov r1.xyz, r1.xyzx  // RandVec3<0:Inf,1:Inf,2:Inf>
        
        #line 56 "Particles-Fire.fx"
              mov r1.xyz, r1.xyzx  // vRandom3<0:Inf,1:Inf,2:Inf>
              nop 
              add r0.z, r0.z, l(1.000000)
              div r0.z, r0.z, l(20.000000)  // offset<0:[-1.07374e+008f,1.07374e+008f]>
        
        #line 151 "Particles-Utilities.fx"
              add r0.z, r0.z, cb0[2].w  // u<0>
        
        #line 154
              sample_l_indexable(texture1d)(float,float,float,float) r0.zw, r0.z, t0.zwxy, s0, l(0.000000)
              mov r0.zw, r0.zzzw  // v<0:Inf,1:Inf>
              mov r0.zw, r0.zzzw  // RandVec2<0:Inf,1:Inf>
        
        #line 57 "Particles-Fire.fx"
              mov r0.zw, r0.zzzw  // vRandom2<0:Inf,1:Inf>
        
        #line 60
              mul r2.xz, r1.xxyx, l(0.400000, 0.000000, 0.400000, 0.000000)
              mov r2.y, l(0)
              add r2.xyz, r2.xyzx, cb0[1].xyzx  // p<0:Inf,1,2:Inf>
              mul r1.xyz, r1.xyzx, l(0.400000, 0.400000, 0.400000, 0.000000)
              mov r1.xyz, -r1.xyzx
              add r1.xyz, r1.xyzx, cb0[2].xyzx  // p<3:Inf,4:Inf,5:Inf>
              mul r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
              add r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)  // p<6:Inf,7:Inf>
              mov r1.w, l(1)  // p<9: 1u>
              mov o0.xyz, r2.xyzx  // ptStream<0,0,0>
              mov o1.xyz, r1.xyzx  // ptStream<0,0,0>
              mov o2.xy, r0.zwzz  // ptStream<0,0>
              mov o2.z, r0.x  // ptStream<0>
              mov o3.x, r1.w  // ptStream<0>
              emit_stream m0
        
        #line 53
              iadd r0.y, r0.y, l(1)  // i<0>
            endloop 
            mov r0.x, l(0)  // gin<8: 0f>
          else 
            mov r0.x, v[0][2].z  // gin<8>
          endif 
        
        #line 74
          mov o0.xyz, v[0][0].xyzx  // ptStream<0,0,0>
          mov o1.xyz, v[0][1].xyzx  // ptStream<0,0,0>
          mov o2.xy, v[0][2].xyxx  // ptStream<0,0>
          mov o2.z, r0.x  // ptStream<0>
          mov o3.x, v[0][3].x  // ptStream<0>
          emit_stream m0
        
        #line 48
        else 
        
        #line 79
          ge r0.x, l(0.900000), v[0][2].z
          if_nz r0.x
            mov o0.xyz, v[0][0].xyzx  // ptStream<0,0,0>
            mov o1.xyz, v[0][1].xyzx  // ptStream<0,0,0>
            mov o2.xyz, v[0][2].xyzx  // ptStream<0,0,0>
            mov o3.x, v[0][3].x  // ptStream<0>
            emit_stream m0
          endif 
        
        #line 48
        endif 
        
        #line 45
        ret 
        // Approximately 64 instruction slots used
            
    }
/* Stream out decl: "POSITION.xyz; VELOCITY.xyz; SIZE.xy; AGE.x; TYPE.x" */;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 4 technique(s)
    //
    technique11 SparksUpdate
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   bool gEmitting;                    // Offset:    0 Size:     4 [unused]
                //   float3 gEyePosW;                   // Offset:    4 Size:    12 [unused]
                //   float3 gEmitPosW;                  // Offset:   16 Size:    12 [unused]
                //   float3 gEmitDirW;                  // Offset:   32 Size:    12 [unused]
                //   float gGameTime;                   // Offset:   44 Size:     4 [unused]
                //   float gTimeStep;                   // Offset:   48 Size:     4
                //   float4x4 gViewProj;                // Offset:   64 Size:    64 [unused]
                //   float3 gGravity;                   // Offset:  128 Size:    12
                //      = 0x00000000 0xc11ccccd 0x00000000 
                //   float3 gWind;                      // Offset:  144 Size:    12
                //      = 0x00000000 0x00000000 0x00000000 
                //   float3 gRainSpeed;                 // Offset:  160 Size:    12 [unused]
                //      = 0x00000000 0xc1300000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // VELOCITY                 0   xyz         1     NONE  float   xyz 
                // SIZE                     0   xy          2     NONE  float   xy  
                // AGE                      0   x           3     NONE  float   x   
                // TYPE                     0   x           4     NONE   uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // VELOCITY                 0   xyz         1     NONE  float   xyz 
                // SIZE                     0   xy          2     NONE  float   xy  
                // AGE                      0     z         2     NONE  float     z 
                // TYPE                     0   x           3     NONE   uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[10], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_output o3.x
                dcl_temps 2
                
                #line 12 "Particles-Sparks.fx"
                add r0.x, v3.x, cb0[3].x  // vin<8:Inf>
                
                #line 16
                mov r0.yzw, -v1.xxyz
                add r0.yzw, r0.yyzw, cb0[9].xxyz
                mul r0.yzw, r0.yyzw, l(0.000000, 0.300000, 0.300000, 0.300000)  // windAcc<0:[-2.04169e+038f,2.04169e+038f],1:[-2.04169e+038f,2.04169e+038f],2:[-2.04169e+038f,2.04169e+038f]>
                add r0.yzw, r0.yyzw, cb0[8].xxyz
                mul r0.yzw, r0.yyzw, cb0[3].xxxx
                add r0.yzw, r0.yyzw, v1.xxyz  // vin<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mul r1.xyz, r0.yzwy, cb0[3].xxxx
                add r1.xyz, r1.xyzx, v0.xyzx  // vin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r1.xyzx  // StreamOutSparksVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o1.xyz, r0.yzwy  // StreamOutSparksVS<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov o2.xy, v2.xyxx  // StreamOutSparksVS<6,7>
                mov o2.z, r0.x  // StreamOutSparksVS<8:Inf>
                mov o3.x, v4.x  // StreamOutSparksVS<9>
                ret 
                // Approximately 15 instruction slots used
                            
            };
            GeometryShader = gsSparksStreamOut;
            PixelShader = NULL;
            DS_StencilRef = uint(0);
            DepthStencilState = DisableDepth;
        }

    }

    technique11 SparksDraw
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // VELOCITY                 0   xyz         1     NONE  float   xyz 
                // SIZE                     0   xy          2     NONE  float       
                // AGE                      0   x           3     NONE  float       
                // TYPE                     0   x           4     NONE   uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // POSITION                 1   xyz         1     NONE  float   xyz 
                // TYPE                     0   x           2     NONE   uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.x
                dcl_temps 2
                
                #line 76 "Particles-Sparks.fx"
                mov r0.xyz, v0.xyzx  // vOut<0,1,2>
                dp3 r0.w, v1.xyzx, v1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v1.xyzx  // vOut<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov r0.w, v4.x  // vOut<6>
                mov o0.xyz, r0.xyzx  // DrawSparksVS<0,1,2>
                mov o1.xyz, r1.xyzx  // DrawSparksVS<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov o2.x, r0.w  // DrawSparksVS<6>
                ret 
                // Approximately 9 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   bool gEmitting;                    // Offset:    0 Size:     4 [unused]
                //   float3 gEyePosW;                   // Offset:    4 Size:    12 [unused]
                //   float3 gEmitPosW;                  // Offset:   16 Size:    12 [unused]
                //   float3 gEmitDirW;                  // Offset:   32 Size:    12 [unused]
                //   float gGameTime;                   // Offset:   44 Size:     4 [unused]
                //   float gTimeStep;                   // Offset:   48 Size:     4 [unused]
                //   float4x4 gViewProj;                // Offset:   64 Size:    64
                //   float3 gGravity;                   // Offset:  128 Size:    12 [unused]
                //      = 0x00000000 0xc11ccccd 0x00000000 
                //   float3 gWind;                      // Offset:  144 Size:    12 [unused]
                //      = 0x00000000 0x00000000 0x00000000 
                //   float3 gRainSpeed;                 // Offset:  160 Size:    12 [unused]
                //      = 0x00000000 0xc1300000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // POSITION                 1   xyz         1     NONE  float   xyz 
                // TYPE                     0   x           2     NONE   uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // m0:SV_Position           0   xyzw        0      POS  float   xyzw
                // m0:COLOR                 0   xyz         1     NONE  float   xyz 
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xyz
                dcl_input v[1][2].x
                dcl_temps 3
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology linestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_maxout 2
                
                #line 88 "Particles-Sparks.fx"
                if_nz v[0][2].x
                
                #line 92
                  mul r0.xyz, l(0.050000, 0.050000, 0.050000, 0.000000), v[0][1].xyzx
                  add r0.xyz, r0.xyzx, v[0][0].xyzx  // p1<0:Inf,1:Inf,2:Inf>
                
                #line 95
                  mov r1.xyz, v[0][0].xyzx
                  mov r1.w, l(1.000000)
                  dp4 r2.x, r1.xyzw, cb0[4].xyzw  // v0<0:NaN:Inf>
                  dp4 r2.y, r1.xyzw, cb0[5].xyzw  // v0<1:NaN:Inf>
                  dp4 r2.z, r1.xyzw, cb0[6].xyzw  // v0<2:NaN:Inf>
                  dp4 r2.w, r1.xyzw, cb0[7].xyzw  // v0<3:NaN:Inf>
                  mov r1.xyz, l(1.000000,0.740000,0.180000,0)  // v0<4: 1f,5: 0.74f,6: 0.18f>
                  mov o0.xyzw, r2.xyzw  // lineStream<0,0,0,0>
                  mov o1.xyz, r1.xyzx  // lineStream<0,0,0>
                  emit_stream m0
                
                #line 100
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[4].xyzw  // v1<0:NaN:Inf>
                  dp4 r1.y, r0.xyzw, cb0[5].xyzw  // v1<1:NaN:Inf>
                  dp4 r1.z, r0.xyzw, cb0[6].xyzw  // v1<2:NaN:Inf>
                  dp4 r1.w, r0.xyzw, cb0[7].xyzw  // v1<3:NaN:Inf>
                  mov r0.xyz, l(1.000000,1.000000,1.000000,0)  // v1<4: 1f,5: 1f,6: 1f>
                  mov o0.xyzw, r1.xyzw  // lineStream<0,0,0,0>
                  mov o1.xyz, r0.xyzx  // lineStream<0,0,0>
                  emit_stream m0
                
                #line 88
                endif 
                
                #line 85
                ret 
                // Approximately 24 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Position              0   xyzw        0      POS  float       
                // COLOR                    0   xyz         1     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.xyz
                dcl_output o0.xyzw
                
                #line 108 "Particles-Sparks.fx"
                mov o0.xyz, v1.xyzx  // DrawSparksPS<0,1,2>
                mov o0.w, l(1.000000)  // DrawSparksPS<3: 1f>
                ret 
                // Approximately 3 instruction slots used
                            
            };
            DS_StencilRef = uint(0);
            DepthStencilState = NoDepthWrites;
        }

    }

    technique11 FireUpdate
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   bool gEmitting;                    // Offset:    0 Size:     4 [unused]
                //   float3 gEyePosW;                   // Offset:    4 Size:    12 [unused]
                //   float3 gEmitPosW;                  // Offset:   16 Size:    12 [unused]
                //   float3 gEmitDirW;                  // Offset:   32 Size:    12 [unused]
                //   float gGameTime;                   // Offset:   44 Size:     4
                //   float gTimeStep;                   // Offset:   48 Size:     4
                //   float4x4 gViewProj;                // Offset:   64 Size:    64 [unused]
                //   float3 gGravity;                   // Offset:  128 Size:    12
                //      = 0x00000000 0xc11ccccd 0x00000000 
                //   float3 gWind;                      // Offset:  144 Size:    12
                //      = 0x00000000 0x00000000 0x00000000 
                //   float3 gRainSpeed;                 // Offset:  160 Size:    12 [unused]
                //      = 0x00000000 0xc1300000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // VELOCITY                 0   xyz         1     NONE  float   xyz 
                // SIZE                     0   xy          2     NONE  float   xy  
                // AGE                      0   x           3     NONE  float   x   
                // TYPE                     0   x           4     NONE   uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // VELOCITY                 0   xyz         1     NONE  float   xyz 
                // SIZE                     0   xy          2     NONE  float   xy  
                // AGE                      0     z         2     NONE  float     z 
                // TYPE                     0   x           3     NONE   uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[10], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_output o3.x
                dcl_temps 3
                
                #line 26 "Particles-Fire.fx"
                add r0.x, v3.x, cb0[3].x  // vin<8:Inf>
                
                #line 30
                mov r0.yzw, -v1.xxyz
                add r0.yzw, r0.yyzw, cb0[9].xxyz
                mul r0.yzw, r0.yyzw, l(0.000000, 0.300000, 0.300000, 0.300000)  // windAcc<0:[-2.04169e+038f,2.04169e+038f],1:[-2.04169e+038f,2.04169e+038f],2:[-2.04169e+038f,2.04169e+038f]>
                
                #line 33
                add r0.yzw, r0.yyzw, cb0[8].xxyz
                add r0.yzw, r0.yyzw, l(0.000000, 0.000000, 18.000000, 0.000000)
                nop 
                mov r1.xyz, v0.xyzx  // i<0,1,2>
                
                #line 17
                mul r1.x, r1.x, l(10.000000)
                add r1.x, r1.y, r1.x
                mul r1.w, cb0[2].w, l(3.000000)
                add r1.x, r1.w, r1.x
                sincos r1.x, null, r1.x
                mul r1.z, r1.z, l(10.000000)
                add r1.y, r1.y, r1.z
                mul r1.z, cb0[2].w, l(2.000000)
                add r1.z, r1.z, r1.y
                sincos r1.z, null, r1.z
                add r2.x, r1.z, r1.x  // x<0:NaN>
                add r1.x, r1.w, r1.y
                sincos r1.x, null, r1.x
                add r2.z, r1.z, r1.x  // z<0:NaN>
                mov r2.x, r2.x  // flameVecField<0:NaN>
                mov r2.y, l(0)  // flameVecField<1: 0f>
                mov r2.z, r2.z  // flameVecField<2:NaN>
                
                #line 33
                add r0.yzw, r0.yyzw, r2.xxyz
                mul r0.yzw, r0.yyzw, cb0[3].xxxx
                add r0.yzw, r0.yyzw, v1.xxyz  // vin<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mul r1.xyz, r0.yzwy, cb0[3].xxxx
                add r1.xyz, r1.xyzx, v0.xyzx  // vin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r1.xyzx  // StreamOutFireVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o1.xyz, r0.yzwy  // StreamOutFireVS<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov o2.xy, v2.xyxx  // StreamOutFireVS<6,7>
                mov o2.z, r0.x  // StreamOutFireVS<8:Inf>
                mov o3.x, v4.x  // StreamOutFireVS<9>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = gsFireStreamOut;
            PixelShader = NULL;
            DS_StencilRef = uint(0);
            DepthStencilState = DisableDepth;
        }

    }

    technique11 FireDraw
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // VELOCITY                 0   xyz         1     NONE  float   xyz 
                // SIZE                     0   xy          2     NONE  float   xy  
                // AGE                      0   x           3     NONE  float   x   
                // TYPE                     0   x           4     NONE   uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // POSITION                 1   xyz         1     NONE  float   xyz 
                // TYPE                     0   x           2     NONE   uint   x   
                // SIZE                     0   xy          3     NONE  float   xy  
                // OPACITY                  0     z         3     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.x
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 3
                
                #line 97 "Particles-Fire.fx"
                mov r0.xyz, v0.xyzx  // vOut<0,1,2>
                dp3 r0.w, v1.xyzx, v1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v1.xyzx  // vOut<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov r0.w, v4.x  // vOut<6>
                mov r2.xy, v2.xyxx  // vOut<7,8>
                nop 
                mov r1.w, v3.x  // x<0>
                
                #line 90
                div r1.w, r1.w, l(0.900000)
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(1.000000)  // t<0:[0f,1f]>
                mul r1.w, r1.w, r1.w
                mul r2.z, r1.w, l(1.000000)
                mul r1.w, r1.w, r1.w
                mul r2.z, r1.w, r2.z
                mul r2.z, r2.z, l(2.000000)
                mul r1.w, r1.w, l(1.000000)
                mul r1.w, r1.w, l(3.000000)
                mov r1.w, -r1.w
                add r1.w, r1.w, r2.z
                add r1.w, r1.w, l(1.000000)  // OpacityF<0:[-2f,3f]>
                
                #line 101
                mov r1.w, r1.w  // vOut<9:[-2f,3f]>
                mov o0.xyz, r0.xyzx  // DrawFireVS<0,1,2>
                mov o1.xyz, r1.xyzx  // DrawFireVS<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov o2.x, r0.w  // DrawFireVS<6>
                mov o3.xy, r2.xyxx  // DrawFireVS<7,8>
                mov o3.z, r1.w  // DrawFireVS<9:[-2f,3f]>
                ret 
                // Approximately 28 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   bool gEmitting;                    // Offset:    0 Size:     4 [unused]
                //   float3 gEyePosW;                   // Offset:    4 Size:    12
                //   float3 gEmitPosW;                  // Offset:   16 Size:    12 [unused]
                //   float3 gEmitDirW;                  // Offset:   32 Size:    12 [unused]
                //   float gGameTime;                   // Offset:   44 Size:     4 [unused]
                //   float gTimeStep;                   // Offset:   48 Size:     4 [unused]
                //   float4x4 gViewProj;                // Offset:   64 Size:    64
                //   float3 gGravity;                   // Offset:  128 Size:    12 [unused]
                //      = 0x00000000 0xc11ccccd 0x00000000 
                //   float3 gWind;                      // Offset:  144 Size:    12 [unused]
                //      = 0x00000000 0x00000000 0x00000000 
                //   float3 gRainSpeed;                 // Offset:  160 Size:    12 [unused]
                //      = 0x00000000 0xc1300000 0x00000000 
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float2 gQuadTexC[4];               // Offset:    0 Size:    56
                //      = 0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // POSITION                 1   xyz         1     NONE  float       
                // TYPE                     0   x           2     NONE   uint   x   
                // SIZE                     0   xy          3     NONE  float   xy  
                // OPACITY                  0     z         3     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // m0:SV_Position           0   xyzw        0      POS  float   xyzw
                // m0:TEXCOORD              0   xy          1     NONE  float   xy  
                // m0:OPACITY               0     z         1     NONE  float     z 
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xyz
                dcl_input v[1][2].x
                dcl_input v[1][3].xy
                dcl_input v[1][3].z
                dcl_temps 5
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o1.z
                dcl_maxout 4
                
                #line 111 "Particles-Fire.fx"
                if_nz v[0][2].x
                
                #line 116
                  mov r0.xyz, -v[0][0].zxyz
                  add r0.xyz, r0.xyzx, cb0[0].wyzw
                  dp3 r0.w, r0.xyzx, r0.xyzx
                  rsq r0.w, r0.w
                  mul r0.xyz, r0.wwww, r0.xyzx  // look<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  mul r1.xyz, r0.xyzx, l(1.000000, 0.000000, 0.000000, 0.000000)
                  mul r2.xyz, r0.zxyz, l(0.000000, 0.000000, 1.000000, 0.000000)
                  mov r2.xyz, -r2.xyzx
                  add r1.xyz, r1.xyzx, r2.xyzx
                  dp3 r0.w, r1.xyzx, r1.xyzx
                  rsq r0.w, r0.w
                  mul r1.xyz, r0.wwww, r1.xyzx  // right<0:NaN:Inf,1: 0f,2:NaN:Inf>
                  mul r2.xyz, r0.zxyz, r1.zxyz
                  mul r0.xyz, r0.xyzx, r1.yzxy
                  mov r0.xyz, -r0.xyzx
                  add r0.xyz, r0.xyzx, r2.xyzx  // up<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 123
                  mul r0.w, l(0.500000), v[0][3].x  // halfWidth<0:[-1.70141e+038f,1.70141e+038f]>
                  mul r1.w, l(0.500000), v[0][3].y  // halfHeight<0:[-1.70141e+038f,1.70141e+038f]>
                
                #line 127
                  mul r1.xyz, r1.xyzx, r0.wwww
                  add r2.xyz, r1.xyzx, v[0][0].xyzx
                  mul r0.xyz, r0.xyzx, r1.wwww
                  mov r3.xyz, -r0.xyzx
                  add r4.xyz, r2.xyzx, r3.xyzx
                  add r2.xyz, r0.xyzx, r2.xyzx
                  mov r1.xyz, -r1.xyzx
                  add r1.xyz, r1.xyzx, v[0][0].xyzx
                  add r3.xyz, r3.xyzx, r1.xyzx
                  add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 140
                  mov r4.w, l(1.000000)
                  dp4 r1.x, r4.xyzw, cb0[4].xyzw  // gout<0:NaN:Inf>
                  dp4 r1.y, r4.xyzw, cb0[5].xyzw  // gout<1:NaN:Inf>
                  dp4 r1.z, r4.xyzw, cb0[6].xyzw  // gout<2:NaN:Inf>
                  dp4 r1.w, r4.xyzw, cb0[7].xyzw  // gout<3:NaN:Inf>
                  mov r4.xy, cb1[0].xyxx  // gout<4,5>
                  mov r4.z, v[0][3].z  // gout<6>
                  mov o0.xyzw, r1.xyzw  // triStream<0,0,0,0>
                  mov o1.xy, r4.xyxx  // triStream<0,0>
                  mov o1.z, r4.z  // triStream<0>
                  emit_stream m0
                
                #line 140
                  mov r2.w, l(1.000000)
                  dp4 r1.x, r2.xyzw, cb0[4].xyzw  // gout<0:NaN:Inf>
                  dp4 r1.y, r2.xyzw, cb0[5].xyzw  // gout<1:NaN:Inf>
                  dp4 r1.z, r2.xyzw, cb0[6].xyzw  // gout<2:NaN:Inf>
                  dp4 r1.w, r2.xyzw, cb0[7].xyzw  // gout<3:NaN:Inf>
                  mov r2.xy, cb1[1].xyxx  // gout<4,5>
                  mov o0.xyzw, r1.xyzw  // triStream<0,0,0,0>
                  mov o1.xy, r2.xyxx  // triStream<0,0>
                  mov o1.z, r4.z  // triStream<0>
                  emit_stream m0
                
                #line 140
                  mov r3.w, l(1.000000)
                  dp4 r1.x, r3.xyzw, cb0[4].xyzw  // gout<0:NaN:Inf>
                  dp4 r1.y, r3.xyzw, cb0[5].xyzw  // gout<1:NaN:Inf>
                  dp4 r1.z, r3.xyzw, cb0[6].xyzw  // gout<2:NaN:Inf>
                  dp4 r1.w, r3.xyzw, cb0[7].xyzw  // gout<3:NaN:Inf>
                  mov r2.xy, cb1[2].xyxx  // gout<4,5>
                  mov o0.xyzw, r1.xyzw  // triStream<0,0,0,0>
                  mov o1.xy, r2.xyxx  // triStream<0,0>
                  mov o1.z, r4.z  // triStream<0>
                  emit_stream m0
                
                #line 140
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[4].xyzw  // gout<0:NaN:Inf>
                  dp4 r1.y, r0.xyzw, cb0[5].xyzw  // gout<1:NaN:Inf>
                  dp4 r1.z, r0.xyzw, cb0[6].xyzw  // gout<2:NaN:Inf>
                  dp4 r1.w, r0.xyzw, cb0[7].xyzw  // gout<3:NaN:Inf>
                  mov r0.xy, cb1[3].xyxx  // gout<4,5>
                  mov o0.xyzw, r1.xyzw  // triStream<0,0,0,0>
                  mov o1.xy, r0.xyxx  // triStream<0,0>
                  mov o1.z, r4.z  // triStream<0>
                  emit_stream m0
                
                #line 111
                endif 
                
                #line 108
                ret 
                // Approximately 72 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gTexArray                         texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Position              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // OPACITY                  0     z         1     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v1.z
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 150 "Particles-Fire.fx"
                mov r0.z, l(1.000000)
                mov r0.xy, v1.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0
                mul o0.xyzw, r0.xyzw, v1.zzzz  // DrawFirePS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 5 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = AdditiveBlending;
            DS_StencilRef = uint(0);
            DepthStencilState = NoDepthWrites;
        }

    }

}

