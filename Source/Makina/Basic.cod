//
// FX Version: fx_5_0
//
// 4 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLight;         // Offset:    0, size:   64
    PointLight gPointLight;             // Offset:   64, size:   80
    SpotLight gSpotLight;               // Offset:  144, size:   96
    float3  gEyePosW;                   // Offset:  240, size:   12
    float4x4 gViewProj;                 // Offset:  256, size:   64
    float   gZNear;                     // Offset:  320, size:    4
    float   gZFar;                      // Offset:  324, size:    4
    float   gHeightScale;               // Offset:  328, size:    4
    float   gMaxTessDistance;           // Offset:  332, size:    4
    float   gMinTessDistance;           // Offset:  336, size:    4
    float   gMinTessFactor;             // Offset:  340, size:    4
    float   gMaxTessFactor;             // Offset:  344, size:    4
}

cbuffer cbPerObjectBasic
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    Material gMaterial;                 // Offset:  192, size:   64
    float4x4 gTexTransform;             // Offset:  256, size:   64
}

cbuffer cbPerObjectAdvanced
{
    float4x4 gWorldViewProjTex;         // Offset:    0, size:   64
    float4x4 gWorldView;                // Offset:   64, size:   64
    float4x4 gWorldInvTransposeView;    // Offset:  128, size:   64
    float4x4 gShadowTransform;          // Offset:  192, size:   64
    float   gShadowMapSize;             // Offset:  256, size:    4
    float   gReflection;                // Offset:  260, size:    4
}

cbuffer cbSkinned
{
    float4x4 gBoneTransforms[96];       // Offset:    0, size: 6144
}

//
// 15 local object(s)
//
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState NoDepthWrites
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
BlendState AdditiveBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
RasterizerState Depth
{
    DepthBias = uint(0x00004e20);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
    CullMode = uint(NONE /* 1 */);
};
RasterizerState NoCulling
{
    CullMode = uint(NONE /* 1 */);
};
Texture2D gDiffuseMap;
Texture2D gNormalMap;
TextureCube gCubeMap;
Texture2D gShadowMap;
Texture2D gSsaoMap;
SamplerState fastSampler
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState linearSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerComparisonState samShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};
RasterizerState BackfaceCull
{
    CullMode = uint(BACK /* 3 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 24 technique(s)
    //
    technique11 DepthOnlyTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float       
                // TANGENT                  0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_temps 2
                
                #line 28 "Basic-NormalDepthTech.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                mov o0.xyzw, r1.xyzw  // VSDepthOnlyTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 8 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = NULL;
            RasterizerState = Depth;
        }

    }

    technique11 DepthOnlyAlphaClipTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                
                #line 15 "Basic-NormalDepthTech.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 18
                mov r0.xy, v1.xyxx  // vOut<4,5>
                mov o0.xyzw, r1.xyzw  // VSDepthOnlyAlphaClipTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xy, r0.xyxx  // VSDepthOnlyAlphaClipTech<4,5>
                ret 
                // Approximately 10 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Output
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_temps 1
                
                #line 35 "Basic-NormalDepthTech.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
                mov r0.x, r0.x  // diffuse<0:Inf>
                
                #line 38
                add r0.x, r0.x, l(-0.150000)
                lt r0.x, r0.x, l(0.000000)
                and r0.x, r0.x, l(-1)
                discard r0.x
                
                #line 33
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 NormalAndDepth16BitTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:   64 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   float gShadowMapSize;              // Offset:  256 Size:     4 [unused]
                //   float gReflection;                 // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                
                #line 50 "Basic-NormalDepthTech.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 53
                dp4 r2.x, r0.xyzw, cb1[4].xyzw  // vOut<4:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb1[5].xyzw  // vOut<5:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb1[6].xyzw  // vOut<6:NaN:Inf>
                dp4 r2.w, r0.xyzw, cb1[7].xyzw  // vOut<7:NaN:Inf>
                dp3 r0.x, v1.xyzx, cb1[8].xyzx  // vOut<8:NaN:Inf>
                dp3 r0.y, v1.xyzx, cb1[9].xyzx  // vOut<9:NaN:Inf>
                dp3 r0.z, v1.xyzx, cb1[10].xyzx  // vOut<10:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb1[8].xyzx  // vOut<11:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb1[9].xyzx  // vOut<12:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb1[10].xyzx  // vOut<13:NaN:Inf>
                
                #line 58
                mov r4.xy, v3.xyxx  // vOut<14,15>
                mov o0.xyzw, r1.xyzw  // VSNormalAndDepthTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VSNormalAndDepthTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf,7:NaN:Inf>
                mov o2.xyz, r0.xyzx  // VSNormalAndDepthTech<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VSNormalAndDepthTech<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o4.xy, r4.xyxx  // VSNormalAndDepthTech<14,15>
                ret 
                // Approximately 23 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyzw        1     NONE  float     z 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 77 "Basic-NormalDepthTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSNormalAndDepth16BitTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, v1.z  // PSNormalAndDepth16BitTech<3>
                ret 
                // Approximately 6 instruction slots used
                            
            };
            RasterizerState = BackfaceCull;
        }

    }

    technique11 NormalAndDepthAlphaClip16BitTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:   64 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   float gShadowMapSize;              // Offset:  256 Size:     4 [unused]
                //   float gReflection;                 // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                
                #line 50 "Basic-NormalDepthTech.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 53
                dp4 r2.x, r0.xyzw, cb1[4].xyzw  // vOut<4:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb1[5].xyzw  // vOut<5:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb1[6].xyzw  // vOut<6:NaN:Inf>
                dp4 r2.w, r0.xyzw, cb1[7].xyzw  // vOut<7:NaN:Inf>
                dp3 r0.x, v1.xyzx, cb1[8].xyzx  // vOut<8:NaN:Inf>
                dp3 r0.y, v1.xyzx, cb1[9].xyzx  // vOut<9:NaN:Inf>
                dp3 r0.z, v1.xyzx, cb1[10].xyzx  // vOut<10:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb1[8].xyzx  // vOut<11:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb1[9].xyzx  // vOut<12:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb1[10].xyzx  // vOut<13:NaN:Inf>
                
                #line 58
                mov r4.xy, v3.xyxx  // vOut<14,15>
                mov o0.xyzw, r1.xyzw  // VSNormalAndDepthTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VSNormalAndDepthTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf,7:NaN:Inf>
                mov o2.xyz, r0.xyzx  // VSNormalAndDepthTech<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VSNormalAndDepthTech<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o4.xy, r4.xyxx  // VSNormalAndDepthTech<14,15>
                ret 
                // Approximately 23 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyzw        1     NONE  float     z 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 66 "Basic-NormalDepthTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r0.w, v4.xyxx, t0.xyzw, s0
                mov r0.w, r0.w  // texColor<3:Inf>
                add r0.w, r0.w, l(-0.100000)
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard r0.w
                mov o0.xyz, r0.xyzx  // PSNormalAndDepthAlphaClip16BitTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, v1.z  // PSNormalAndDepthAlphaClip16BitTech<3>
                ret 
                // Approximately 12 instruction slots used
                            
            };
            RasterizerState = BackfaceCull;
        }

    }

    technique11 NormalAndDepth8BitTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:   64 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   float gShadowMapSize;              // Offset:  256 Size:     4 [unused]
                //   float gReflection;                 // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                
                #line 50 "Basic-NormalDepthTech.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 53
                dp4 r2.x, r0.xyzw, cb1[4].xyzw  // vOut<4:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb1[5].xyzw  // vOut<5:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb1[6].xyzw  // vOut<6:NaN:Inf>
                dp4 r2.w, r0.xyzw, cb1[7].xyzw  // vOut<7:NaN:Inf>
                dp3 r0.x, v1.xyzx, cb1[8].xyzx  // vOut<8:NaN:Inf>
                dp3 r0.y, v1.xyzx, cb1[9].xyzx  // vOut<9:NaN:Inf>
                dp3 r0.z, v1.xyzx, cb1[10].xyzx  // vOut<10:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb1[8].xyzx  // vOut<11:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb1[9].xyzx  // vOut<12:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb1[10].xyzx  // vOut<13:NaN:Inf>
                
                #line 58
                mov r4.xy, v3.xyxx  // vOut<14,15>
                mov o0.xyzw, r1.xyzw  // VSNormalAndDepthTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VSNormalAndDepthTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf,7:NaN:Inf>
                mov o2.xyz, r0.xyzx  // VSNormalAndDepthTech<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VSNormalAndDepthTech<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o4.xy, r4.xyxx  // VSNormalAndDepthTech<14,15>
                ret 
                // Approximately 23 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12 [unused]
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4
                //   float gZFar;                       // Offset:  324 Size:     4
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linearSampler                     sampler      NA          NA    0        1
                // gNormalMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyzw        1     NONE  float     z 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[21], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 5
                
                #line 119 "Basic-NormalDepthTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, v4.xyxx, t0.xyzw, s0
                mov r1.xyz, r1.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                nop 
                mov r1.xyz, r1.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                mov r2.xyz, r0.xyzx  // unitNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, v3.xyzx  // tangentW<0,1,2>
                
                #line 255 "LightsUtilities.fx"
                mul r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r1.xyz, r1.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:Inf,1:Inf,2:Inf>
                
                #line 258
                mov r2.xyz, r2.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.z, r3.xyzx, r2.xyzx
                mul r4.xyz, r2.xyzx, r0.zzzz
                mov r4.xyz, -r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r0.z, r3.xyzx, r3.xyzx
                rsq r0.z, r0.z
                mul r3.xyz, r0.zzzz, r3.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r0.zw, r2.yyyz, r3.zzzx
                mul r2.xy, r2.zxzz, r3.yzyy
                mov r2.xy, -r2.xyxx
                add r0.zw, r0.zzzw, r2.xxxy  // B<0:NaN:Inf,1:NaN:Inf>
                
                #line 265
                mul r1.xw, r1.xxxx, r3.xxxy
                mul r0.zw, r0.zzzw, r1.yyyy
                add r0.zw, r0.zzzw, r1.xxxw
                mul r0.xy, r0.xyxx, r1.zzzz
                add r0.xy, r0.xyxx, r0.zwzz  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf>
                mov r0.xy, r0.xyxx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf>
                
                #line 123 "Basic-NormalDepthTech.fx"
                mov r0.xy, r0.xyxx  // bumpedNormalV<0:NaN:Inf,1:NaN:Inf>
                nop 
                mov r0.xy, r0.xyxx  // normal<0:NaN:Inf,1:NaN:Inf>
                mov r0.z, v1.z  // depth<0>
                
                #line 89
                add r0.xy, r0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                mul r1.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // normalScaled<0:NaN:Inf,1:NaN:Inf>
                
                #line 92
                mov r0.x, -cb0[20].x
                add r0.y, r0.x, r0.z
                add r0.x, r0.x, cb0[20].y
                div r0.x, r0.y, r0.x  // depthScaled<0:NaN:Inf>
                
                #line 95
                mul r0.y, r0.x, l(255.000000)
                frc r1.w, r0.y  // depthScaledW<0:NaN>
                div r0.y, r1.w, l(255.000000)
                mov r0.y, -r0.y
                add r1.z, r0.y, r0.x  // depthScaledZ<0:NaN:Inf>
                mov r1.xy, r1.xyxx  // VectorsTo8Bit<0:NaN:Inf,1:NaN:Inf>
                mov r1.z, r1.z  // VectorsTo8Bit<2:NaN:Inf>
                mov r1.w, r1.w  // VectorsTo8Bit<3:NaN>
                
                #line 125
                mov o0.xyzw, r1.xyzw  // PSNormalAndDepth8BitTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN>
                ret 
                // Approximately 49 instruction slots used
                            
            };
            RasterizerState = BackfaceCull;
        }

    }

    technique11 NormalAndDepthAlphaClip8BitTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:   64 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   float gShadowMapSize;              // Offset:  256 Size:     4 [unused]
                //   float gReflection;                 // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                
                #line 50 "Basic-NormalDepthTech.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 53
                dp4 r2.x, r0.xyzw, cb1[4].xyzw  // vOut<4:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb1[5].xyzw  // vOut<5:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb1[6].xyzw  // vOut<6:NaN:Inf>
                dp4 r2.w, r0.xyzw, cb1[7].xyzw  // vOut<7:NaN:Inf>
                dp3 r0.x, v1.xyzx, cb1[8].xyzx  // vOut<8:NaN:Inf>
                dp3 r0.y, v1.xyzx, cb1[9].xyzx  // vOut<9:NaN:Inf>
                dp3 r0.z, v1.xyzx, cb1[10].xyzx  // vOut<10:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb1[8].xyzx  // vOut<11:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb1[9].xyzx  // vOut<12:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb1[10].xyzx  // vOut<13:NaN:Inf>
                
                #line 58
                mov r4.xy, v3.xyxx  // vOut<14,15>
                mov o0.xyzw, r1.xyzw  // VSNormalAndDepthTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VSNormalAndDepthTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf,7:NaN:Inf>
                mov o2.xyz, r0.xyzx  // VSNormalAndDepthTech<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VSNormalAndDepthTech<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o4.xy, r4.xyxx  // VSNormalAndDepthTech<14,15>
                ret 
                // Approximately 23 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12 [unused]
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4
                //   float gZFar;                       // Offset:  324 Size:     4
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linearSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyzw        1     NONE  float     z 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[21], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 5
                
                #line 104 "Basic-NormalDepthTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r0.w, v4.xyxx, t0.xyzw, s1
                mov r0.w, r0.w  // texColor<3:Inf>
                add r0.w, r0.w, l(-0.100000)
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard r0.w
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, v4.xyxx, t1.xyzw, s0
                mov r1.xyz, r1.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                nop 
                mov r1.xyz, r1.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                mov r2.xyz, r0.xyzx  // unitNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, v3.xyzx  // tangentW<0,1,2>
                
                #line 255 "LightsUtilities.fx"
                mul r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r1.xyz, r1.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:Inf,1:Inf,2:Inf>
                
                #line 258
                mov r2.xyz, r2.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.z, r3.xyzx, r2.xyzx
                mul r4.xyz, r2.xyzx, r0.zzzz
                mov r4.xyz, -r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r0.z, r3.xyzx, r3.xyzx
                rsq r0.z, r0.z
                mul r3.xyz, r0.zzzz, r3.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r0.zw, r2.yyyz, r3.zzzx
                mul r2.xy, r2.zxzz, r3.yzyy
                mov r2.xy, -r2.xyxx
                add r0.zw, r0.zzzw, r2.xxxy  // B<0:NaN:Inf,1:NaN:Inf>
                
                #line 265
                mul r1.xw, r1.xxxx, r3.xxxy
                mul r0.zw, r0.zzzw, r1.yyyy
                add r0.zw, r0.zzzw, r1.xxxw
                mul r0.xy, r0.xyxx, r1.zzzz
                add r0.xy, r0.xyxx, r0.zwzz  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf>
                mov r0.xy, r0.xyxx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf>
                
                #line 111 "Basic-NormalDepthTech.fx"
                mov r0.xy, r0.xyxx  // bumpedNormalV<0:NaN:Inf,1:NaN:Inf>
                nop 
                mov r0.xy, r0.xyxx  // normal<0:NaN:Inf,1:NaN:Inf>
                mov r0.z, v1.z  // depth<0>
                
                #line 89
                add r0.xy, r0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                mul r1.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // normalScaled<0:NaN:Inf,1:NaN:Inf>
                
                #line 92
                mov r0.x, -cb0[20].x
                add r0.y, r0.x, r0.z
                add r0.x, r0.x, cb0[20].y
                div r0.x, r0.y, r0.x  // depthScaled<0:NaN:Inf>
                
                #line 95
                mul r0.y, r0.x, l(255.000000)
                frc r1.w, r0.y  // depthScaledW<0:NaN>
                div r0.y, r1.w, l(255.000000)
                mov r0.y, -r0.y
                add r1.z, r0.y, r0.x  // depthScaledZ<0:NaN:Inf>
                mov r1.xy, r1.xyxx  // VectorsTo8Bit<0:NaN:Inf,1:NaN:Inf>
                mov r1.z, r1.z  // VectorsTo8Bit<2:NaN:Inf>
                mov r1.w, r1.w  // VectorsTo8Bit<3:NaN>
                
                #line 113
                mov o0.xyzw, r1.xyzw  // PSNormalAndDepthAlphaClip8BitTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN>
                ret 
                // Approximately 55 instruction slots used
                            
            };
            RasterizerState = BackfaceCull;
        }

    }

    technique11 GouraudTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12 [unused]
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4 [unused]
                //   float gZFar;                       // Offset:  324 Size:     4 [unused]
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObjectBasic                  cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 4
                
                #line 12 "Basic-GouraudTech.fx"
                dp3 r0.x, v1.xyzx, cb1[4].xyzx
                dp3 r0.y, v1.xyzx, cb1[5].xyzx
                dp3 r0.z, v1.xyzx, cb1[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb1[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb1[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb1[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 18
                mov r1.xy, v3.xyxx  // vOut<4,5>
                mov r3.xyz, -cb0[3].xyzx
                dp3 r0.x, r0.xyzx, r3.xyzx
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                mul r0.xyzw, r0.xxxx, cb0[1].xyzw
                mul r0.xyzw, r0.xyzw, cb1[13].xyzw  // diffuse<0:Inf,1:Inf,2:Inf,3:Inf>
                mul r3.xyzw, cb0[0].xyzw, cb1[12].xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyzw, r0.xyzw, r3.xyzw  // vOut<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o0.xyzw, r2.xyzw  // VSGouraudTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xyzw, r0.xyzw  // VSGouraudTech<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o1.xy, r1.xyxx  // VSGouraudTech<4,5>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // COLOR                    0   xyzw        2     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 30 "Basic-GouraudTech.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mul r0.xyz, r0.xyzx, v2.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 35
                mul r0.w, r0.w, cb0[13].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSGouraudTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PSGouraudTech<3:NaN:Inf>
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 GouraudFastTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12 [unused]
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4 [unused]
                //   float gZFar;                       // Offset:  324 Size:     4 [unused]
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObjectBasic                  cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 4
                
                #line 12 "Basic-GouraudTech.fx"
                dp3 r0.x, v1.xyzx, cb1[4].xyzx
                dp3 r0.y, v1.xyzx, cb1[5].xyzx
                dp3 r0.z, v1.xyzx, cb1[6].xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb1[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb1[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb1[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 18
                mov r1.xy, v3.xyxx  // vOut<4,5>
                mov r3.xyz, -cb0[3].xyzx
                dp3 r0.x, r0.xyzx, r3.xyzx
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                mul r0.xyzw, r0.xxxx, cb0[1].xyzw
                mul r0.xyzw, r0.xyzw, cb1[13].xyzw  // diffuse<0:Inf,1:Inf,2:Inf,3:Inf>
                mul r3.xyzw, cb0[0].xyzw, cb1[12].xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyzw, r0.xyzw, r3.xyzw  // vOut<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o0.xyzw, r2.xyzw  // VSGouraudTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xyzw, r0.xyzw  // VSGouraudTech<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o1.xy, r1.xyxx  // VSGouraudTech<4,5>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // fastSampler                       sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // COLOR                    0   xyzw        2     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 42 "Basic-GouraudTech.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mul r0.xyz, r0.xyzx, v2.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 47
                mul r0.w, r0.w, cb0[13].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSGouraudFastTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PSGouraudFastTech<3:NaN:Inf>
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 LightFullTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSTION                  0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 11 "Basic-LightFullTech.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vOut<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vOut<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vOut<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vOut<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vOut<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vOut<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[4].xyzx  // vOut<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[5].xyzx  // vOut<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[6].xyzx  // vOut<12:NaN:Inf>
                
                #line 16
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 24
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[16].xyzw  // vOut<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[17].xyzw  // vOut<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VSLightFullTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VSLightFullTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VSLightFullTech<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VSLightFullTech<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VSLightFullTech<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96
                //   float3 gEyePosW;                   // Offset:  240 Size:    12
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4 [unused]
                //   float gZFar;                       // Offset:  324 Size:     4 [unused]
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linearSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObjectBasic                  cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSTION                  0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[15], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 16
                
                #line 32 "Basic-LightFullTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov r1.xyz, r0.zxyz  // pIn<9:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v4.xyxx, t1.xyzw, s0
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                nop 
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                mov r1.xyz, r1.xyzx  // unitNormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, v3.xyzx  // tangentW<0,1,2>
                
                #line 255 "LightsUtilities.fx"
                mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:Inf,1:Inf,2:Inf>
                
                #line 258
                mov r1.xyz, r1.xyzx  // N<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                dp3 r0.w, r3.zxyz, r1.xyzx
                mul r4.xyz, r1.yzxy, r0.wwww
                mov r4.xyz, -r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, r3.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r3.yzxy  // T<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                mul r5.xyz, r1.zxyz, r4.yzxy
                mul r1.xyz, r1.xyzx, r4.xyzx
                mov r1.xyz, -r1.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx  // B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 265
                mul r3.xyz, r2.xxxx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.yyyy
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.zzzz
                add r0.xyz, r0.xyzx, r1.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 35 "Basic-LightFullTech.fx"
                mov r0.xyz, r0.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[15].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 47
                nop 
                mov r2.xyz, cb1[12].xyzx  // mat<0,1,2>
                mov r3.xyz, cb1[13].xyzx  // mat<4,5,6>
                mov r4.xyzw, cb1[14].xyzw  // mat<8,9,10,11>
                mov r5.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r6.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r7.xyz, cb0[2].xyzx  // L<8,9,10>
                mov r8.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 119 "LightsUtilities.fx"
                mov r8.xyz, -r8.xyzx  // lightVec<0,1,2>
                
                #line 122
                mul r5.xyz, r2.xyzx, r5.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 127
                dp3 r0.w, r8.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 131
                lt r1.w, l(0.000000), r0.w
                mov r8.xyz, -r8.xyzx
                dp3 r2.w, r8.xyzx, r0.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r9.xyz, r0.xyzx, r2.wwww
                add r8.xyz, r8.xyzx, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r2.w, r8.xyzx, r1.xyzx
                max r2.w, r2.w, l(0.000000)
                log r2.w, r2.w
                mul r2.w, r2.w, r4.w
                exp r2.w, r2.w  // specFactor<0:NaN:Inf>
                mul r8.xyz, r3.xyzx, r0.wwww
                mul r6.xyz, r6.xyzx, r8.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r8.xyz, r4.xyzx, r2.wwww
                mul r7.xyz, r7.xyzx, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                movc r6.xyz, r1.wwww, r6.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r7.xyz, r1.wwww, r7.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 47 "Basic-LightFullTech.fx"
                mov r5.xyz, r5.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r6.xyz, r6.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r7.xyz, r7.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf>
                add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                nop 
                mov r8.xyz, cb0[4].xyzx  // L<0,1,2>
                mov r9.xyz, cb0[5].xyzx  // L<4,5,6>
                mov r10.xyz, cb0[6].xyzx  // L<8,9,10>
                mov r11.xyz, cb0[7].xyzx  // L<12,13,14>
                mov r0.w, cb0[7].w  // L<15>
                mov r12.xyz, cb0[8].xyzx  // L<16,17,18>
                mov r13.xyz, v1.xyzx  // pos<0,1,2>
                
                #line 155 "LightsUtilities.fx"
                mov r13.xyz, -r13.xyzx
                add r11.xyz, r11.xyzx, r13.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 158
                dp3 r1.w, r11.xyzx, r11.xyzx
                sqrt r14.y, r1.w  // d<0:NaN:Inf>
                
                #line 161
                lt r0.w, r0.w, r14.y
                
                #line 165
                if_z r0.w
                  div r11.xyz, r11.xyzx, r14.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 168
                  mul r8.xyz, r2.xyzx, r8.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 173
                  dp3 r0.w, r11.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 177
                  lt r1.w, l(0.000000), r0.w
                  mov r11.xyz, -r11.xyzx
                  dp3 r2.w, r11.xyzx, r0.xyzx
                  add r2.w, r2.w, r2.w
                  mov r2.w, -r2.w
                  mul r15.xyz, r0.xyzx, r2.wwww
                  add r11.xyz, r11.xyzx, r15.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.w, r11.xyzx, r1.xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, r4.w
                  exp r2.w, r2.w  // specFactor<0:NaN:Inf>
                  mul r11.xyz, r3.xyzx, r0.wwww
                  mul r9.xyz, r9.xyzx, r11.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r11.xyz, r4.xyzx, r2.wwww
                  mul r10.xyz, r10.xyzx, r11.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                  movc r9.xyz, r1.wwww, r9.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  movc r10.xyz, r1.wwww, r10.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 187
                  mul r14.z, r14.y, r14.y
                  mov r14.x, l(1.000000)
                  dp3 r0.w, r12.xyzx, r14.xyzx
                  div r0.w, l(1.000000), r0.w  // att<0:NaN:Inf>
                  mul r9.xyz, r0.wwww, r9.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r0.wwww, r10.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 165
                else 
                  mov r8.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r9.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r10.xyz, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 52 "Basic-LightFullTech.fx"
                mov r8.xyz, r8.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r9.xyz, r9.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r10.xyz, r10.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r5.xyz, r5.xyzx, r8.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r6.xyz, r6.xyzx, r9.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r7.xyz, r7.xyzx, r10.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                nop 
                mov r8.xyz, cb0[9].xyzx  // L<0,1,2>
                mov r9.xyz, cb0[10].xyzx  // L<4,5,6>
                mov r10.xyz, cb0[11].xyzx  // L<8,9,10>
                mov r11.xyz, cb0[12].xyzx  // L<12,13,14>
                mov r12.xyz, cb0[13].xyzx  // L<16,17,18>
                mov r14.xyz, cb0[14].xyzx  // L<20,21,22>
                mov r0.w, cb0[12].w  // L<15>
                mov r1.w, cb0[13].w  // L<19>
                
                #line 207 "LightsUtilities.fx"
                add r11.xyz, r13.xyzx, r11.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 210
                dp3 r2.w, r11.xyzx, r11.xyzx
                sqrt r13.y, r2.w  // d<0:NaN:Inf>
                
                #line 213
                lt r0.w, r0.w, r13.y
                
                #line 217
                if_z r0.w
                  div r11.xyz, r11.xyzx, r13.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 220
                  mul r2.xyz, r2.xyzx, r8.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 225
                  dp3 r0.w, r11.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 229
                  lt r2.w, l(0.000000), r0.w
                  mov r8.xyz, -r11.xyzx
                  dp3 r3.w, r8.xyzx, r0.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r0.xyz, r0.xyzx, r3.wwww
                  add r0.xyz, r8.xyzx, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, r4.w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r0.yzw, r3.xxyz, r0.wwww
                  mul r0.yzw, r9.xxyz, r0.yyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r1.xyz, r4.xyzx, r0.xxxx
                  mul r1.xyz, r10.xyzx, r1.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                  movc r0.xyz, r2.wwww, r0.yzwy, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  movc r1.xyz, r2.wwww, r1.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 239
                  dp3 r0.w, r8.xyzx, r12.xyzx
                  max r0.w, r0.w, l(0.000000)
                  log r0.w, r0.w
                  mul r0.w, r0.w, r1.w
                  exp r0.w, r0.w  // spot<0:NaN:Inf>
                
                #line 242
                  mul r13.z, r13.y, r13.y
                  mov r13.x, l(1.000000)
                  dp3 r1.w, r14.xyzx, r13.xyzx
                  div r0.w, r0.w, r1.w  // att<0:NaN:Inf>
                
                #line 245
                  mul r0.xyz, r0.wwww, r0.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r1.xyz, r0.wwww, r1.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 217
                else 
                  mov r2.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r0.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r1.xyz, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 57 "Basic-LightFullTech.fx"
                mov r2.xyz, r2.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r0.xyz, r0.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r2.xyz, r2.xyzx, r5.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r0.xyz, r0.xyzx, r6.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r1.xyz, r1.xyzx, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyz, r0.xyzx, r2.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 67
                mul r0.w, r3.w, cb1[13].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSLightFullTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PSLightFullTech<3:NaN:Inf>
                ret 
                // Approximately 191 instruction slots used
                            
            };
        }

    }

    technique11 LightDirTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSTION                  0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 11 "Basic-LightFullTech.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vOut<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vOut<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vOut<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vOut<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vOut<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vOut<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[4].xyzx  // vOut<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[5].xyzx  // vOut<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[6].xyzx  // vOut<12:NaN:Inf>
                
                #line 16
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 24
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[16].xyzw  // vOut<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[17].xyzw  // vOut<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VSLightFullTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VSLightFullTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VSLightFullTech<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VSLightFullTech<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VSLightFullTech<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4 [unused]
                //   float gZFar;                       // Offset:  324 Size:     4 [unused]
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linearSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObjectBasic                  cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSTION                  0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[15], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 9
                
                #line 9 "Basic-LightDirTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov r1.xyz, r0.zxyz  // pIn<9:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v4.xyxx, t1.xyzw, s0
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                nop 
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                mov r1.xyz, r1.xyzx  // unitNormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, v3.xyzx  // tangentW<0,1,2>
                
                #line 255 "LightsUtilities.fx"
                mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:Inf,1:Inf,2:Inf>
                
                #line 258
                mov r1.xyz, r1.xyzx  // N<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                dp3 r0.w, r3.zxyz, r1.xyzx
                mul r4.xyz, r1.yzxy, r0.wwww
                mov r4.xyz, -r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, r3.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r3.yzxy  // T<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                mul r5.xyz, r1.zxyz, r4.yzxy
                mul r1.xyz, r1.xyzx, r4.xyzx
                mov r1.xyz, -r1.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx  // B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 265
                mul r3.xyz, r2.xxxx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.yyyy
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.zzzz
                add r0.xyz, r0.xyzx, r1.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12 "Basic-LightDirTech.fx"
                mov r0.xyz, r0.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[15].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 24
                nop 
                mov r2.xyz, cb1[12].xyzx  // mat<0,1,2>
                mov r3.xyz, cb1[13].xyzx  // mat<4,5,6>
                mov r4.xyzw, cb1[14].xyzw  // mat<8,9,10,11>
                mov r5.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r6.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r7.xyz, cb0[2].xyzx  // L<8,9,10>
                mov r8.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 119 "LightsUtilities.fx"
                mov r8.xyz, -r8.xyzx  // lightVec<0,1,2>
                
                #line 122
                mul r2.xyz, r2.xyzx, r5.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 127
                dp3 r0.w, r8.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 131
                lt r1.w, l(0.000000), r0.w
                mov r5.xyz, -r8.xyzx
                dp3 r2.w, r5.xyzx, r0.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r0.xyz, r0.xyzx, r2.wwww
                add r0.xyz, r5.xyzx, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r4.w
                exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                mul r0.yzw, r3.xxyz, r0.wwww
                mul r0.yzw, r6.xxyz, r0.yyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r1.xyz, r4.xyzx, r0.xxxx
                mul r1.xyz, r7.xyzx, r1.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                movc r0.xyz, r1.wwww, r0.yzwy, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r1.xyz, r1.wwww, r1.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 24 "Basic-LightDirTech.fx"
                mov r2.xyz, r2.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r0.xyz, r0.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf>
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyz, r0.xyzx, r2.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 34
                mul r0.w, r3.w, cb1[13].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSLightDirTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PSLightDirTech<3:NaN:Inf>
                ret 
                // Approximately 82 instruction slots used
                            
            };
        }

    }

    technique11 LightDirShadowTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   float gShadowMapSize;              // Offset:  256 Size:     4 [unused]
                //   float gReflection;                 // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[16], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyzw
                dcl_temps 7
                
                #line 21 "Basic-LightDirShadowTech.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vOut<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vOut<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vOut<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vOut<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vOut<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vOut<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[4].xyzx  // vOut<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[5].xyzx  // vOut<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[6].xyzx  // vOut<12:NaN:Inf>
                
                #line 26
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 29
                mov r5.xy, v3.xyxx
                mov r5.zw, l(0,0,0,1.000000)
                dp4 r6.x, r5.xyzw, cb0[16].xyzw  // vOut<13:NaN:Inf>
                dp4 r6.y, r5.xyzw, cb0[17].xyzw  // vOut<14:NaN:Inf>
                
                #line 32
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // vOut<15:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // vOut<16:NaN:Inf>
                dp4 r5.z, r0.xyzw, cb1[14].xyzw  // vOut<17:NaN:Inf>
                dp4 r5.w, r0.xyzw, cb1[15].xyzw  // vOut<18:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VSLightDirShadowTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o5.xyzw, r5.xyzw  // VSLightDirShadowTech<15:NaN:Inf,16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VSLightDirShadowTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VSLightDirShadowTech<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VSLightDirShadowTech<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r6.xyxx  // VSLightDirShadowTech<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 30 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4 [unused]
                //   float gZFar;                       // Offset:  324 Size:     4 [unused]
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   float gShadowMapSize;              // Offset:  256 Size:     4
                //   float gReflection;                 // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linearSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // samShadow                       sampler_c      NA          NA    2        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gShadowMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObjectBasic                  cbuffer      NA          NA    1        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[15], immediateIndexed
                dcl_constantbuffer cb2[17], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 9
                
                #line 40 "Basic-LightDirShadowTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov r1.xyz, r0.zxyz  // pIn<9:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v4.xyxx, t1.xyzw, s0
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                nop 
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                mov r1.xyz, r1.xyzx  // unitNormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, v3.xyzx  // tangentW<0,1,2>
                
                #line 255 "LightsUtilities.fx"
                mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:Inf,1:Inf,2:Inf>
                
                #line 258
                mov r1.xyz, r1.xyzx  // N<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                dp3 r0.w, r3.zxyz, r1.xyzx
                mul r4.xyz, r1.yzxy, r0.wwww
                mov r4.xyz, -r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, r3.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r3.yzxy  // T<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                mul r5.xyz, r1.zxyz, r4.yzxy
                mul r1.xyz, r1.xyzx, r4.xyzx
                mov r1.xyz, -r1.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx  // B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 265
                mul r3.xyz, r2.xxxx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.yyyy
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.zzzz
                add r0.xyz, r0.xyzx, r1.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 43 "Basic-LightDirShadowTech.fx"
                mov r0.xyz, r0.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[15].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 48
                nop 
                mov r2.xyzw, v5.xyzw  // shadowPosH<0,1,2,3>
                mov r0.w, cb2[16].x  // sMapSize<0>
                
                #line 276 "LightsUtilities.fx"
                div r2.xyz, r2.zxyz, r2.wwww  // shadowPosH<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 279
                mov r2.x, r2.x  // depth<0:NaN:Inf>
                
                #line 282
                div r3.y, l(1.000000), r0.w  // dx<0:Inf>
                mov r0.w, r3.y  // dx<0:Inf>
                
                #line 289
                mov r4.y, -r0.w  // offsets<3:Inf>
                mov r3.z, -r0.w  // offsets<5:Inf>
                mov r5.x, -r0.w  // offsets<6:Inf>
                mov r3.x, -r0.w  // offsets<12:Inf>
                
                #line 296
                mov r0.w, -r0.w
                add r4.zw, r0.wwww, r2.yyyz
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.w, r4.zwzz, t2.xxxx, s2, r2.x
                add r0.w, r0.w, l(0.000000)  // percentLit<0:[0f,1f]>
                mov r4.x, l(0)
                add r4.xy, r2.yzyy, r4.xyxx
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,2f]>
                add r4.xy, r2.yzyy, r3.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,3f]>
                mov r5.y, l(0)
                add r4.xy, r2.yzyy, r5.xyxx
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,4f]>
                add r4.xy, r2.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,5f]>
                mov r3.w, l(0)
                add r4.xy, r2.yzyy, r3.ywyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,6f]>
                add r3.xz, r2.yyzy, r3.xxyx
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xzxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,7f]>
                add r3.xz, r2.yyzy, r3.wwyw
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xzxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,8f]>
                add r2.yz, r2.yyzy, r3.yyyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.yzyy, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,9f]>
                
                #line 299
                div r0.w, r0.w, l(9.000000)  // percentLit<0:[0f,1f]>
                mov r0.w, r0.w  // CalcShadowFactor<0:[0f,1f]>
                
                #line 48 "Basic-LightDirShadowTech.fx"
                mov r0.w, r0.w  // shadow<0:[0f,1f]>
                
                #line 58
                nop 
                mov r2.xyz, cb1[12].xyzx  // mat<0,1,2>
                mov r3.xyz, cb1[13].xyzx  // mat<4,5,6>
                mov r4.xyzw, cb1[14].xyzw  // mat<8,9,10,11>
                mov r5.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r6.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r7.xyz, cb0[2].xyzx  // L<8,9,10>
                mov r8.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 119 "LightsUtilities.fx"
                mov r8.xyz, -r8.xyzx  // lightVec<0,1,2>
                
                #line 122
                mul r2.xyz, r2.xyzx, r5.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 127
                dp3 r1.w, r8.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 131
                lt r2.w, l(0.000000), r1.w
                mov r5.xyz, -r8.xyzx
                dp3 r3.w, r5.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r5.xyzx, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r4.w
                exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                mul r1.xyz, r3.xyzx, r1.wwww
                mul r1.xyz, r6.xyzx, r1.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r0.xyz, r4.xyzx, r0.xxxx
                mul r0.xyz, r7.xyzx, r0.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                movc r1.xyz, r2.wwww, r1.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r0.xyz, r2.wwww, r0.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 58 "Basic-LightDirShadowTech.fx"
                mov r2.xyz, r2.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r1.xyz, r1.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf>
                mul r1.xyz, r0.wwww, r1.xyzx
                add r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r1.xyz, r1.xyzx, r3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                mul r0.w, r3.w, cb1[13].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSLightDirShadowTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PSLightDirShadowTech<3:NaN:Inf>
                ret 
                // Approximately 129 instruction slots used
                            
            };
        }

    }

    technique11 LightDirShadowAndSSAOTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64
                //   float4x4 gWorldView;               // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   float gShadowMapSize;              // Offset:  256 Size:     4 [unused]
                //   float gReflection;                 // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                // TEXCOORD                 2   xyzw        6     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[16], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyzw
                dcl_output o6.xyzw
                dcl_temps 8
                
                #line 11 "Basic-LightDirShadowAndSSAOTech.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vOut<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vOut<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vOut<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vOut<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vOut<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vOut<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[4].xyzx  // vOut<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[5].xyzx  // vOut<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[6].xyzx  // vOut<12:NaN:Inf>
                
                #line 16
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 19
                mov r5.xy, v3.xyxx
                mov r5.zw, l(0,0,0,1.000000)
                dp4 r6.x, r5.xyzw, cb0[16].xyzw  // vOut<13:NaN:Inf>
                dp4 r6.y, r5.xyzw, cb0[17].xyzw  // vOut<14:NaN:Inf>
                
                #line 22
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // vOut<15:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // vOut<16:NaN:Inf>
                dp4 r5.z, r0.xyzw, cb1[14].xyzw  // vOut<17:NaN:Inf>
                dp4 r5.w, r0.xyzw, cb1[15].xyzw  // vOut<18:NaN:Inf>
                
                #line 25
                dp4 r7.x, r0.xyzw, cb1[0].xyzw  // vOut<19:NaN:Inf>
                dp4 r7.y, r0.xyzw, cb1[1].xyzw  // vOut<20:NaN:Inf>
                dp4 r7.z, r0.xyzw, cb1[2].xyzw  // vOut<21:NaN:Inf>
                dp4 r7.w, r0.xyzw, cb1[3].xyzw  // vOut<22:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VSLightDirShadowAndSSAOTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o5.xyzw, r5.xyzw  // VSLightDirShadowAndSSAOTech<15:NaN:Inf,16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o6.xyzw, r7.xyzw  // VSLightDirShadowAndSSAOTech<19:NaN:Inf,20:NaN:Inf,21:NaN:Inf,22:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VSLightDirShadowAndSSAOTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VSLightDirShadowAndSSAOTech<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VSLightDirShadowAndSSAOTech<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r6.xyxx  // VSLightDirShadowAndSSAOTech<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 35 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4 [unused]
                //   float gZFar;                       // Offset:  324 Size:     4 [unused]
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   float gShadowMapSize;              // Offset:  256 Size:     4
                //   float gReflection;                 // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linearSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // samShadow                       sampler_c      NA          NA    2        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gShadowMap                        texture  float4          2d    2        1
                // gSsaoMap                          texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObjectBasic                  cbuffer      NA          NA    1        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                // TEXCOORD                 2   xyzw        6     NONE  float   xy w
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[15], immediateIndexed
                dcl_constantbuffer cb2[17], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyzw
                dcl_input_ps linear v6.xyw
                dcl_output o0.xyzw
                dcl_temps 9
                
                #line 33 "Basic-LightDirShadowAndSSAOTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov r1.xyz, r0.zxyz  // pIn<9:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v4.xyxx, t1.xyzw, s0
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                nop 
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                mov r1.xyz, r1.xyzx  // unitNormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, v3.xyzx  // tangentW<0,1,2>
                
                #line 255 "LightsUtilities.fx"
                mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:Inf,1:Inf,2:Inf>
                
                #line 258
                mov r1.xyz, r1.xyzx  // N<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                dp3 r0.w, r3.zxyz, r1.xyzx
                mul r4.xyz, r1.yzxy, r0.wwww
                mov r4.xyz, -r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, r3.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r3.yzxy  // T<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                mul r5.xyz, r1.zxyz, r4.yzxy
                mul r1.xyz, r1.xyzx, r4.xyzx
                mov r1.xyz, -r1.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx  // B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 265
                mul r3.xyz, r2.xxxx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.yyyy
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.zzzz
                add r0.xyz, r0.xyzx, r1.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 36 "Basic-LightDirShadowAndSSAOTech.fx"
                mov r0.xyz, r0.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[15].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 41
                nop 
                mov r2.xyzw, v5.xyzw  // shadowPosH<0,1,2,3>
                mov r0.w, cb2[16].x  // sMapSize<0>
                
                #line 276 "LightsUtilities.fx"
                div r2.xyz, r2.zxyz, r2.wwww  // shadowPosH<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 279
                mov r2.x, r2.x  // depth<0:NaN:Inf>
                
                #line 282
                div r3.y, l(1.000000), r0.w  // dx<0:Inf>
                mov r0.w, r3.y  // dx<0:Inf>
                
                #line 289
                mov r4.y, -r0.w  // offsets<3:Inf>
                mov r3.z, -r0.w  // offsets<5:Inf>
                mov r5.x, -r0.w  // offsets<6:Inf>
                mov r3.x, -r0.w  // offsets<12:Inf>
                
                #line 296
                mov r0.w, -r0.w
                add r4.zw, r0.wwww, r2.yyyz
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.w, r4.zwzz, t2.xxxx, s2, r2.x
                add r0.w, r0.w, l(0.000000)  // percentLit<0:[0f,1f]>
                mov r4.x, l(0)
                add r4.xy, r2.yzyy, r4.xyxx
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,2f]>
                add r4.xy, r2.yzyy, r3.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,3f]>
                mov r5.y, l(0)
                add r4.xy, r2.yzyy, r5.xyxx
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,4f]>
                add r4.xy, r2.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,5f]>
                mov r3.w, l(0)
                add r4.xy, r2.yzyy, r3.ywyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,6f]>
                add r3.xz, r2.yyzy, r3.xxyx
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xzxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,7f]>
                add r3.xz, r2.yyzy, r3.wwyw
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xzxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,8f]>
                add r2.yz, r2.yyzy, r3.yyyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.yzyy, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,9f]>
                
                #line 299
                div r0.w, r0.w, l(9.000000)  // percentLit<0:[0f,1f]>
                mov r0.w, r0.w  // CalcShadowFactor<0:[0f,1f]>
                
                #line 41 "Basic-LightDirShadowAndSSAOTech.fx"
                mov r0.w, r0.w  // shadow<0:[0f,1f]>
                
                #line 44
                div r2.xy, v6.xyxx, v6.wwww  // pIn<19:NaN:Inf,20:NaN:Inf>
                sample_indexable(0,0,0)(texture2d)(float,float,float,float) r1.w, r2.xyxx, t3.yzwx, s0
                mov r1.w, r1.w  // ambientAccess<0:Inf>
                
                #line 55
                nop 
                mov r2.xyz, cb1[12].xyzx  // mat<0,1,2>
                mov r3.xyz, cb1[13].xyzx  // mat<4,5,6>
                mov r4.xyzw, cb1[14].xyzw  // mat<8,9,10,11>
                mov r5.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r6.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r7.xyz, cb0[2].xyzx  // L<8,9,10>
                mov r8.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 119 "LightsUtilities.fx"
                mov r8.xyz, -r8.xyzx  // lightVec<0,1,2>
                
                #line 122
                mul r2.xyz, r2.xyzx, r5.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 127
                dp3 r2.w, r8.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 131
                lt r3.w, l(0.000000), r2.w
                mov r5.xyz, -r8.xyzx
                dp3 r5.w, r5.xyzx, r0.xyzx
                add r5.w, r5.w, r5.w
                mov r5.w, -r5.w
                mul r0.xyz, r0.xyzx, r5.wwww
                add r0.xyz, r5.xyzx, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r4.w
                exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                mul r1.xyz, r3.xyzx, r2.wwww
                mul r1.xyz, r6.xyzx, r1.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r0.xyz, r4.xyzx, r0.xxxx
                mul r0.xyz, r7.xyzx, r0.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                movc r1.xyz, r3.wwww, r1.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r0.xyz, r3.wwww, r0.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 55 "Basic-LightDirShadowAndSSAOTech.fx"
                mov r2.xyz, r2.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r1.xyz, r1.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r2.xyz, r1.wwww, r2.xyzx
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r1.xyz, r0.wwww, r1.xyzx
                add r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 68
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r1.xyz, r1.xyzx, r3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 73
                mul r0.w, r3.w, cb1[13].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSLightDirShadowAndSSAOTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PSLightDirShadowAndSSAOTech<3:NaN:Inf>
                ret 
                // Approximately 133 instruction slots used
                            
            };
        }

    }

    technique11 LightDirShadowReflectionAndSSAOTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64
                //   float4x4 gWorldView;               // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   float gShadowMapSize;              // Offset:  256 Size:     4 [unused]
                //   float gReflection;                 // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                // TEXCOORD                 2   xyzw        6     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[16], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyzw
                dcl_output o6.xyzw
                dcl_temps 8
                
                #line 11 "Basic-LightDirShadowAndSSAOTech.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vOut<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vOut<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vOut<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vOut<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vOut<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vOut<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[4].xyzx  // vOut<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[5].xyzx  // vOut<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[6].xyzx  // vOut<12:NaN:Inf>
                
                #line 16
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 19
                mov r5.xy, v3.xyxx
                mov r5.zw, l(0,0,0,1.000000)
                dp4 r6.x, r5.xyzw, cb0[16].xyzw  // vOut<13:NaN:Inf>
                dp4 r6.y, r5.xyzw, cb0[17].xyzw  // vOut<14:NaN:Inf>
                
                #line 22
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // vOut<15:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // vOut<16:NaN:Inf>
                dp4 r5.z, r0.xyzw, cb1[14].xyzw  // vOut<17:NaN:Inf>
                dp4 r5.w, r0.xyzw, cb1[15].xyzw  // vOut<18:NaN:Inf>
                
                #line 25
                dp4 r7.x, r0.xyzw, cb1[0].xyzw  // vOut<19:NaN:Inf>
                dp4 r7.y, r0.xyzw, cb1[1].xyzw  // vOut<20:NaN:Inf>
                dp4 r7.z, r0.xyzw, cb1[2].xyzw  // vOut<21:NaN:Inf>
                dp4 r7.w, r0.xyzw, cb1[3].xyzw  // vOut<22:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VSLightDirShadowAndSSAOTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o5.xyzw, r5.xyzw  // VSLightDirShadowAndSSAOTech<15:NaN:Inf,16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o6.xyzw, r7.xyzw  // VSLightDirShadowAndSSAOTech<19:NaN:Inf,20:NaN:Inf,21:NaN:Inf,22:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VSLightDirShadowAndSSAOTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VSLightDirShadowAndSSAOTech<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VSLightDirShadowAndSSAOTech<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r6.xyxx  // VSLightDirShadowAndSSAOTech<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 35 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4 [unused]
                //   float gZFar;                       // Offset:  324 Size:     4 [unused]
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   float gShadowMapSize;              // Offset:  256 Size:     4
                //   float gReflection;                 // Offset:  260 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linearSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // samShadow                       sampler_c      NA          NA    2        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gCubeMap                          texture  float4        cube    2        1
                // gShadowMap                        texture  float4          2d    3        1
                // gSsaoMap                          texture  float4          2d    4        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObjectBasic                  cbuffer      NA          NA    1        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                // TEXCOORD                 2   xyzw        6     NONE  float   xy w
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[16], immediateIndexed
                dcl_constantbuffer cb2[17], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyzw
                dcl_input_ps linear v6.xyw
                dcl_output o0.xyzw
                dcl_temps 9
                
                #line 33 "Basic-LightDirShadowAndSSAOTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov r1.xyz, r0.zxyz  // pIn<9:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v4.xyxx, t1.xyzw, s0
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                nop 
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                mov r1.xyz, r1.xyzx  // unitNormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, v3.xyzx  // tangentW<0,1,2>
                
                #line 255 "LightsUtilities.fx"
                mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:Inf,1:Inf,2:Inf>
                
                #line 258
                mov r1.xyz, r1.xyzx  // N<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                dp3 r0.w, r3.zxyz, r1.xyzx
                mul r4.xyz, r1.yzxy, r0.wwww
                mov r4.xyz, -r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, r3.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r3.yzxy  // T<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                mul r5.xyz, r1.zxyz, r4.yzxy
                mul r1.xyz, r1.xyzx, r4.xyzx
                mov r1.xyz, -r1.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx  // B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 265
                mul r3.xyz, r2.xxxx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.yyyy
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.zzzz
                add r0.xyz, r0.xyzx, r1.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 36 "Basic-LightDirShadowAndSSAOTech.fx"
                mov r0.xyz, r0.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[15].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 41
                nop 
                mov r2.xyzw, v5.xyzw  // shadowPosH<0,1,2,3>
                mov r0.w, cb2[16].x  // sMapSize<0>
                
                #line 276 "LightsUtilities.fx"
                div r2.xyz, r2.zxyz, r2.wwww  // shadowPosH<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 279
                mov r2.x, r2.x  // depth<0:NaN:Inf>
                
                #line 282
                div r3.y, l(1.000000), r0.w  // dx<0:Inf>
                mov r0.w, r3.y  // dx<0:Inf>
                
                #line 289
                mov r4.y, -r0.w  // offsets<3:Inf>
                mov r3.z, -r0.w  // offsets<5:Inf>
                mov r5.x, -r0.w  // offsets<6:Inf>
                mov r3.x, -r0.w  // offsets<12:Inf>
                
                #line 296
                mov r0.w, -r0.w
                add r4.zw, r0.wwww, r2.yyyz
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.w, r4.zwzz, t3.xxxx, s2, r2.x
                add r0.w, r0.w, l(0.000000)  // percentLit<0:[0f,1f]>
                mov r4.x, l(0)
                add r4.xy, r2.yzyy, r4.xyxx
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,2f]>
                add r4.xy, r2.yzyy, r3.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,3f]>
                mov r5.y, l(0)
                add r4.xy, r2.yzyy, r5.xyxx
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,4f]>
                add r4.xy, r2.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,5f]>
                mov r3.w, l(0)
                add r4.xy, r2.yzyy, r3.ywyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,6f]>
                add r3.xz, r2.yyzy, r3.xxyx
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xzxx, t3.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,7f]>
                add r3.xz, r2.yyzy, r3.wwyw
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xzxx, t3.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,8f]>
                add r2.yz, r2.yyzy, r3.yyyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.yzyy, t3.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,9f]>
                
                #line 299
                div r0.w, r0.w, l(9.000000)  // percentLit<0:[0f,1f]>
                mov r0.w, r0.w  // CalcShadowFactor<0:[0f,1f]>
                
                #line 41 "Basic-LightDirShadowAndSSAOTech.fx"
                mov r0.w, r0.w  // shadow<0:[0f,1f]>
                
                #line 44
                div r2.xy, v6.xyxx, v6.wwww  // pIn<19:NaN:Inf,20:NaN:Inf>
                sample_indexable(0,0,0)(texture2d)(float,float,float,float) r1.w, r2.xyxx, t4.yzwx, s0
                mov r1.w, r1.w  // ambientAccess<0:Inf>
                
                #line 55
                nop 
                mov r2.xyz, cb1[12].xyzx  // mat<0,1,2>
                mov r3.xyz, cb1[13].xyzx  // mat<4,5,6>
                mov r4.xyzw, cb1[14].xyzw  // mat<8,9,10,11>
                mov r5.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r6.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r7.xyz, cb0[2].xyzx  // L<8,9,10>
                mov r8.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 119 "LightsUtilities.fx"
                mov r8.xyz, -r8.xyzx  // lightVec<0,1,2>
                
                #line 122
                mul r2.xyz, r2.xyzx, r5.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 127
                dp3 r2.w, r8.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 131
                lt r3.w, l(0.000000), r2.w
                mov r5.xyz, -r8.xyzx
                dp3 r5.w, r5.xyzx, r0.xyzx
                add r5.w, r5.w, r5.w
                mov r5.w, -r5.w
                mul r8.xyz, r0.xyzx, r5.wwww
                add r5.xyz, r5.xyzx, r8.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r5.x, r5.xyzx, r1.xyzx
                max r5.x, r5.x, l(0.000000)
                log r5.x, r5.x
                mul r4.w, r4.w, r5.x
                exp r4.w, r4.w  // specFactor<0:NaN:Inf>
                mul r3.xyz, r3.xyzx, r2.wwww
                mul r3.xyz, r6.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r4.xyz, r4.xyzx, r4.wwww
                mul r4.xyz, r7.xyzx, r4.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                movc r3.xyz, r3.wwww, r3.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r4.xyz, r3.wwww, r4.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 55 "Basic-LightDirShadowAndSSAOTech.fx"
                mov r2.xyz, r2.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r3.xyz, r3.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r2.xyz, r1.wwww, r2.xyzx
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r3.xyz, r0.wwww, r3.xyzx
                add r3.xyz, r3.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r4.xyz, r0.wwww, r4.xyzx
                add r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r5.xyzw, v4.xyxx, t0.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 64
                mov r1.xyz, -r1.xyzx
                dp3 r0.w, r1.xyzx, r0.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // reflectionVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texturecube)(float,float,float,float) r0.xyzw, r0.xyzx, t2.xyzw, s1  // reflectionColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r1.x, -cb2[16].y
                add r1.x, r1.x, l(1.000000)
                mul r1.xyzw, r1.xxxx, r5.xyzw
                mul r0.xyzw, r0.xyzw, cb1[15].xyzw
                mul r0.xyzw, r0.xyzw, cb2[16].yyyy
                add r0.xyzw, r0.xyzw, r1.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r1.xyz, r2.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r1.xyzx
                add r0.xyz, r4.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 73
                mul r0.w, r0.w, cb1[13].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSLightDirShadowAndSSAOTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PSLightDirShadowAndSSAOTech<3:NaN:Inf>
                ret 
                // Approximately 146 instruction slots used
                            
            };
        }

    }

    technique11 LightDirTessTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4 [unused]
                //   float gZFar;                       // Offset:  324 Size:     4 [unused]
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4
                //   float gMinTessDistance;            // Offset:  336 Size:     4
                //   float gMinTessFactor;              // Offset:  340 Size:     4
                //   float gMaxTessFactor;              // Offset:  344 Size:     4
                //
                // }
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObjectBasic                  cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSTION                  0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TESS                     0     z         3     NONE  float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[22], immediateIndexed
                dcl_constantbuffer cb1[7], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 5
                
                #line 11 "Basic-LightDirTessTech.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // vOut<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // vOut<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // vOut<2:NaN:Inf>
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // vOut<3:NaN:Inf>
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // vOut<4:NaN:Inf>
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // vOut<5:NaN:Inf>
                dp3 r2.x, v2.xyzx, cb1[4].xyzx  // vOut<6:NaN:Inf>
                dp3 r2.y, v2.xyzx, cb1[5].xyzx  // vOut<7:NaN:Inf>
                dp3 r2.z, v2.xyzx, cb1[6].xyzx  // vOut<8:NaN:Inf>
                
                #line 16
                mov r3.xy, v3.xyxx  // vOut<9,10>
                mov r4.xyz, -cb0[15].xyzx
                add r4.xyz, r1.xyzx, r4.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                sqrt r0.w, r0.w  // d<0:NaN:Inf>
                
                #line 24
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[21].x
                mov r1.w, -cb0[20].w
                add r1.w, r1.w, cb0[21].x
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // tess<0:[0f,1f]>
                
                #line 27
                mov r1.w, -cb0[21].y
                add r1.w, r1.w, cb0[21].z
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[21].y  // vOut<11:NaN:Inf>
                mov o0.xyz, r1.xyzx  // VSLightDirTessTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o1.xyz, r0.xyzx  // VSLightDirTessTech<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VSLightDirTessTech<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                mov o3.xy, r3.xyxx  // VSLightDirTessTech<9,10>
                mov o3.z, r0.w  // VSLightDirTessTech<11:NaN:Inf>
                ret 
                // Approximately 33 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0  TRIEDGE  float   x   
                // SV_TessFactor            1   x           1  TRIEDGE  float   x   
                // SV_TessFactor            2   x           2  TRIEDGE  float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSTION                  0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TESS                     0     z         3     NONE  float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSTION                  0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed
                
                #line 73 "Basic-LightDirTessTech.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                mov r0.x, vOutputControlPointID  // hout<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // hout<3,4,5>
                mov r1.xyz, v[r0.x + 0][1].xyzx  // hout<6,7,8>
                mov r2.xyz, v[r0.x + 0][2].xyzx  // hout<9,10>
                mov r3.xy, v[r0.x + 0][3].xyxx  // HSLightDirTessTech<0,1,2>
                mov o0.xyz, r0.yzwy  // HSLightDirTessTech<3,4,5>
                mov o1.xyz, r1.xyzx  // HSLightDirTessTech<6,7,8>
                mov o2.xyz, r2.xyzx  // HSLightDirTessTech<9,10>
                mov o3.xy, r3.xyxx
                
                #line 47
                ret 
                hs_join_phase   // pt<0>
                dcl_input vicp[3][3].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                add r0.x, vicp[2][3].z, vicp[1][3].z
                mul r0.x, r0.x, l(0.500000)  // pt<1>
                add r0.y, vicp[0][3].z, vicp[2][3].z
                mul r0.y, r0.y, l(0.500000)  // pt<2>
                
                #line 52
                add r0.z, vicp[1][3].z, vicp[0][3].z  // PatchHS<0>
                mul r0.z, r0.z, l(0.500000)  // PatchHS<1>
                mov o0.x, r0.x  // PatchHS<2>
                mov o1.x, r0.y  // PatchHS<3>
                mov o2.x, r0.z
                
                // incorrect instruction offset in debug info
                mov o3.x, r0.x
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 21 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12
                //   float4x4 gViewProj;                // Offset:  256 Size:    64
                //   float gZNear;                      // Offset:  320 Size:     4 [unused]
                //   float gZFar;                       // Offset:  324 Size:     4 [unused]
                //   float gHeightScale;                // Offset:  328 Size:     4
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linearSampler                     sampler      NA          NA    0        1
                // gNormalMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0  TRIEDGE  float       
                // SV_TessFactor            1   x           1  TRIEDGE  float       
                // SV_TessFactor            2   x           2  TRIEDGE  float       
                // SV_InsideTessFactor      0   x           3   TRIINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSTION                  0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[21], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 98 "Basic-LightDirTessTech.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // dout<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // dout<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // dout<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // dout<13:NaN:Inf,14:NaN:Inf>
                
                #line 104
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // dout<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 113
                mov r4.xyz, -cb0[15].xyzx
                add r4.xyz, r0.xyzx, r4.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                sqrt r0.w, r0.w
                add r0.w, r0.w, l(-20.000000)
                div r0.w, r0.w, l(20.000000)
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // mipLevel<0:[-0f,6f]>
                
                #line 116
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // h<0:Inf>
                
                #line 119
                add r0.w, r0.w, l(-1.000000)
                mul r0.w, r0.w, cb0[20].z
                mul r4.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r4.xyzx  // dout<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov r4.xyz, r0.xyzx  // dout<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                
                #line 122
                mov r0.w, l(1.000000)
                dp4 r5.x, r0.xyzw, cb0[16].xyzw  // dout<0:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[17].xyzw  // dout<1:NaN:Inf>
                dp4 r5.z, r0.xyzw, cb0[18].xyzw  // dout<2:NaN:Inf>
                dp4 r5.w, r0.xyzw, cb0[19].xyzw  // dout<3:NaN:Inf>
                mov o0.xyzw, r5.xyzw  // DSLightDirTessTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r4.xyzx  // DSLightDirTessTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r1.xyzx  // DSLightDirTessTech<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r2.xyzx  // DSLightDirTessTech<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r3.xyxx  // DSLightDirTessTech<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 49 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4 [unused]
                //   float gZFar;                       // Offset:  324 Size:     4 [unused]
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linearSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObjectBasic                  cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[15], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 9
                
                #line 130 "Basic-LightDirTessTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov r1.xyz, r0.zxyz  // pIn<9:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v4.xyxx, t1.xyzw, s0
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                nop 
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                mov r1.xyz, r1.xyzx  // unitNormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, v3.xyzx  // tangentW<0,1,2>
                
                #line 255 "LightsUtilities.fx"
                mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:Inf,1:Inf,2:Inf>
                
                #line 258
                mov r1.xyz, r1.xyzx  // N<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                dp3 r0.w, r3.zxyz, r1.xyzx
                mul r4.xyz, r1.yzxy, r0.wwww
                mov r4.xyz, -r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, r3.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r3.yzxy  // T<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                mul r5.xyz, r1.zxyz, r4.yzxy
                mul r1.xyz, r1.xyzx, r4.xyzx
                mov r1.xyz, -r1.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx  // B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 265
                mul r3.xyz, r2.xxxx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.yyyy
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.zzzz
                add r0.xyz, r0.xyzx, r1.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 133 "Basic-LightDirTessTech.fx"
                mov r0.xyz, r0.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[15].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145
                nop 
                mov r2.xyz, cb1[12].xyzx  // mat<0,1,2>
                mov r3.xyz, cb1[13].xyzx  // mat<4,5,6>
                mov r4.xyzw, cb1[14].xyzw  // mat<8,9,10,11>
                mov r5.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r6.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r7.xyz, cb0[2].xyzx  // L<8,9,10>
                mov r8.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 119 "LightsUtilities.fx"
                mov r8.xyz, -r8.xyzx  // lightVec<0,1,2>
                
                #line 122
                mul r2.xyz, r2.xyzx, r5.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 127
                dp3 r0.w, r8.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 131
                lt r1.w, l(0.000000), r0.w
                mov r5.xyz, -r8.xyzx
                dp3 r2.w, r5.xyzx, r0.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r0.xyz, r0.xyzx, r2.wwww
                add r0.xyz, r5.xyzx, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r4.w
                exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                mul r0.yzw, r3.xxyz, r0.wwww
                mul r0.yzw, r6.xxyz, r0.yyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r1.xyz, r4.xyzx, r0.xxxx
                mul r1.xyz, r7.xyzx, r1.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                movc r0.xyz, r1.wwww, r0.yzwy, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r1.xyz, r1.wwww, r1.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145 "Basic-LightDirTessTech.fx"
                mov r2.xyz, r2.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r0.xyz, r0.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf>
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyz, r0.xyzx, r2.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 155
                mul r0.w, r3.w, cb1[13].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSLightDirTessTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PSLightDirTessTech<3:NaN:Inf>
                ret 
                // Approximately 82 instruction slots used
                            
            };
        }

    }

    technique11 LightReflectionTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSTION                  0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 11 "Basic-LightFullTech.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vOut<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vOut<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vOut<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vOut<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vOut<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vOut<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[4].xyzx  // vOut<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[5].xyzx  // vOut<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[6].xyzx  // vOut<12:NaN:Inf>
                
                #line 16
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 24
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[16].xyzw  // vOut<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[17].xyzw  // vOut<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VSLightFullTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VSLightFullTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VSLightFullTech<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VSLightFullTech<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VSLightFullTech<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96
                //   float3 gEyePosW;                   // Offset:  240 Size:    12
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4 [unused]
                //   float gZFar;                       // Offset:  324 Size:     4 [unused]
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   float gShadowMapSize;              // Offset:  256 Size:     4 [unused]
                //   float gReflection;                 // Offset:  260 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linearSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gCubeMap                          texture  float4        cube    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObjectBasic                  cbuffer      NA          NA    1        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSTION                  0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[16], immediateIndexed
                dcl_constantbuffer cb2[17], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 16
                
                #line 9 "Basic-LightReflectionTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov r1.xyz, r0.zxyz  // pIn<9:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v4.xyxx, t1.xyzw, s0
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                nop 
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                mov r1.xyz, r1.xyzx  // unitNormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, v3.xyzx  // tangentW<0,1,2>
                
                #line 255 "LightsUtilities.fx"
                mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:Inf,1:Inf,2:Inf>
                
                #line 258
                mov r1.xyz, r1.xyzx  // N<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                dp3 r0.w, r3.zxyz, r1.xyzx
                mul r4.xyz, r1.yzxy, r0.wwww
                mov r4.xyz, -r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, r3.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r3.yzxy  // T<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                mul r5.xyz, r1.zxyz, r4.yzxy
                mul r1.xyz, r1.xyzx, r4.xyzx
                mov r1.xyz, -r1.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx  // B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 265
                mul r3.xyz, r2.xxxx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.yyyy
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.zzzz
                add r0.xyz, r0.xyzx, r1.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12 "Basic-LightReflectionTech.fx"
                mov r0.xyz, r0.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[15].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 24
                nop 
                mov r2.xyz, cb1[12].xyzx  // mat<0,1,2>
                mov r3.xyz, cb1[13].xyzx  // mat<4,5,6>
                mov r4.xyzw, cb1[14].xyzw  // mat<8,9,10,11>
                mov r5.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r6.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r7.xyz, cb0[2].xyzx  // L<8,9,10>
                mov r8.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 119 "LightsUtilities.fx"
                mov r8.xyz, -r8.xyzx  // lightVec<0,1,2>
                
                #line 122
                mul r5.xyz, r2.xyzx, r5.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 127
                dp3 r0.w, r8.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 131
                lt r1.w, l(0.000000), r0.w
                mov r8.xyz, -r8.xyzx
                dp3 r2.w, r8.xyzx, r0.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r9.xyz, r0.xyzx, r2.wwww
                add r8.xyz, r8.xyzx, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r2.w, r8.xyzx, r1.xyzx
                max r2.w, r2.w, l(0.000000)
                log r2.w, r2.w
                mul r2.w, r2.w, r4.w
                exp r2.w, r2.w  // specFactor<0:NaN:Inf>
                mul r8.xyz, r3.xyzx, r0.wwww
                mul r6.xyz, r6.xyzx, r8.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r8.xyz, r4.xyzx, r2.wwww
                mul r7.xyz, r7.xyzx, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                movc r6.xyz, r1.wwww, r6.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r7.xyz, r1.wwww, r7.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 24 "Basic-LightReflectionTech.fx"
                mov r5.xyz, r5.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r6.xyz, r6.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r7.xyz, r7.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf>
                add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                nop 
                mov r8.xyz, cb0[4].xyzx  // L<0,1,2>
                mov r9.xyz, cb0[5].xyzx  // L<4,5,6>
                mov r10.xyz, cb0[6].xyzx  // L<8,9,10>
                mov r11.xyz, cb0[7].xyzx  // L<12,13,14>
                mov r0.w, cb0[7].w  // L<15>
                mov r12.xyz, cb0[8].xyzx  // L<16,17,18>
                mov r13.xyz, v1.xyzx  // pos<0,1,2>
                
                #line 155 "LightsUtilities.fx"
                mov r13.xyz, -r13.xyzx
                add r11.xyz, r11.xyzx, r13.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 158
                dp3 r1.w, r11.xyzx, r11.xyzx
                sqrt r14.y, r1.w  // d<0:NaN:Inf>
                
                #line 161
                lt r0.w, r0.w, r14.y
                
                #line 165
                if_z r0.w
                  div r11.xyz, r11.xyzx, r14.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 168
                  mul r8.xyz, r2.xyzx, r8.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 173
                  dp3 r0.w, r11.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 177
                  lt r1.w, l(0.000000), r0.w
                  mov r11.xyz, -r11.xyzx
                  dp3 r2.w, r11.xyzx, r0.xyzx
                  add r2.w, r2.w, r2.w
                  mov r2.w, -r2.w
                  mul r15.xyz, r0.xyzx, r2.wwww
                  add r11.xyz, r11.xyzx, r15.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.w, r11.xyzx, r1.xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, r4.w
                  exp r2.w, r2.w  // specFactor<0:NaN:Inf>
                  mul r11.xyz, r3.xyzx, r0.wwww
                  mul r9.xyz, r9.xyzx, r11.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r11.xyz, r4.xyzx, r2.wwww
                  mul r10.xyz, r10.xyzx, r11.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                  movc r9.xyz, r1.wwww, r9.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  movc r10.xyz, r1.wwww, r10.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 187
                  mul r14.z, r14.y, r14.y
                  mov r14.x, l(1.000000)
                  dp3 r0.w, r12.xyzx, r14.xyzx
                  div r0.w, l(1.000000), r0.w  // att<0:NaN:Inf>
                  mul r9.xyz, r0.wwww, r9.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r0.wwww, r10.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 165
                else 
                  mov r8.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r9.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r10.xyz, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 29 "Basic-LightReflectionTech.fx"
                mov r8.xyz, r8.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r9.xyz, r9.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r10.xyz, r10.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r5.xyz, r5.xyzx, r8.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r6.xyz, r6.xyzx, r9.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r7.xyz, r7.xyzx, r10.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                nop 
                mov r8.xyz, cb0[9].xyzx  // L<0,1,2>
                mov r9.xyz, cb0[10].xyzx  // L<4,5,6>
                mov r10.xyz, cb0[11].xyzx  // L<8,9,10>
                mov r11.xyz, cb0[12].xyzx  // L<12,13,14>
                mov r12.xyz, cb0[13].xyzx  // L<16,17,18>
                mov r14.xyz, cb0[14].xyzx  // L<20,21,22>
                mov r0.w, cb0[12].w  // L<15>
                mov r1.w, cb0[13].w  // L<19>
                
                #line 207 "LightsUtilities.fx"
                add r11.xyz, r13.xyzx, r11.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 210
                dp3 r2.w, r11.xyzx, r11.xyzx
                sqrt r13.y, r2.w  // d<0:NaN:Inf>
                
                #line 213
                lt r0.w, r0.w, r13.y
                
                #line 217
                if_z r0.w
                  div r11.xyz, r11.xyzx, r13.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 220
                  mul r2.xyz, r2.xyzx, r8.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 225
                  dp3 r0.w, r11.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 229
                  lt r2.w, l(0.000000), r0.w
                  mov r8.xyz, -r11.xyzx
                  dp3 r3.w, r8.xyzx, r0.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r11.xyz, r0.xyzx, r3.wwww
                  add r11.xyz, r8.xyzx, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r11.xyzx, r1.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r3.xyz, r3.xyzx, r0.wwww
                  mul r3.xyz, r9.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r3.wwww
                  mul r4.xyz, r10.xyzx, r4.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                  movc r3.xyz, r2.wwww, r3.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  movc r4.xyz, r2.wwww, r4.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 239
                  dp3 r0.w, r8.xyzx, r12.xyzx
                  max r0.w, r0.w, l(0.000000)
                  log r0.w, r0.w
                  mul r0.w, r0.w, r1.w
                  exp r0.w, r0.w  // spot<0:NaN:Inf>
                
                #line 242
                  mul r13.z, r13.y, r13.y
                  mov r13.x, l(1.000000)
                  dp3 r1.w, r14.xyzx, r13.xyzx
                  div r0.w, r0.w, r1.w  // att<0:NaN:Inf>
                
                #line 245
                  mul r3.xyz, r0.wwww, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r0.wwww, r4.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 217
                else 
                  mov r2.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r3.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r4.xyz, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 34 "Basic-LightReflectionTech.fx"
                mov r2.xyz, r2.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r3.xyz, r3.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r2.xyz, r2.xyzx, r5.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r3.xyz, r3.xyzx, r6.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r4.xyz, r4.xyzx, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r5.xyzw, v4.xyxx, t0.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r2.xyz, r2.xyzx, r5.xyzx
                add r2.xyz, r4.xyzx, r2.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, -r1.xyzx
                dp3 r0.w, r1.xyzx, r0.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // reflectionVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t2.xyzw, s1
                mov r0.xyz, r0.xyzx  // reflectionColor<0:Inf,1:Inf,2:Inf>
                
                #line 45
                mov r0.w, -cb2[16].y
                add r0.w, r0.w, l(1.000000)
                mul r1.xyz, r0.wwww, r2.xyzx
                mul r0.xyz, r0.xyzx, cb1[15].xyzx
                mul r0.xyz, r0.xyzx, cb2[16].yyyy
                add r0.xyz, r0.xyzx, r1.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 48
                mul r0.w, r5.w, cb1[13].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSLightReflectionTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PSLightReflectionTech<3:NaN:Inf>
                ret 
                // Approximately 205 instruction slots used
                            
            };
        }

    }

    technique11 LightAndNTB
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSTION                  0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 11 "Basic-LightFullTech.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vOut<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vOut<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vOut<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vOut<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vOut<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vOut<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[4].xyzx  // vOut<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[5].xyzx  // vOut<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[6].xyzx  // vOut<12:NaN:Inf>
                
                #line 16
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 24
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[16].xyzw  // vOut<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[17].xyzw  // vOut<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VSLightFullTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VSLightFullTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VSLightFullTech<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VSLightFullTech<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VSLightFullTech<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4 [unused]
                //   float gZFar;                       // Offset:  324 Size:     4 [unused]
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linearSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObjectBasic                  cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSTION                  0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[15], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 9
                
                #line 9 "Basic-LightDirTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov r1.xyz, r0.zxyz  // pIn<9:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v4.xyxx, t1.xyzw, s0
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                nop 
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                mov r1.xyz, r1.xyzx  // unitNormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, v3.xyzx  // tangentW<0,1,2>
                
                #line 255 "LightsUtilities.fx"
                mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:Inf,1:Inf,2:Inf>
                
                #line 258
                mov r1.xyz, r1.xyzx  // N<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                dp3 r0.w, r3.zxyz, r1.xyzx
                mul r4.xyz, r1.yzxy, r0.wwww
                mov r4.xyz, -r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, r3.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r3.yzxy  // T<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                mul r5.xyz, r1.zxyz, r4.yzxy
                mul r1.xyz, r1.xyzx, r4.xyzx
                mov r1.xyz, -r1.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx  // B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 265
                mul r3.xyz, r2.xxxx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.yyyy
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.zzzz
                add r0.xyz, r0.xyzx, r1.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12 "Basic-LightDirTech.fx"
                mov r0.xyz, r0.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[15].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 24
                nop 
                mov r2.xyz, cb1[12].xyzx  // mat<0,1,2>
                mov r3.xyz, cb1[13].xyzx  // mat<4,5,6>
                mov r4.xyzw, cb1[14].xyzw  // mat<8,9,10,11>
                mov r5.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r6.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r7.xyz, cb0[2].xyzx  // L<8,9,10>
                mov r8.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 119 "LightsUtilities.fx"
                mov r8.xyz, -r8.xyzx  // lightVec<0,1,2>
                
                #line 122
                mul r2.xyz, r2.xyzx, r5.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 127
                dp3 r0.w, r8.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 131
                lt r1.w, l(0.000000), r0.w
                mov r5.xyz, -r8.xyzx
                dp3 r2.w, r5.xyzx, r0.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r0.xyz, r0.xyzx, r2.wwww
                add r0.xyz, r5.xyzx, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r4.w
                exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                mul r0.yzw, r3.xxyz, r0.wwww
                mul r0.yzw, r6.xxyz, r0.yyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r1.xyz, r4.xyzx, r0.xxxx
                mul r1.xyz, r7.xyzx, r1.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                movc r0.xyz, r1.wwww, r0.yzwy, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r1.xyz, r1.wwww, r1.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 24 "Basic-LightDirTech.fx"
                mov r2.xyz, r2.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r0.xyz, r0.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf>
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                add r0.xyz, r0.xyzx, r2.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 34
                mul r0.w, r3.w, cb1[13].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSLightDirTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PSLightDirTech<3:NaN:Inf>
                ret 
                // Approximately 82 instruction slots used
                            
            };
        }

        pass P1
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12 [unused]
                //   float4x4 gViewProj;                // Offset:  256 Size:    64
                //   float gZNear;                      // Offset:  320 Size:     4 [unused]
                //   float gZFar;                       // Offset:  324 Size:     4 [unused]
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObjectBasic                  cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSTION                  0   xyzw        1     NONE  float   xyzw
                // POSTION                  1   xyzw        2     NONE  float   xyzw
                // POSTION                  2   xyzw        3     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[20], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                dcl_temps 6
                
                #line 13 "Basic-LightAndNTB.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // posW<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // posW<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // posW<2:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // normalW<0:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // normalW<1:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // normalW<2:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb1[4].xyzx  // tangentW<0:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb1[5].xyzx  // tangentW<1:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb1[6].xyzx  // tangentW<2:NaN:Inf>
                mul r4.xyz, r2.zxyz, r3.yzxy
                mul r5.xyz, r2.yzxy, r3.zxyz
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx  // biTangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r2.xyz, r2.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000)
                add r2.xyz, r1.xyzx, r2.xyzx
                mov r2.w, l(1.000000)
                dp4 r5.x, r2.xyzw, cb0[16].xyzw  // vOut<4:NaN:Inf>
                dp4 r5.y, r2.xyzw, cb0[17].xyzw  // vOut<5:NaN:Inf>
                dp4 r5.z, r2.xyzw, cb0[18].xyzw  // vOut<6:NaN:Inf>
                dp4 r5.w, r2.xyzw, cb0[19].xyzw  // vOut<7:NaN:Inf>
                mul r2.xyz, r3.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000)
                add r2.xyz, r1.xyzx, r2.xyzx
                mov r2.w, l(1.000000)
                dp4 r3.x, r2.xyzw, cb0[16].xyzw  // vOut<8:NaN:Inf>
                dp4 r3.y, r2.xyzw, cb0[17].xyzw  // vOut<9:NaN:Inf>
                dp4 r3.z, r2.xyzw, cb0[18].xyzw  // vOut<10:NaN:Inf>
                dp4 r3.w, r2.xyzw, cb0[19].xyzw  // vOut<11:NaN:Inf>
                mul r2.xyz, r4.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000)
                add r1.xyz, r1.xyzx, r2.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[16].xyzw  // vOut<12:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb0[17].xyzw  // vOut<13:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb0[18].xyzw  // vOut<14:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb0[19].xyzw  // vOut<15:NaN:Inf>
                
                #line 23
                dp4 r1.x, r0.xyzw, cb1[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb1[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb1[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb1[11].xyzw  // vOut<3:NaN:Inf>
                mov o0.xyzw, r1.xyzw  // NTB_VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r5.xyzw  // NTB_VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf,7:NaN:Inf>
                mov o2.xyzw, r3.xyzw  // NTB_VS<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf,11:NaN:Inf>
                mov o3.xyzw, r2.xyzw  // NTB_VS<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf,15:NaN:Inf>
                ret 
                // Approximately 45 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSTION                  0   xyzw        1     NONE  float   xyzw
                // POSTION                  1   xyzw        2     NONE  float   xyzw
                // POSTION                  2   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // m0:SV_POSITION           0   xyzw        0      POS  float   xyzw
                // m0:COLOR                 0   xyzw        1     NONE  float   xyzw
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_siv v[3][0].xyzw, position
                dcl_input v[3][1].xyzw
                dcl_input v[3][2].xyzw
                dcl_input v[3][3].xyzw
                dcl_temps 5
                dcl_inputprimitive triangle 
                dcl_stream m0
                dcl_outputtopology linestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_maxout 18
                
                #line 34 "Basic-LightAndNTB.fx"
                mov r0.xyzw, v[0][0].xyzw  // gout<0,1,2,3>
                mov r1.xyzw, l(0,1.000000,0,1.000000)  // gout<4: -0f,5: 1f,6: -0f,7: 1f>
                mov o0.xyzw, r0.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r1.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                mov r2.xyzw, v[0][1].xyzw  // gout<0,1,2,3>
                mov o0.xyzw, r2.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r1.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                cut_stream m0
                
                #line 43
                mov r2.xyzw, l(1.000000,0,0,1.000000)  // gout<4: 1f,5: -0f,6: -0f,7: 1f>
                mov o0.xyzw, r0.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r2.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                mov r3.xyzw, v[0][2].xyzw  // gout<0,1,2,3>
                mov o0.xyzw, r3.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r2.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                cut_stream m0
                
                #line 51
                mov r3.xyzw, l(0,0,1.000000,1.000000)  // gout<4: -0f,5: -0f,6: 1f,7: 1f>
                mov o0.xyzw, r0.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r3.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                mov r0.xyzw, v[0][3].xyzw  // gout<0,1,2,3>
                mov o0.xyzw, r0.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r3.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                cut_stream m0
                
                #line 59
                mov r0.xyzw, v[1][0].xyzw  // gout<0,1,2,3>
                mov o0.xyzw, r0.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r1.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                mov r4.xyzw, v[1][1].xyzw  // gout<0,1,2,3>
                mov o0.xyzw, r4.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r1.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                cut_stream m0
                
                #line 69
                mov o0.xyzw, r0.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r2.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                mov r4.xyzw, v[1][2].xyzw  // gout<0,1,2,3>
                mov o0.xyzw, r4.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r2.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                cut_stream m0
                
                #line 77
                mov o0.xyzw, r0.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r3.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                mov r0.xyzw, v[1][3].xyzw  // gout<0,1,2,3>
                mov o0.xyzw, r0.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r3.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                cut_stream m0
                
                #line 84
                mov r0.xyzw, v[2][0].xyzw  // gout<0,1,2,3>
                mov o0.xyzw, r0.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r1.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                mov r4.xyzw, v[2][1].xyzw  // gout<0,1,2,3>
                mov o0.xyzw, r4.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r1.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                cut_stream m0
                
                #line 94
                mov o0.xyzw, r0.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r2.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                mov r1.xyzw, v[2][2].xyzw  // gout<0,1,2,3>
                mov o0.xyzw, r1.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r2.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                cut_stream m0
                
                #line 102
                mov o0.xyzw, r0.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r3.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                mov r0.xyzw, v[2][3].xyzw  // gout<0,1,2,3>
                mov o0.xyzw, r0.xyzw  // lineStream<0,0,0,0>
                mov o1.xyzw, r3.xyzw  // lineStream<0,0,0,0>
                emit_stream m0
                cut_stream m0
                
                #line 29
                ret 
                // Approximately 79 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                
                #line 111 "Basic-LightAndNTB.fx"
                mov o0.xyzw, v1.xyzw  // NTB_PS<0,1,2,3>
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

    technique11 JustTexture
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 3
                
                #line 11 "Basic-JustTexture.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 14
                mov r0.xy, v1.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r2.x, r0.xyzw, cb0[16].xyzw  // vOut<4:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[17].xyzw  // vOut<5:NaN:Inf>
                mov o0.xyzw, r1.xyzw  // VSJustTexture<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xy, r2.xyxx  // VSJustTexture<4:NaN:Inf,5:NaN:Inf>
                ret 
                // Approximately 13 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                
                #line 21 "Basic-JustTexture.fx"
                sample_indexable(texture2d)(float,float,float,float) o0.xyzw, v1.xyxx, t0.xyzw, s0  // PSJustTexture<0:Inf,1:Inf,2:Inf,3:Inf>
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

    technique11 SkinnedDepthOnlyTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float       
                // TANGENT                  0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float       
                // WEIGHTS                  0   xyz         4     NONE  float   xyz 
                // BONEINDICES              0   xyzw        5     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 4
                dcl_indexableTemp x0[4], 4
                
                #line 40 "Basic-SkinnedNormalDepthTech.fx"
                mov x0[0].x, v4.x  // weights<0>
                mov x0[1].x, v4.y  // weights<1>
                mov x0[2].x, v4.z  // weights<2>
                mov r0.x, -v4.x
                add r0.x, r0.x, l(1.000000)
                mov r0.y, -v4.y
                add r0.x, r0.y, r0.x
                mov r0.y, -v4.z
                add r0.x, r0.y, r0.x
                mov x0[3].x, r0.x  // weights<3>
                
                #line 46
                mov r0.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.x, l(0)  // i<0>
                loop 
                  ilt r1.y, r1.x, l(4)
                  breakc_z r1.y
                  mov r1.y, r1.x
                  mov r1.z, x0[r1.y + 0].x  // weights<0:Inf>
                  and r2.xyzw, v5.xyzw, icb[r1.y + 0].xyzw
                  or r1.yw, r2.yyyw, r2.xxxz
                  or r1.y, r1.w, r1.y
                  imul null, r1.y, r1.y, l(4)
                  mov r2.xyz, v0.xyzx
                  mov r2.w, l(1.000000)
                  dp4 r3.x, r2.xyzw, cb1[r1.y + 0].xyzw
                  dp4 r3.y, r2.xyzw, cb1[r1.y + 1].xyzw
                  dp4 r3.z, r2.xyzw, cb1[r1.y + 2].xyzw
                  mul r1.yzw, r1.zzzz, r3.xxyz
                  add r0.xyz, r0.xyzx, r1.yzwy  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  iadd r1.x, r1.x, l(1)  // i<0>
                endloop 
                
                #line 52
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                mov o0.xyzw, r1.xyzw  // VSSkinnedDepthOnlyTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 37 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = NULL;
            RasterizerState = Depth;
        }

    }

    technique11 SkinnedDepthOnlyAlphaClipTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float       
                // TANGENT                  0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // WEIGHTS                  0   xyz         4     NONE  float   xyz 
                // BONEINDICES              0   xyzw        5     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 4
                dcl_indexableTemp x0[4], 4
                
                #line 15 "Basic-SkinnedNormalDepthTech.fx"
                mov x0[0].x, v4.x  // weights<0>
                mov x0[1].x, v4.y  // weights<1>
                mov x0[2].x, v4.z  // weights<2>
                mov r0.x, -v4.x
                add r0.x, r0.x, l(1.000000)
                mov r0.y, -v4.y
                add r0.x, r0.y, r0.x
                mov r0.y, -v4.z
                add r0.x, r0.y, r0.x
                mov x0[3].x, r0.x  // weights<3>
                
                #line 21
                mov r0.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.x, l(0)  // i<0>
                loop 
                  ilt r1.y, r1.x, l(4)
                  breakc_z r1.y
                  mov r1.y, r1.x
                  mov r1.z, x0[r1.y + 0].x  // weights<0:Inf>
                  and r2.xyzw, v5.xyzw, icb[r1.y + 0].xyzw
                  or r1.yw, r2.yyyw, r2.xxxz
                  or r1.y, r1.w, r1.y
                  imul null, r1.y, r1.y, l(4)
                  mov r2.xyz, v0.xyzx
                  mov r2.w, l(1.000000)
                  dp4 r3.x, r2.xyzw, cb1[r1.y + 0].xyzw
                  dp4 r3.y, r2.xyzw, cb1[r1.y + 1].xyzw
                  dp4 r3.z, r2.xyzw, cb1[r1.y + 2].xyzw
                  mul r1.yzw, r1.zzzz, r3.xxyz
                  add r0.xyz, r0.xyzx, r1.yzwy  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  iadd r1.x, r1.x, l(1)  // i<0>
                endloop 
                
                #line 27
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 30
                mov r0.xy, v3.xyxx  // vOut<4,5>
                mov o0.xyzw, r1.xyzw  // VSSkinnedDepthOnlyAlphaClipTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xy, r0.xyxx  // VSSkinnedDepthOnlyAlphaClipTech<4,5>
                ret 
                // Approximately 39 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Output
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_temps 1
                
                #line 35 "Basic-NormalDepthTech.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0
                mov r0.x, r0.x  // diffuse<0:Inf>
                
                #line 38
                add r0.x, r0.x, l(-0.150000)
                lt r0.x, r0.x, l(0.000000)
                and r0.x, r0.x, l(-1)
                discard r0.x
                
                #line 33
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 SkinnedNormalAndDepth16BitTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:   64 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   float gShadowMapSize;              // Offset:  256 Size:     4 [unused]
                //   float gReflection;                 // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    1        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // WEIGHTS                  0   xyz         4     NONE  float   xyz 
                // BONEINDICES              0   xyzw        5     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[11], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                
                #line 66 "Basic-SkinnedNormalDepthTech.fx"
                mov x0[0].x, v4.x  // weights<0>
                mov x0[1].x, v4.y  // weights<1>
                mov x0[2].x, v4.z  // weights<2>
                mov r0.x, -v4.x
                add r0.x, r0.x, l(1.000000)
                mov r0.y, -v4.y
                add r0.x, r0.y, r0.x
                mov r0.y, -v4.z
                add r0.x, r0.y, r0.x
                mov x0[3].x, r0.x  // weights<3>
                
                #line 74
                mov r0.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, l(0,0,0,0)  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, l(0,0,0,0)  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, l(0)  // i<0>
                loop 
                  ilt r2.w, r1.w, l(4)
                  breakc_z r2.w
                
                #line 78
                  mov r2.w, r1.w
                  mov r3.x, x0[r2.w + 0].x  // weights<0:Inf>
                  and r4.xyzw, v5.xyzw, icb[r2.w + 0].xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r2.w, r3.z, r3.y
                  imul null, r2.w, r2.w, l(4)
                  mov r4.xyz, v0.xyzx
                  mov r4.w, l(1.000000)
                  dp4 r5.x, r4.xyzw, cb2[r2.w + 0].xyzw
                  dp4 r5.y, r4.xyzw, cb2[r2.w + 1].xyzw
                  dp4 r5.z, r4.xyzw, cb2[r2.w + 2].xyzw
                  mul r3.yzw, r3.xxxx, r5.xxyz
                  add r0.xyz, r0.xyzx, r3.yzwy  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v1.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r2.w + 2].xyzx
                  mul r3.yzw, r3.xxxx, r4.xxyz
                  add r1.xyz, r1.xyzx, r3.yzwy  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v2.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r4.y, v2.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r4.z, v2.xyzx, cb2[r2.w + 2].xyzx
                  mul r3.xyz, r3.xxxx, r4.xyzx
                  add r2.xyz, r2.xyzx, r3.xyzx  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 74
                  iadd r1.w, r1.w, l(1)  // i<0>
                endloop 
                
                #line 84
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 87
                dp4 r4.x, r0.xyzw, cb1[4].xyzw  // vOut<4:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb1[5].xyzw  // vOut<5:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb1[6].xyzw  // vOut<6:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb1[7].xyzw  // vOut<7:NaN:Inf>
                dp3 r0.x, r1.xyzx, cb1[8].xyzx  // vOut<8:NaN:Inf>
                dp3 r0.y, r1.xyzx, cb1[9].xyzx  // vOut<9:NaN:Inf>
                dp3 r0.z, r1.xyzx, cb1[10].xyzx  // vOut<10:NaN:Inf>
                dp3 r1.x, r2.xyzx, cb1[8].xyzx  // vOut<11:NaN:Inf>
                dp3 r1.y, r2.xyzx, cb1[9].xyzx  // vOut<12:NaN:Inf>
                dp3 r1.z, r2.xyzx, cb1[10].xyzx  // vOut<13:NaN:Inf>
                
                #line 92
                mov r2.xy, v3.xyxx  // vOut<14,15>
                mov o0.xyzw, r3.xyzw  // VSSkinnedNormalAndDepthTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r4.xyzw  // VSSkinnedNormalAndDepthTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf,7:NaN:Inf>
                mov o2.xyz, r0.xyzx  // VSSkinnedNormalAndDepthTech<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r1.xyzx  // VSSkinnedNormalAndDepthTech<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o4.xy, r2.xyxx  // VSSkinnedNormalAndDepthTech<14,15>
                ret 
                // Approximately 64 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyzw        1     NONE  float     z 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 77 "Basic-NormalDepthTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSNormalAndDepth16BitTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, v1.z  // PSNormalAndDepth16BitTech<3>
                ret 
                // Approximately 6 instruction slots used
                            
            };
            RasterizerState = BackfaceCull;
        }

    }

    technique11 SkinnedNormalAndDepthAlphaClip16BitTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:   64 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   float gShadowMapSize;              // Offset:  256 Size:     4 [unused]
                //   float gReflection;                 // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    1        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // WEIGHTS                  0   xyz         4     NONE  float   xyz 
                // BONEINDICES              0   xyzw        5     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[11], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                
                #line 66 "Basic-SkinnedNormalDepthTech.fx"
                mov x0[0].x, v4.x  // weights<0>
                mov x0[1].x, v4.y  // weights<1>
                mov x0[2].x, v4.z  // weights<2>
                mov r0.x, -v4.x
                add r0.x, r0.x, l(1.000000)
                mov r0.y, -v4.y
                add r0.x, r0.y, r0.x
                mov r0.y, -v4.z
                add r0.x, r0.y, r0.x
                mov x0[3].x, r0.x  // weights<3>
                
                #line 74
                mov r0.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, l(0,0,0,0)  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, l(0,0,0,0)  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, l(0)  // i<0>
                loop 
                  ilt r2.w, r1.w, l(4)
                  breakc_z r2.w
                
                #line 78
                  mov r2.w, r1.w
                  mov r3.x, x0[r2.w + 0].x  // weights<0:Inf>
                  and r4.xyzw, v5.xyzw, icb[r2.w + 0].xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r2.w, r3.z, r3.y
                  imul null, r2.w, r2.w, l(4)
                  mov r4.xyz, v0.xyzx
                  mov r4.w, l(1.000000)
                  dp4 r5.x, r4.xyzw, cb2[r2.w + 0].xyzw
                  dp4 r5.y, r4.xyzw, cb2[r2.w + 1].xyzw
                  dp4 r5.z, r4.xyzw, cb2[r2.w + 2].xyzw
                  mul r3.yzw, r3.xxxx, r5.xxyz
                  add r0.xyz, r0.xyzx, r3.yzwy  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v1.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r2.w + 2].xyzx
                  mul r3.yzw, r3.xxxx, r4.xxyz
                  add r1.xyz, r1.xyzx, r3.yzwy  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v2.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r4.y, v2.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r4.z, v2.xyzx, cb2[r2.w + 2].xyzx
                  mul r3.xyz, r3.xxxx, r4.xyzx
                  add r2.xyz, r2.xyzx, r3.xyzx  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 74
                  iadd r1.w, r1.w, l(1)  // i<0>
                endloop 
                
                #line 84
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 87
                dp4 r4.x, r0.xyzw, cb1[4].xyzw  // vOut<4:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb1[5].xyzw  // vOut<5:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb1[6].xyzw  // vOut<6:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb1[7].xyzw  // vOut<7:NaN:Inf>
                dp3 r0.x, r1.xyzx, cb1[8].xyzx  // vOut<8:NaN:Inf>
                dp3 r0.y, r1.xyzx, cb1[9].xyzx  // vOut<9:NaN:Inf>
                dp3 r0.z, r1.xyzx, cb1[10].xyzx  // vOut<10:NaN:Inf>
                dp3 r1.x, r2.xyzx, cb1[8].xyzx  // vOut<11:NaN:Inf>
                dp3 r1.y, r2.xyzx, cb1[9].xyzx  // vOut<12:NaN:Inf>
                dp3 r1.z, r2.xyzx, cb1[10].xyzx  // vOut<13:NaN:Inf>
                
                #line 92
                mov r2.xy, v3.xyxx  // vOut<14,15>
                mov o0.xyzw, r3.xyzw  // VSSkinnedNormalAndDepthTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r4.xyzw  // VSSkinnedNormalAndDepthTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf,7:NaN:Inf>
                mov o2.xyz, r0.xyzx  // VSSkinnedNormalAndDepthTech<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r1.xyzx  // VSSkinnedNormalAndDepthTech<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o4.xy, r2.xyxx  // VSSkinnedNormalAndDepthTech<14,15>
                ret 
                // Approximately 64 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyzw        1     NONE  float     z 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 66 "Basic-NormalDepthTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r0.w, v4.xyxx, t0.xyzw, s0
                mov r0.w, r0.w  // texColor<3:Inf>
                add r0.w, r0.w, l(-0.100000)
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard r0.w
                mov o0.xyz, r0.xyzx  // PSNormalAndDepthAlphaClip16BitTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, v1.z  // PSNormalAndDepthAlphaClip16BitTech<3>
                ret 
                // Approximately 12 instruction slots used
                            
            };
            RasterizerState = BackfaceCull;
        }

    }

    technique11 SkinnedNormalAndDepth8BitTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:   64 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   float gShadowMapSize;              // Offset:  256 Size:     4 [unused]
                //   float gReflection;                 // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    1        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // WEIGHTS                  0   xyz         4     NONE  float   xyz 
                // BONEINDICES              0   xyzw        5     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[11], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                
                #line 66 "Basic-SkinnedNormalDepthTech.fx"
                mov x0[0].x, v4.x  // weights<0>
                mov x0[1].x, v4.y  // weights<1>
                mov x0[2].x, v4.z  // weights<2>
                mov r0.x, -v4.x
                add r0.x, r0.x, l(1.000000)
                mov r0.y, -v4.y
                add r0.x, r0.y, r0.x
                mov r0.y, -v4.z
                add r0.x, r0.y, r0.x
                mov x0[3].x, r0.x  // weights<3>
                
                #line 74
                mov r0.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, l(0,0,0,0)  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, l(0,0,0,0)  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, l(0)  // i<0>
                loop 
                  ilt r2.w, r1.w, l(4)
                  breakc_z r2.w
                
                #line 78
                  mov r2.w, r1.w
                  mov r3.x, x0[r2.w + 0].x  // weights<0:Inf>
                  and r4.xyzw, v5.xyzw, icb[r2.w + 0].xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r2.w, r3.z, r3.y
                  imul null, r2.w, r2.w, l(4)
                  mov r4.xyz, v0.xyzx
                  mov r4.w, l(1.000000)
                  dp4 r5.x, r4.xyzw, cb2[r2.w + 0].xyzw
                  dp4 r5.y, r4.xyzw, cb2[r2.w + 1].xyzw
                  dp4 r5.z, r4.xyzw, cb2[r2.w + 2].xyzw
                  mul r3.yzw, r3.xxxx, r5.xxyz
                  add r0.xyz, r0.xyzx, r3.yzwy  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v1.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r2.w + 2].xyzx
                  mul r3.yzw, r3.xxxx, r4.xxyz
                  add r1.xyz, r1.xyzx, r3.yzwy  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v2.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r4.y, v2.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r4.z, v2.xyzx, cb2[r2.w + 2].xyzx
                  mul r3.xyz, r3.xxxx, r4.xyzx
                  add r2.xyz, r2.xyzx, r3.xyzx  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 74
                  iadd r1.w, r1.w, l(1)  // i<0>
                endloop 
                
                #line 84
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 87
                dp4 r4.x, r0.xyzw, cb1[4].xyzw  // vOut<4:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb1[5].xyzw  // vOut<5:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb1[6].xyzw  // vOut<6:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb1[7].xyzw  // vOut<7:NaN:Inf>
                dp3 r0.x, r1.xyzx, cb1[8].xyzx  // vOut<8:NaN:Inf>
                dp3 r0.y, r1.xyzx, cb1[9].xyzx  // vOut<9:NaN:Inf>
                dp3 r0.z, r1.xyzx, cb1[10].xyzx  // vOut<10:NaN:Inf>
                dp3 r1.x, r2.xyzx, cb1[8].xyzx  // vOut<11:NaN:Inf>
                dp3 r1.y, r2.xyzx, cb1[9].xyzx  // vOut<12:NaN:Inf>
                dp3 r1.z, r2.xyzx, cb1[10].xyzx  // vOut<13:NaN:Inf>
                
                #line 92
                mov r2.xy, v3.xyxx  // vOut<14,15>
                mov o0.xyzw, r3.xyzw  // VSSkinnedNormalAndDepthTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r4.xyzw  // VSSkinnedNormalAndDepthTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf,7:NaN:Inf>
                mov o2.xyz, r0.xyzx  // VSSkinnedNormalAndDepthTech<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r1.xyzx  // VSSkinnedNormalAndDepthTech<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o4.xy, r2.xyxx  // VSSkinnedNormalAndDepthTech<14,15>
                ret 
                // Approximately 64 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12 [unused]
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4
                //   float gZFar;                       // Offset:  324 Size:     4
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linearSampler                     sampler      NA          NA    0        1
                // gNormalMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyzw        1     NONE  float     z 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[21], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 5
                
                #line 119 "Basic-NormalDepthTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, v4.xyxx, t0.xyzw, s0
                mov r1.xyz, r1.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                nop 
                mov r1.xyz, r1.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                mov r2.xyz, r0.xyzx  // unitNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, v3.xyzx  // tangentW<0,1,2>
                
                #line 255 "LightsUtilities.fx"
                mul r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r1.xyz, r1.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:Inf,1:Inf,2:Inf>
                
                #line 258
                mov r2.xyz, r2.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.z, r3.xyzx, r2.xyzx
                mul r4.xyz, r2.xyzx, r0.zzzz
                mov r4.xyz, -r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r0.z, r3.xyzx, r3.xyzx
                rsq r0.z, r0.z
                mul r3.xyz, r0.zzzz, r3.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r0.zw, r2.yyyz, r3.zzzx
                mul r2.xy, r2.zxzz, r3.yzyy
                mov r2.xy, -r2.xyxx
                add r0.zw, r0.zzzw, r2.xxxy  // B<0:NaN:Inf,1:NaN:Inf>
                
                #line 265
                mul r1.xw, r1.xxxx, r3.xxxy
                mul r0.zw, r0.zzzw, r1.yyyy
                add r0.zw, r0.zzzw, r1.xxxw
                mul r0.xy, r0.xyxx, r1.zzzz
                add r0.xy, r0.xyxx, r0.zwzz  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf>
                mov r0.xy, r0.xyxx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf>
                
                #line 123 "Basic-NormalDepthTech.fx"
                mov r0.xy, r0.xyxx  // bumpedNormalV<0:NaN:Inf,1:NaN:Inf>
                nop 
                mov r0.xy, r0.xyxx  // normal<0:NaN:Inf,1:NaN:Inf>
                mov r0.z, v1.z  // depth<0>
                
                #line 89
                add r0.xy, r0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                mul r1.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // normalScaled<0:NaN:Inf,1:NaN:Inf>
                
                #line 92
                mov r0.x, -cb0[20].x
                add r0.y, r0.x, r0.z
                add r0.x, r0.x, cb0[20].y
                div r0.x, r0.y, r0.x  // depthScaled<0:NaN:Inf>
                
                #line 95
                mul r0.y, r0.x, l(255.000000)
                frc r1.w, r0.y  // depthScaledW<0:NaN>
                div r0.y, r1.w, l(255.000000)
                mov r0.y, -r0.y
                add r1.z, r0.y, r0.x  // depthScaledZ<0:NaN:Inf>
                mov r1.xy, r1.xyxx  // VectorsTo8Bit<0:NaN:Inf,1:NaN:Inf>
                mov r1.z, r1.z  // VectorsTo8Bit<2:NaN:Inf>
                mov r1.w, r1.w  // VectorsTo8Bit<3:NaN>
                
                #line 125
                mov o0.xyzw, r1.xyzw  // PSNormalAndDepth8BitTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN>
                ret 
                // Approximately 49 instruction slots used
                            
            };
            RasterizerState = BackfaceCull;
        }

    }

    technique11 SkinnedNormalAndDepthAlphaClip8BitTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:   64 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   float gShadowMapSize;              // Offset:  256 Size:     4 [unused]
                //   float gReflection;                 // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    1        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // WEIGHTS                  0   xyz         4     NONE  float   xyz 
                // BONEINDICES              0   xyzw        5     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[11], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                
                #line 66 "Basic-SkinnedNormalDepthTech.fx"
                mov x0[0].x, v4.x  // weights<0>
                mov x0[1].x, v4.y  // weights<1>
                mov x0[2].x, v4.z  // weights<2>
                mov r0.x, -v4.x
                add r0.x, r0.x, l(1.000000)
                mov r0.y, -v4.y
                add r0.x, r0.y, r0.x
                mov r0.y, -v4.z
                add r0.x, r0.y, r0.x
                mov x0[3].x, r0.x  // weights<3>
                
                #line 74
                mov r0.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, l(0,0,0,0)  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, l(0,0,0,0)  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, l(0)  // i<0>
                loop 
                  ilt r2.w, r1.w, l(4)
                  breakc_z r2.w
                
                #line 78
                  mov r2.w, r1.w
                  mov r3.x, x0[r2.w + 0].x  // weights<0:Inf>
                  and r4.xyzw, v5.xyzw, icb[r2.w + 0].xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r2.w, r3.z, r3.y
                  imul null, r2.w, r2.w, l(4)
                  mov r4.xyz, v0.xyzx
                  mov r4.w, l(1.000000)
                  dp4 r5.x, r4.xyzw, cb2[r2.w + 0].xyzw
                  dp4 r5.y, r4.xyzw, cb2[r2.w + 1].xyzw
                  dp4 r5.z, r4.xyzw, cb2[r2.w + 2].xyzw
                  mul r3.yzw, r3.xxxx, r5.xxyz
                  add r0.xyz, r0.xyzx, r3.yzwy  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v1.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r2.w + 2].xyzx
                  mul r3.yzw, r3.xxxx, r4.xxyz
                  add r1.xyz, r1.xyzx, r3.yzwy  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v2.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r4.y, v2.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r4.z, v2.xyzx, cb2[r2.w + 2].xyzx
                  mul r3.xyz, r3.xxxx, r4.xyzx
                  add r2.xyz, r2.xyzx, r3.xyzx  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 74
                  iadd r1.w, r1.w, l(1)  // i<0>
                endloop 
                
                #line 84
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 87
                dp4 r4.x, r0.xyzw, cb1[4].xyzw  // vOut<4:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb1[5].xyzw  // vOut<5:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb1[6].xyzw  // vOut<6:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb1[7].xyzw  // vOut<7:NaN:Inf>
                dp3 r0.x, r1.xyzx, cb1[8].xyzx  // vOut<8:NaN:Inf>
                dp3 r0.y, r1.xyzx, cb1[9].xyzx  // vOut<9:NaN:Inf>
                dp3 r0.z, r1.xyzx, cb1[10].xyzx  // vOut<10:NaN:Inf>
                dp3 r1.x, r2.xyzx, cb1[8].xyzx  // vOut<11:NaN:Inf>
                dp3 r1.y, r2.xyzx, cb1[9].xyzx  // vOut<12:NaN:Inf>
                dp3 r1.z, r2.xyzx, cb1[10].xyzx  // vOut<13:NaN:Inf>
                
                #line 92
                mov r2.xy, v3.xyxx  // vOut<14,15>
                mov o0.xyzw, r3.xyzw  // VSSkinnedNormalAndDepthTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r4.xyzw  // VSSkinnedNormalAndDepthTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf,7:NaN:Inf>
                mov o2.xyz, r0.xyzx  // VSSkinnedNormalAndDepthTech<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r1.xyzx  // VSSkinnedNormalAndDepthTech<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o4.xy, r2.xyxx  // VSSkinnedNormalAndDepthTech<14,15>
                ret 
                // Approximately 64 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12 [unused]
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4
                //   float gZFar;                       // Offset:  324 Size:     4
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linearSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyzw        1     NONE  float     z 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[21], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 5
                
                #line 104 "Basic-NormalDepthTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r0.w, v4.xyxx, t0.xyzw, s1
                mov r0.w, r0.w  // texColor<3:Inf>
                add r0.w, r0.w, l(-0.100000)
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard r0.w
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, v4.xyxx, t1.xyzw, s0
                mov r1.xyz, r1.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                nop 
                mov r1.xyz, r1.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                mov r2.xyz, r0.xyzx  // unitNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, v3.xyzx  // tangentW<0,1,2>
                
                #line 255 "LightsUtilities.fx"
                mul r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r1.xyz, r1.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:Inf,1:Inf,2:Inf>
                
                #line 258
                mov r2.xyz, r2.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.z, r3.xyzx, r2.xyzx
                mul r4.xyz, r2.xyzx, r0.zzzz
                mov r4.xyz, -r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r0.z, r3.xyzx, r3.xyzx
                rsq r0.z, r0.z
                mul r3.xyz, r0.zzzz, r3.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r0.zw, r2.yyyz, r3.zzzx
                mul r2.xy, r2.zxzz, r3.yzyy
                mov r2.xy, -r2.xyxx
                add r0.zw, r0.zzzw, r2.xxxy  // B<0:NaN:Inf,1:NaN:Inf>
                
                #line 265
                mul r1.xw, r1.xxxx, r3.xxxy
                mul r0.zw, r0.zzzw, r1.yyyy
                add r0.zw, r0.zzzw, r1.xxxw
                mul r0.xy, r0.xyxx, r1.zzzz
                add r0.xy, r0.xyxx, r0.zwzz  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf>
                mov r0.xy, r0.xyxx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf>
                
                #line 111 "Basic-NormalDepthTech.fx"
                mov r0.xy, r0.xyxx  // bumpedNormalV<0:NaN:Inf,1:NaN:Inf>
                nop 
                mov r0.xy, r0.xyxx  // normal<0:NaN:Inf,1:NaN:Inf>
                mov r0.z, v1.z  // depth<0>
                
                #line 89
                add r0.xy, r0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                mul r1.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // normalScaled<0:NaN:Inf,1:NaN:Inf>
                
                #line 92
                mov r0.x, -cb0[20].x
                add r0.y, r0.x, r0.z
                add r0.x, r0.x, cb0[20].y
                div r0.x, r0.y, r0.x  // depthScaled<0:NaN:Inf>
                
                #line 95
                mul r0.y, r0.x, l(255.000000)
                frc r1.w, r0.y  // depthScaledW<0:NaN>
                div r0.y, r1.w, l(255.000000)
                mov r0.y, -r0.y
                add r1.z, r0.y, r0.x  // depthScaledZ<0:NaN:Inf>
                mov r1.xy, r1.xyxx  // VectorsTo8Bit<0:NaN:Inf,1:NaN:Inf>
                mov r1.z, r1.z  // VectorsTo8Bit<2:NaN:Inf>
                mov r1.w, r1.w  // VectorsTo8Bit<3:NaN>
                
                #line 113
                mov o0.xyzw, r1.xyzw  // PSNormalAndDepthAlphaClip8BitTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN>
                ret 
                // Approximately 55 instruction slots used
                            
            };
            RasterizerState = BackfaceCull;
        }

    }

    technique11 SkinnedLightDirShadowAndSSAOTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64
                //   float4x4 gWorldView;               // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64
                //   float gShadowMapSize;              // Offset:  256 Size:     4 [unused]
                //   float gReflection;                 // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectBasic                  cbuffer      NA          NA    0        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    1        1
                // cbSkinned                         cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // WEIGHTS                  0   xyz         4     NONE  float   xyz 
                // BONEINDICES              0   xyzw        5     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                // TEXCOORD                 2   xyzw        6     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[16], immediateIndexed
                dcl_constantbuffer cb2[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyzw
                dcl_output o6.xyzw
                dcl_temps 8
                dcl_indexableTemp x0[4], 4
                
                #line 11 "Basic-SkinnedLightDirShadowAndSSAOTech.fx"
                mov x0[0].x, v4.x  // weights<0>
                mov x0[1].x, v4.y  // weights<1>
                mov x0[2].x, v4.z  // weights<2>
                mov r0.x, -v4.x
                add r0.x, r0.x, l(1.000000)
                mov r0.y, -v4.y
                add r0.x, r0.y, r0.x
                mov r0.y, -v4.z
                add r0.x, r0.y, r0.x
                mov x0[3].x, r0.x  // weights<3>
                
                #line 19
                mov r0.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, l(0,0,0,0)  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, l(0,0,0,0)  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, l(0)  // i<0>
                loop 
                  ilt r2.w, r1.w, l(4)
                  breakc_z r2.w
                
                #line 23
                  mov r2.w, r1.w
                  mov r3.x, x0[r2.w + 0].x  // weights<0:Inf>
                  and r4.xyzw, v5.xyzw, icb[r2.w + 0].xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r2.w, r3.z, r3.y
                  imul null, r2.w, r2.w, l(4)
                  mov r4.xyz, v0.xyzx
                  mov r4.w, l(1.000000)
                  dp4 r5.x, r4.xyzw, cb2[r2.w + 0].xyzw
                  dp4 r5.y, r4.xyzw, cb2[r2.w + 1].xyzw
                  dp4 r5.z, r4.xyzw, cb2[r2.w + 2].xyzw
                  mul r3.yzw, r3.xxxx, r5.xxyz
                  add r0.xyz, r0.xyzx, r3.yzwy  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v1.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb2[r2.w + 2].xyzx
                  mul r3.yzw, r3.xxxx, r4.xxyz
                  add r1.xyz, r1.xyzx, r3.yzwy  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v2.xyzx, cb2[r2.w + 0].xyzx
                  dp3 r4.y, v2.xyzx, cb2[r2.w + 1].xyzx
                  dp3 r4.z, v2.xyzx, cb2[r2.w + 2].xyzx
                  mul r3.xyz, r3.xxxx, r4.xyzx
                  add r2.xyz, r2.xyzx, r3.xyzx  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 19
                  iadd r1.w, r1.w, l(1)  // i<0>
                endloop 
                
                #line 29
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb0[0].xyzw  // vOut<4:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[1].xyzw  // vOut<5:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[2].xyzw  // vOut<6:NaN:Inf>
                dp3 r4.x, r1.xyzx, cb0[4].xyzx  // vOut<7:NaN:Inf>
                dp3 r4.y, r1.xyzx, cb0[5].xyzx  // vOut<8:NaN:Inf>
                dp3 r4.z, r1.xyzx, cb0[6].xyzx  // vOut<9:NaN:Inf>
                dp3 r1.x, r2.xyzx, cb0[4].xyzx  // vOut<10:NaN:Inf>
                dp3 r1.y, r2.xyzx, cb0[5].xyzx  // vOut<11:NaN:Inf>
                dp3 r1.z, r2.xyzx, cb0[6].xyzx  // vOut<12:NaN:Inf>
                
                #line 34
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // vOut<0:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // vOut<1:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // vOut<2:NaN:Inf>
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // vOut<3:NaN:Inf>
                
                #line 37
                mov r5.xy, v3.xyxx
                mov r5.zw, l(0,0,0,1.000000)
                dp4 r6.x, r5.xyzw, cb0[16].xyzw  // vOut<13:NaN:Inf>
                dp4 r6.y, r5.xyzw, cb0[17].xyzw  // vOut<14:NaN:Inf>
                
                #line 40
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // vOut<15:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // vOut<16:NaN:Inf>
                dp4 r5.z, r0.xyzw, cb1[14].xyzw  // vOut<17:NaN:Inf>
                dp4 r5.w, r0.xyzw, cb1[15].xyzw  // vOut<18:NaN:Inf>
                
                #line 43
                dp4 r7.x, r0.xyzw, cb1[0].xyzw  // vOut<19:NaN:Inf>
                dp4 r7.y, r0.xyzw, cb1[1].xyzw  // vOut<20:NaN:Inf>
                dp4 r7.z, r0.xyzw, cb1[2].xyzw  // vOut<21:NaN:Inf>
                dp4 r7.w, r0.xyzw, cb1[3].xyzw  // vOut<22:NaN:Inf>
                mov o0.xyzw, r2.xyzw  // VSSkinnedLightDirShadowAndSSAOTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o5.xyzw, r5.xyzw  // VSSkinnedLightDirShadowAndSSAOTech<15:NaN:Inf,16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o6.xyzw, r7.xyzw  // VSSkinnedLightDirShadowAndSSAOTech<19:NaN:Inf,20:NaN:Inf,21:NaN:Inf,22:NaN:Inf>
                mov o1.xyz, r3.xyzx  // VSSkinnedLightDirShadowAndSSAOTech<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r4.xyzx  // VSSkinnedLightDirShadowAndSSAOTech<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r1.xyzx  // VSSkinnedLightDirShadowAndSSAOTech<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r6.xyxx  // VSSkinnedLightDirShadowAndSSAOTech<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Attenuation;            // Offset:  224
                //       float Pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:  240 Size:    12
                //   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
                //   float gZNear;                      // Offset:  320 Size:     4 [unused]
                //   float gZFar;                       // Offset:  324 Size:     4 [unused]
                //   float gHeightScale;                // Offset:  328 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  332 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  336 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  340 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  344 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectBasic
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObjectAdvanced
                // {
                //
                //   float4x4 gWorldViewProjTex;        // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldInvTransposeView;   // Offset:  128 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  192 Size:    64 [unused]
                //   float gShadowMapSize;              // Offset:  256 Size:     4
                //   float gReflection;                 // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // linearSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // samShadow                       sampler_c      NA          NA    2        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gShadowMap                        texture  float4          2d    2        1
                // gSsaoMap                          texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObjectBasic                  cbuffer      NA          NA    1        1
                // cbPerObjectAdvanced               cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                // TEXCOORD                 2   xyzw        6     NONE  float   xy w
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[15], immediateIndexed
                dcl_constantbuffer cb2[17], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyzw
                dcl_input_ps linear v6.xyw
                dcl_output o0.xyzw
                dcl_temps 9
                
                #line 33 "Basic-LightDirShadowAndSSAOTech.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov r1.xyz, r0.zxyz  // pIn<9:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v4.xyxx, t1.xyzw, s0
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                nop 
                mov r2.xyz, r2.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                mov r1.xyz, r1.xyzx  // unitNormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, v3.xyzx  // tangentW<0,1,2>
                
                #line 255 "LightsUtilities.fx"
                mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:Inf,1:Inf,2:Inf>
                
                #line 258
                mov r1.xyz, r1.xyzx  // N<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                dp3 r0.w, r3.zxyz, r1.xyzx
                mul r4.xyz, r1.yzxy, r0.wwww
                mov r4.xyz, -r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, r3.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r3.yzxy  // T<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                mul r5.xyz, r1.zxyz, r4.yzxy
                mul r1.xyz, r1.xyzx, r4.xyzx
                mov r1.xyz, -r1.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx  // B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 265
                mul r3.xyz, r2.xxxx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.yyyy
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.zzzz
                add r0.xyz, r0.xyzx, r1.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 36 "Basic-LightDirShadowAndSSAOTech.fx"
                mov r0.xyz, r0.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[15].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 41
                nop 
                mov r2.xyzw, v5.xyzw  // shadowPosH<0,1,2,3>
                mov r0.w, cb2[16].x  // sMapSize<0>
                
                #line 276 "LightsUtilities.fx"
                div r2.xyz, r2.zxyz, r2.wwww  // shadowPosH<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 279
                mov r2.x, r2.x  // depth<0:NaN:Inf>
                
                #line 282
                div r3.y, l(1.000000), r0.w  // dx<0:Inf>
                mov r0.w, r3.y  // dx<0:Inf>
                
                #line 289
                mov r4.y, -r0.w  // offsets<3:Inf>
                mov r3.z, -r0.w  // offsets<5:Inf>
                mov r5.x, -r0.w  // offsets<6:Inf>
                mov r3.x, -r0.w  // offsets<12:Inf>
                
                #line 296
                mov r0.w, -r0.w
                add r4.zw, r0.wwww, r2.yyyz
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.w, r4.zwzz, t2.xxxx, s2, r2.x
                add r0.w, r0.w, l(0.000000)  // percentLit<0:[0f,1f]>
                mov r4.x, l(0)
                add r4.xy, r2.yzyy, r4.xyxx
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,2f]>
                add r4.xy, r2.yzyy, r3.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,3f]>
                mov r5.y, l(0)
                add r4.xy, r2.yzyy, r5.xyxx
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,4f]>
                add r4.xy, r2.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,5f]>
                mov r3.w, l(0)
                add r4.xy, r2.yzyy, r3.ywyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,6f]>
                add r3.xz, r2.yyzy, r3.xxyx
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xzxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,7f]>
                add r3.xz, r2.yyzy, r3.wwyw
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xzxx, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,8f]>
                add r2.yz, r2.yyzy, r3.yyyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.yzyy, t2.xxxx, s2, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,9f]>
                
                #line 299
                div r0.w, r0.w, l(9.000000)  // percentLit<0:[0f,1f]>
                mov r0.w, r0.w  // CalcShadowFactor<0:[0f,1f]>
                
                #line 41 "Basic-LightDirShadowAndSSAOTech.fx"
                mov r0.w, r0.w  // shadow<0:[0f,1f]>
                
                #line 44
                div r2.xy, v6.xyxx, v6.wwww  // pIn<19:NaN:Inf,20:NaN:Inf>
                sample_indexable(0,0,0)(texture2d)(float,float,float,float) r1.w, r2.xyxx, t3.yzwx, s0
                mov r1.w, r1.w  // ambientAccess<0:Inf>
                
                #line 55
                nop 
                mov r2.xyz, cb1[12].xyzx  // mat<0,1,2>
                mov r3.xyz, cb1[13].xyzx  // mat<4,5,6>
                mov r4.xyzw, cb1[14].xyzw  // mat<8,9,10,11>
                mov r5.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r6.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r7.xyz, cb0[2].xyzx  // L<8,9,10>
                mov r8.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 119 "LightsUtilities.fx"
                mov r8.xyz, -r8.xyzx  // lightVec<0,1,2>
                
                #line 122
                mul r2.xyz, r2.xyzx, r5.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 127
                dp3 r2.w, r8.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 131
                lt r3.w, l(0.000000), r2.w
                mov r5.xyz, -r8.xyzx
                dp3 r5.w, r5.xyzx, r0.xyzx
                add r5.w, r5.w, r5.w
                mov r5.w, -r5.w
                mul r0.xyz, r0.xyzx, r5.wwww
                add r0.xyz, r5.xyzx, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r4.w
                exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                mul r1.xyz, r3.xyzx, r2.wwww
                mul r1.xyz, r6.xyzx, r1.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r0.xyz, r4.xyzx, r0.xxxx
                mul r0.xyz, r7.xyzx, r0.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                movc r1.xyz, r3.wwww, r1.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r0.xyz, r3.wwww, r0.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 55 "Basic-LightDirShadowAndSSAOTech.fx"
                mov r2.xyz, r2.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r1.xyz, r1.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r2.xyz, r1.wwww, r2.xyzx
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r1.xyz, r0.wwww, r1.xyzx
                add r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 68
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r1.xyz, r1.xyzx, r3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 73
                mul r0.w, r3.w, cb1[13].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSLightDirShadowAndSSAOTech<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PSLightDirShadowAndSSAOTech<3:NaN:Inf>
                ret 
                // Approximately 133 instruction slots used
                            
            };
        }

    }

}

